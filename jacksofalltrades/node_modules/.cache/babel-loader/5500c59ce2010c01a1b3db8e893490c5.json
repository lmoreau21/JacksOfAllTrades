{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { PersonalizeEventsClient } from \"./PersonalizeEventsClient\";\nimport { PutEventsCommand } from \"./commands/PutEventsCommand\";\nimport { PutItemsCommand } from \"./commands/PutItemsCommand\";\nimport { PutUsersCommand } from \"./commands/PutUsersCommand\";\n/**\n * <p>Amazon Personalize can consume real-time user event data, such as <i>stream</i> or <i>click</i> data, and use\n *       it for model training either alone or combined with historical data. For more information see <a>recording-events</a>.</p>\n */\n\nvar PersonalizeEvents =\n/** @class */\nfunction (_super) {\n  __extends(PersonalizeEvents, _super);\n\n  function PersonalizeEvents() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  PersonalizeEvents.prototype.putEvents = function (args, optionsOrCb, cb) {\n    var command = new PutEventsCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  PersonalizeEvents.prototype.putItems = function (args, optionsOrCb, cb) {\n    var command = new PutItemsCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  PersonalizeEvents.prototype.putUsers = function (args, optionsOrCb, cb) {\n    var command = new PutUsersCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  return PersonalizeEvents;\n}(PersonalizeEventsClient);\n\nexport { PersonalizeEvents };","map":{"version":3,"mappings":";AAAA,SAASA,uBAAT,QAAwC,2BAAxC;AACA,SAASC,gBAAT,QAAgF,6BAAhF;AACA,SAASC,eAAT,QAA6E,4BAA7E;AACA,SAASC,eAAT,QAA6E,4BAA7E;AAGA;;;;;AAIA;AAAA;AAAA;EAAuCC;;EAAvC;;EAgFC;;EArEQC,wCAAP,UACEC,IADF,EAEEC,WAFF,EAGEC,EAHF,EAGwD;IAEtD,IAAMC,OAAO,GAAG,IAAIR,gBAAJ,CAAqBK,IAArB,CAAhB;;IACA,IAAI,OAAOC,WAAP,KAAuB,UAA3B,EAAuC;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAnB;IACD,CAFD,MAEO,IAAI,OAAOC,EAAP,KAAc,UAAlB,EAA8B;MACnC,IAAI,OAAOD,WAAP,KAAuB,QAA3B,EAAqC,MAAM,IAAII,KAAJ,CAAU,iCAA+B,OAAOJ,WAAhD,CAAN;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAW,IAAI,EAAlC,EAAsCC,EAAtC;IACD,CAHM,MAGA;MACL,OAAO,KAAKE,IAAL,CAAUD,OAAV,EAAmBF,WAAnB,CAAP;IACD;EACF,CAdM;;EA2BAF,uCAAP,UACEC,IADF,EAEEC,WAFF,EAGEC,EAHF,EAGuD;IAErD,IAAMC,OAAO,GAAG,IAAIP,eAAJ,CAAoBI,IAApB,CAAhB;;IACA,IAAI,OAAOC,WAAP,KAAuB,UAA3B,EAAuC;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAnB;IACD,CAFD,MAEO,IAAI,OAAOC,EAAP,KAAc,UAAlB,EAA8B;MACnC,IAAI,OAAOD,WAAP,KAAuB,QAA3B,EAAqC,MAAM,IAAII,KAAJ,CAAU,iCAA+B,OAAOJ,WAAhD,CAAN;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAW,IAAI,EAAlC,EAAsCC,EAAtC;IACD,CAHM,MAGA;MACL,OAAO,KAAKE,IAAL,CAAUD,OAAV,EAAmBF,WAAnB,CAAP;IACD;EACF,CAdM;;EA2BAF,uCAAP,UACEC,IADF,EAEEC,WAFF,EAGEC,EAHF,EAGuD;IAErD,IAAMC,OAAO,GAAG,IAAIN,eAAJ,CAAoBG,IAApB,CAAhB;;IACA,IAAI,OAAOC,WAAP,KAAuB,UAA3B,EAAuC;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAnB;IACD,CAFD,MAEO,IAAI,OAAOC,EAAP,KAAc,UAAlB,EAA8B;MACnC,IAAI,OAAOD,WAAP,KAAuB,QAA3B,EAAqC,MAAM,IAAII,KAAJ,CAAU,iCAA+B,OAAOJ,WAAhD,CAAN;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAW,IAAI,EAAlC,EAAsCC,EAAtC;IACD,CAHM,MAGA;MACL,OAAO,KAAKE,IAAL,CAAUD,OAAV,EAAmBF,WAAnB,CAAP;IACD;EACF,CAdM;;EAeT;AAAC,CAhFD,CAAuCP,uBAAvC","names":["PersonalizeEventsClient","PutEventsCommand","PutItemsCommand","PutUsersCommand","__extends","PersonalizeEvents","args","optionsOrCb","cb","command","send","Error"],"sources":["C:\\Users\\lmore\\OneDrive\\Documents\\GitHub\\JacksOfAllTrades\\jacksofalltrades\\node_modules\\@aws-sdk\\client-personalize-events\\PersonalizeEvents.ts"],"sourcesContent":["import { PersonalizeEventsClient } from \"./PersonalizeEventsClient\";\nimport { PutEventsCommand, PutEventsCommandInput, PutEventsCommandOutput } from \"./commands/PutEventsCommand\";\nimport { PutItemsCommand, PutItemsCommandInput, PutItemsCommandOutput } from \"./commands/PutItemsCommand\";\nimport { PutUsersCommand, PutUsersCommandInput, PutUsersCommandOutput } from \"./commands/PutUsersCommand\";\nimport { HttpHandlerOptions as __HttpHandlerOptions } from \"@aws-sdk/types\";\n\n/**\n * <p>Amazon Personalize can consume real-time user event data, such as <i>stream</i> or <i>click</i> data, and use\n *       it for model training either alone or combined with historical data. For more information see <a>recording-events</a>.</p>\n */\nexport class PersonalizeEvents extends PersonalizeEventsClient {\n  /**\n   * <p>Records user interaction event data. For more information see <a>event-record-api</a>.</p>\n   */\n  public putEvents(args: PutEventsCommandInput, options?: __HttpHandlerOptions): Promise<PutEventsCommandOutput>;\n  public putEvents(args: PutEventsCommandInput, cb: (err: any, data?: PutEventsCommandOutput) => void): void;\n  public putEvents(\n    args: PutEventsCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: PutEventsCommandOutput) => void\n  ): void;\n  public putEvents(\n    args: PutEventsCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: PutEventsCommandOutput) => void),\n    cb?: (err: any, data?: PutEventsCommandOutput) => void\n  ): Promise<PutEventsCommandOutput> | void {\n    const command = new PutEventsCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Adds one or more items to an Items dataset. For more information see\n   *       <a>importing-items</a>.</p>\n   */\n  public putItems(args: PutItemsCommandInput, options?: __HttpHandlerOptions): Promise<PutItemsCommandOutput>;\n  public putItems(args: PutItemsCommandInput, cb: (err: any, data?: PutItemsCommandOutput) => void): void;\n  public putItems(\n    args: PutItemsCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: PutItemsCommandOutput) => void\n  ): void;\n  public putItems(\n    args: PutItemsCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: PutItemsCommandOutput) => void),\n    cb?: (err: any, data?: PutItemsCommandOutput) => void\n  ): Promise<PutItemsCommandOutput> | void {\n    const command = new PutItemsCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Adds one or more users to a Users dataset. For more information see\n   *       <a>importing-users</a>.</p>\n   */\n  public putUsers(args: PutUsersCommandInput, options?: __HttpHandlerOptions): Promise<PutUsersCommandOutput>;\n  public putUsers(args: PutUsersCommandInput, cb: (err: any, data?: PutUsersCommandOutput) => void): void;\n  public putUsers(\n    args: PutUsersCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: PutUsersCommandOutput) => void\n  ): void;\n  public putUsers(\n    args: PutUsersCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: PutUsersCommandOutput) => void),\n    cb?: (err: any, data?: PutUsersCommandOutput) => void\n  ): Promise<PutUsersCommandOutput> | void {\n    const command = new PutUsersCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}