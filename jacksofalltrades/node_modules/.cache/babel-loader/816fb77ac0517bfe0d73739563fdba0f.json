{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n/*\n * Copyright 2017-2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n// import '../Common/Polyfills';\n\n\nimport Observable from 'zen-observable-ts';\nimport { Amplify, browserOrNode, ConsoleLogger as Logger, INTERNAL_AWS_APPSYNC_PUBSUB_PROVIDER, INTERNAL_AWS_APPSYNC_REALTIME_PUBSUB_PROVIDER } from '@aws-amplify/core';\nimport { AWSAppSyncProvider, AWSAppSyncRealTimeProvider } from './Providers';\nvar isNode = browserOrNode().isNode;\nvar logger = new Logger('PubSub');\n\nvar PubSubClass =\n/** @class */\nfunction () {\n  /**\n   * Initialize PubSub with AWS configurations\n   *\n   * @param {PubSubOptions} options - Configuration object for PubSub\n   */\n  function PubSubClass(options) {\n    this._options = options !== null && options !== void 0 ? options : {};\n    logger.debug('PubSub Options', this._options);\n    this._pluggables = [];\n    this.subscribe = this.subscribe.bind(this);\n  }\n\n  Object.defineProperty(PubSubClass.prototype, \"awsAppSyncProvider\", {\n    /**\n     * Lazy instantiate AWSAppSyncProvider when it is required by the API category\n     */\n    get: function get() {\n      if (!this._awsAppSyncProvider) {\n        this._awsAppSyncProvider = new AWSAppSyncProvider(this._options);\n      }\n\n      return this._awsAppSyncProvider;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PubSubClass.prototype, \"awsAppSyncRealTimeProvider\", {\n    /**\n     * Lazy instantiate AWSAppSyncRealTimeProvider when it is required by the API category\n     */\n    get: function get() {\n      if (!this._awsAppSyncRealTimeProvider) {\n        this._awsAppSyncRealTimeProvider = new AWSAppSyncRealTimeProvider(this._options);\n      }\n\n      return this._awsAppSyncRealTimeProvider;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  PubSubClass.prototype.getModuleName = function () {\n    return 'PubSub';\n  };\n  /**\n   * Configure PubSub part with configurations\n   *\n   * @param {PubSubOptions} config - Configuration for PubSub\n   * @return {Object} - The current configuration\n   */\n\n\n  PubSubClass.prototype.configure = function (options) {\n    var _this = this;\n\n    var opt = options ? options.PubSub || options : {};\n    logger.debug('configure PubSub', {\n      opt: opt\n    });\n    this._options = Object.assign({}, this._options, opt);\n\n    this._pluggables.map(function (pluggable) {\n      return pluggable.configure(_this._options);\n    });\n\n    return this._options;\n  };\n  /**\n   * add plugin into Analytics category\n   * @param {Object} pluggable - an instance of the plugin\n   */\n\n\n  PubSubClass.prototype.addPluggable = function (pluggable) {\n    return __awaiter(this, void 0, void 0, function () {\n      var config;\n      return __generator(this, function (_a) {\n        if (pluggable && pluggable.getCategory() === 'PubSub') {\n          this._pluggables.push(pluggable);\n\n          config = pluggable.configure(this._options);\n          return [2\n          /*return*/\n          , config];\n        }\n\n        return [2\n        /*return*/\n        ];\n      });\n    });\n  };\n  /**\n   * remove plugin from PubSub category\n   * @param providerName - the name of the plugin\n   */\n\n\n  PubSubClass.prototype.removePluggable = function (providerName) {\n    this._pluggables = this._pluggables.filter(function (pluggable) {\n      return pluggable.getProviderName() !== providerName;\n    });\n  };\n\n  PubSubClass.prototype.getProviderByName = function (providerName) {\n    if (providerName === INTERNAL_AWS_APPSYNC_PUBSUB_PROVIDER) {\n      return this.awsAppSyncProvider;\n    }\n\n    if (providerName === INTERNAL_AWS_APPSYNC_REALTIME_PUBSUB_PROVIDER) {\n      return this.awsAppSyncRealTimeProvider;\n    }\n\n    return this._pluggables.find(function (pluggable) {\n      return pluggable.getProviderName() === providerName;\n    });\n  };\n\n  PubSubClass.prototype.getProviders = function (options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var providerName = options.provider;\n\n    if (!providerName) {\n      return this._pluggables;\n    }\n\n    var provider = this.getProviderByName(providerName);\n\n    if (!provider) {\n      throw new Error(\"Could not find provider named \" + providerName);\n    }\n\n    return [provider];\n  };\n\n  PubSubClass.prototype.publish = function (topics, msg, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , Promise.all(this.getProviders(options).map(function (provider) {\n          return provider.publish(topics, msg, options);\n        }))];\n      });\n    });\n  };\n\n  PubSubClass.prototype.subscribe = function (topics, options) {\n    if (isNode && this._options && this._options.ssr) {\n      throw new Error('Subscriptions are not supported for Server-Side Rendering (SSR)');\n    }\n\n    logger.debug('subscribe options', options);\n    var providers = this.getProviders(options);\n    return new Observable(function (observer) {\n      var observables = providers.map(function (provider) {\n        return {\n          provider: provider,\n          observable: provider.subscribe(topics, options)\n        };\n      });\n      var subscriptions = observables.map(function (_a) {\n        var provider = _a.provider,\n            observable = _a.observable;\n        return observable.subscribe({\n          start: console.error,\n          next: function next(value) {\n            return observer.next({\n              provider: provider,\n              value: value\n            });\n          },\n          error: function error(_error) {\n            return observer.error({\n              provider: provider,\n              error: _error\n            });\n          }\n        });\n      });\n      return function () {\n        return subscriptions.forEach(function (subscription) {\n          return subscription.unsubscribe();\n        });\n      };\n    });\n  };\n\n  return PubSubClass;\n}();\n\nexport { PubSubClass };\nexport var PubSub = new PubSubClass();\nAmplify.register(PubSub);","map":{"version":3,"mappings":"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","names":["Observable","Amplify","browserOrNode","ConsoleLogger","Logger","INTERNAL_AWS_APPSYNC_PUBSUB_PROVIDER","INTERNAL_AWS_APPSYNC_REALTIME_PUBSUB_PROVIDER","AWSAppSyncProvider","AWSAppSyncRealTimeProvider","logger","options","_options","debug","_pluggables","subscribe","bind","Object","PubSubClass","_awsAppSyncProvider","_awsAppSyncRealTimeProvider","opt","PubSub","assign","map","configure","_this","pluggable","getCategory","push","config","providerName","filter","getProviderName","awsAppSyncProvider","awsAppSyncRealTimeProvider","find","provider","getProviderByName","Error","topics","msg","Promise","all","getProviders","publish","isNode","ssr","providers","observables","observable","subscriptions","_a","start","console","error","next","value","forEach","unsubscribe","register"],"sources":["C:\\Users\\lmore\\OneDrive\\Documents\\GitHub\\JacksOfAllTrades\\jacksofalltrades\\node_modules\\@aws-amplify\\pubsub\\src\\PubSub.ts"],"sourcesContent":["/*\n * Copyright 2017-2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n// import '../Common/Polyfills';\nimport Observable from 'zen-observable-ts';\n\nimport {\n\tAmplify,\n\tbrowserOrNode,\n\tConsoleLogger as Logger,\n\tINTERNAL_AWS_APPSYNC_PUBSUB_PROVIDER,\n\tINTERNAL_AWS_APPSYNC_REALTIME_PUBSUB_PROVIDER,\n} from '@aws-amplify/core';\nimport { PubSubProvider, PubSubOptions, ProviderOptions } from './types';\nimport { AWSAppSyncProvider, AWSAppSyncRealTimeProvider } from './Providers';\n\nconst { isNode } = browserOrNode();\nconst logger = new Logger('PubSub');\n\nexport class PubSubClass {\n\tprivate _options: PubSubOptions;\n\n\tprivate _pluggables: PubSubProvider[];\n\n\t/**\n\t * Internal instance of AWSAppSyncProvider used by the API category to subscribe to AppSync\n\t */\n\tprivate _awsAppSyncProvider?: AWSAppSyncProvider;\n\n\t/**\n\t * Internal instance of AWSAppSyncRealTimeProvider used by the API category to subscribe to AppSync\n\t */\n\tprivate _awsAppSyncRealTimeProvider?: AWSAppSyncRealTimeProvider;\n\n\t/**\n\t * Lazy instantiate AWSAppSyncProvider when it is required by the API category\n\t */\n\tprivate get awsAppSyncProvider() {\n\t\tif (!this._awsAppSyncProvider) {\n\t\t\tthis._awsAppSyncProvider = new AWSAppSyncProvider(this._options);\n\t\t}\n\t\treturn this._awsAppSyncProvider;\n\t}\n\n\t/**\n\t * Lazy instantiate AWSAppSyncRealTimeProvider when it is required by the API category\n\t */\n\tprivate get awsAppSyncRealTimeProvider() {\n\t\tif (!this._awsAppSyncRealTimeProvider) {\n\t\t\tthis._awsAppSyncRealTimeProvider = new AWSAppSyncRealTimeProvider(\n\t\t\t\tthis._options\n\t\t\t);\n\t\t}\n\t\treturn this._awsAppSyncRealTimeProvider;\n\t}\n\n\t/**\n\t * Initialize PubSub with AWS configurations\n\t *\n\t * @param {PubSubOptions} options - Configuration object for PubSub\n\t */\n\tconstructor(options?: PubSubOptions) {\n\t\tthis._options = options ?? {};\n\t\tlogger.debug('PubSub Options', this._options);\n\t\tthis._pluggables = [];\n\t\tthis.subscribe = this.subscribe.bind(this);\n\t}\n\n\tpublic getModuleName() {\n\t\treturn 'PubSub';\n\t}\n\n\t/**\n\t * Configure PubSub part with configurations\n\t *\n\t * @param {PubSubOptions} config - Configuration for PubSub\n\t * @return {Object} - The current configuration\n\t */\n\tconfigure(options: PubSubOptions) {\n\t\tconst opt = options ? options.PubSub || options : {};\n\t\tlogger.debug('configure PubSub', { opt });\n\n\t\tthis._options = Object.assign({}, this._options, opt);\n\n\t\tthis._pluggables.map(pluggable => pluggable.configure(this._options));\n\n\t\treturn this._options;\n\t}\n\n\t/**\n\t * add plugin into Analytics category\n\t * @param {Object} pluggable - an instance of the plugin\n\t */\n\tpublic async addPluggable(pluggable: PubSubProvider) {\n\t\tif (pluggable && pluggable.getCategory() === 'PubSub') {\n\t\t\tthis._pluggables.push(pluggable);\n\n\t\t\tconst config = pluggable.configure(this._options);\n\n\t\t\treturn config;\n\t\t}\n\t}\n\n\t/**\n\t * remove plugin from PubSub category\n\t * @param providerName - the name of the plugin\n\t */\n\tremovePluggable(providerName: string): void {\n\t\tthis._pluggables = this._pluggables.filter(\n\t\t\tpluggable => pluggable.getProviderName() !== providerName\n\t\t);\n\t}\n\n\tprivate getProviderByName(providerName: string | symbol) {\n\t\tif (providerName === INTERNAL_AWS_APPSYNC_PUBSUB_PROVIDER) {\n\t\t\treturn this.awsAppSyncProvider;\n\t\t}\n\t\tif (providerName === INTERNAL_AWS_APPSYNC_REALTIME_PUBSUB_PROVIDER) {\n\t\t\treturn this.awsAppSyncRealTimeProvider;\n\t\t}\n\n\t\treturn this._pluggables.find(\n\t\t\tpluggable => pluggable.getProviderName() === providerName\n\t\t);\n\t}\n\n\tprivate getProviders(options: ProviderOptions = {}) {\n\t\tconst { provider: providerName } = options;\n\t\tif (!providerName) {\n\t\t\treturn this._pluggables;\n\t\t}\n\n\t\tconst provider = this.getProviderByName(providerName);\n\t\tif (!provider) {\n\t\t\tthrow new Error(`Could not find provider named ${providerName}`);\n\t\t}\n\n\t\treturn [provider];\n\t}\n\n\tasync publish(\n\t\ttopics: string[] | string,\n\t\tmsg: any,\n\t\toptions?: ProviderOptions\n\t) {\n\t\treturn Promise.all(\n\t\t\tthis.getProviders(options).map(provider =>\n\t\t\t\tprovider.publish(topics, msg, options)\n\t\t\t)\n\t\t);\n\t}\n\n\tsubscribe(\n\t\ttopics: string[] | string,\n\t\toptions?: ProviderOptions\n\t): Observable<any> {\n\t\tif (isNode && this._options && this._options.ssr) {\n\t\t\tthrow new Error(\n\t\t\t\t'Subscriptions are not supported for Server-Side Rendering (SSR)'\n\t\t\t);\n\t\t}\n\n\t\tlogger.debug('subscribe options', options);\n\n\t\tconst providers = this.getProviders(options);\n\n\t\treturn new Observable(observer => {\n\t\t\tconst observables = providers.map(provider => ({\n\t\t\t\tprovider,\n\t\t\t\tobservable: provider.subscribe(topics, options),\n\t\t\t}));\n\n\t\t\tconst subscriptions = observables.map(({ provider, observable }) =>\n\t\t\t\tobservable.subscribe({\n\t\t\t\t\tstart: console.error,\n\t\t\t\t\tnext: value => observer.next({ provider, value }),\n\t\t\t\t\terror: error => observer.error({ provider, error }),\n\t\t\t\t\t// complete: observer.complete, // TODO: when all completed, complete the outer one\n\t\t\t\t})\n\t\t\t);\n\n\t\t\treturn () =>\n\t\t\t\tsubscriptions.forEach(subscription => subscription.unsubscribe());\n\t\t});\n\t}\n}\n\nexport const PubSub = new PubSubClass();\nAmplify.register(PubSub);\n"]},"metadata":{},"sourceType":"module"}