{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function next() {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n/*\n * Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n\n\nimport { ConsoleLogger as Logger, Signer, Credentials, Constants } from '@aws-amplify/core';\nimport { AbstractXRProvider } from './XRProvider';\nimport { XRNoSceneConfiguredError, XRSceneNotFoundError, XRSceneNotLoadedError, XRNoDomElement, XRSceneLoadFailure } from '../Errors';\nvar SUMERIAN_SERVICE_NAME = 'sumerian';\nvar logger = new Logger('SumerianProvider');\n\nvar SumerianProvider =\n/** @class */\nfunction (_super) {\n  __extends(SumerianProvider, _super);\n\n  function SumerianProvider(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return _super.call(this, options) || this;\n  }\n\n  SumerianProvider.prototype.getProviderName = function () {\n    return 'SumerianProvider';\n  };\n\n  SumerianProvider.prototype.loadScript = function (url) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , new Promise(function (resolve, reject) {\n          var scriptElement = document.createElement('script');\n          scriptElement.src = url;\n          scriptElement.addEventListener('load', function (event) {\n            resolve();\n          });\n          scriptElement.addEventListener('error', function (event) {\n            reject(new Error(\"Failed to load script: \" + url));\n          });\n          document.head.appendChild(scriptElement);\n        })];\n      });\n    });\n  };\n\n  SumerianProvider.prototype.loadScene = function (sceneName, domElementId, sceneOptions) {\n    return __awaiter(this, void 0, void 0, function () {\n      var errorMsg, errorMsg, element, errorMsg, scene, errorMsg, sceneUrl, sceneId, sceneRegion, errorMsg, awsSDKConfigOverride, fetchOptions, url, credentials, accessInfo, serviceInfo, request, e_1, apiResponse, apiResponseJson, sceneBundleData, sceneBundle, sceneBundleJson, error_1, progressCallback, publishParamOverrides, sceneLoadParams, sceneController, _a, _b, warning;\n\n      var e_2, _c;\n\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            if (!sceneName) {\n              errorMsg = 'No scene name passed into loadScene';\n              logger.error(errorMsg);\n              throw new XRSceneLoadFailure(errorMsg);\n            }\n\n            if (!domElementId) {\n              errorMsg = 'No dom element id passed into loadScene';\n              logger.error(errorMsg);\n              throw new XRNoDomElement(errorMsg);\n            }\n\n            element = document.getElementById(domElementId);\n\n            if (!element) {\n              errorMsg = \"DOM element id, \" + domElementId + \" not found\";\n              logger.error(errorMsg);\n              throw new XRNoDomElement(errorMsg);\n            }\n\n            scene = this.getScene(sceneName);\n\n            if (!scene.sceneConfig) {\n              errorMsg = \"No scene config configured for scene: \" + sceneName;\n              logger.error(errorMsg);\n              throw new XRSceneLoadFailure(errorMsg);\n            }\n\n            sceneUrl = scene.sceneConfig.url;\n            sceneId = scene.sceneConfig.sceneId;\n\n            if (scene.sceneConfig.hasOwnProperty('region')) {\n              // Use the scene region on the Sumerian scene configuration\n              sceneRegion = scene.sceneConfig.region;\n            } else if (this.options.hasOwnProperty('region')) {\n              // Use the scene region on the XR category configuration\n              sceneRegion = this.options.region;\n            } else {\n              errorMsg = \"No region configured for scene: \" + sceneName;\n              logger.error(errorMsg);\n              throw new XRSceneLoadFailure(errorMsg);\n            }\n\n            awsSDKConfigOverride = {\n              region: sceneRegion,\n              // This is passed to the AWS clients created in\n              // Sumerian's AwsSystem\n              // This helps other services(like Lex and Polly) to track\n              // traffic coming from Sumerian scenes embedded with Amplify\n              customUserAgent: Constants.userAgent + \"-SumerianScene\"\n            };\n            fetchOptions = {\n              headers: {\n                // This sets the AWS user agent string\n                // So the Sumerian service knows this request is\n                // from Amplify\n                'X-Amz-User-Agent': Constants.userAgent\n              }\n            };\n            url = sceneUrl;\n            _d.label = 1;\n\n          case 1:\n            _d.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , Credentials.get()];\n\n          case 2:\n            credentials = _d.sent();\n            awsSDKConfigOverride['credentials'] = credentials;\n            accessInfo = {\n              secret_key: credentials.secretAccessKey,\n              access_key: credentials.accessKeyId,\n              session_token: credentials.sessionToken\n            };\n            serviceInfo = {\n              region: sceneRegion,\n              service: SUMERIAN_SERVICE_NAME\n            };\n            request = Signer.sign({\n              method: 'GET',\n              url: sceneUrl\n            }, accessInfo, serviceInfo);\n            fetchOptions.headers = __assign(__assign({}, fetchOptions.headers), request.headers);\n            url = request.url;\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            e_1 = _d.sent();\n            logger.debug('No credentials available, the request will be unsigned');\n            return [3\n            /*break*/\n            , 4];\n\n          case 4:\n            return [4\n            /*yield*/\n            , fetch(url, fetchOptions)];\n\n          case 5:\n            apiResponse = _d.sent();\n            return [4\n            /*yield*/\n            , apiResponse.json()];\n\n          case 6:\n            apiResponseJson = _d.sent();\n\n            if (apiResponse.status === 403) {\n              if (apiResponseJson.message) {\n                logger.error(\"Failure to authenticate user: \" + apiResponseJson.message);\n                throw new XRSceneLoadFailure(\"Failure to authenticate user: \" + apiResponseJson.message);\n              } else {\n                logger.error(\"Failure to authenticate user\");\n                throw new XRSceneLoadFailure(\"Failure to authenticate user\");\n              }\n            }\n\n            sceneBundleData = apiResponseJson.bundleData[sceneId];\n            return [4\n            /*yield*/\n            , fetch(sceneBundleData.url, {\n              headers: sceneBundleData.headers\n            })];\n\n          case 7:\n            sceneBundle = _d.sent();\n            return [4\n            /*yield*/\n            , sceneBundle.json()];\n\n          case 8:\n            sceneBundleJson = _d.sent();\n            _d.label = 9;\n\n          case 9:\n            _d.trys.push([9, 11,, 12]); // Load the Sumerian bootstrapper script into the DOM\n\n\n            return [4\n            /*yield*/\n            , this.loadScript(sceneBundleJson[sceneId].bootstrapperUrl)];\n\n          case 10:\n            // Load the Sumerian bootstrapper script into the DOM\n            _d.sent();\n\n            return [3\n            /*break*/\n            , 12];\n\n          case 11:\n            error_1 = _d.sent();\n            logger.error(error_1);\n            throw new XRSceneLoadFailure(error_1);\n\n          case 12:\n            progressCallback = sceneOptions.progressCallback ? sceneOptions.progressCallback : undefined;\n            publishParamOverrides = scene.publishParamOverrides ? scene.publishParamOverrides : undefined;\n            sceneLoadParams = {\n              element: element,\n              sceneId: sceneId,\n              sceneBundle: sceneBundleJson,\n              apiResponse: apiResponseJson,\n              progressCallback: progressCallback,\n              publishParamOverrides: publishParamOverrides,\n              awsSDKConfigOverride: awsSDKConfigOverride\n            };\n            return [4\n            /*yield*/\n            , window.SumerianBootstrapper.loadScene(sceneLoadParams)];\n\n          case 13:\n            sceneController = _d.sent();\n            scene.sceneController = sceneController;\n            scene.isLoaded = true;\n\n            try {\n              // Log scene warnings\n              for (_a = __values(sceneController.sceneLoadWarnings), _b = _a.next(); !_b.done; _b = _a.next()) {\n                warning = _b.value;\n                logger.warn(\"loadScene warning: \" + warning);\n              }\n            } catch (e_2_1) {\n              e_2 = {\n                error: e_2_1\n              };\n            } finally {\n              try {\n                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);\n              } finally {\n                if (e_2) throw e_2.error;\n              }\n            }\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  SumerianProvider.prototype.isSceneLoaded = function (sceneName) {\n    var scene = this.getScene(sceneName);\n    return scene.isLoaded || false;\n  };\n\n  SumerianProvider.prototype.getScene = function (sceneName) {\n    if (!this.options.scenes) {\n      var errorMsg = 'No scenes were defined in the configuration';\n      logger.error(errorMsg);\n      throw new XRNoSceneConfiguredError(errorMsg);\n    }\n\n    if (!sceneName) {\n      var errorMsg = 'No scene name was passed';\n      logger.error(errorMsg);\n      throw new XRSceneNotFoundError(errorMsg);\n    }\n\n    if (!this.options.scenes[sceneName]) {\n      var errorMsg = \"Scene '\" + sceneName + \"' is not configured\";\n      logger.error(errorMsg);\n      throw new XRSceneNotFoundError(errorMsg);\n    }\n\n    return this.options.scenes[sceneName];\n  };\n\n  SumerianProvider.prototype.getSceneController = function (sceneName) {\n    if (!this.options.scenes) {\n      var errorMsg = 'No scenes were defined in the configuration';\n      logger.error(errorMsg);\n      throw new XRNoSceneConfiguredError(errorMsg);\n    }\n\n    var scene = this.options.scenes[sceneName];\n\n    if (!scene) {\n      var errorMsg = \"Scene '\" + sceneName + \"' is not configured\";\n      logger.error(errorMsg);\n      throw new XRSceneNotFoundError(errorMsg);\n    }\n\n    var sceneController = scene.sceneController;\n\n    if (!sceneController) {\n      var errorMsg = \"Scene controller for '\" + sceneName + \"' has not been loaded\";\n      logger.error(errorMsg);\n      throw new XRSceneNotLoadedError(errorMsg);\n    }\n\n    return sceneController;\n  };\n\n  SumerianProvider.prototype.isVRCapable = function (sceneName) {\n    var sceneController = this.getSceneController(sceneName);\n    return sceneController.vrCapable;\n  };\n\n  SumerianProvider.prototype.isVRPresentationActive = function (sceneName) {\n    var sceneController = this.getSceneController(sceneName);\n    return sceneController.vrPresentationActive;\n  };\n\n  SumerianProvider.prototype.start = function (sceneName) {\n    var sceneController = this.getSceneController(sceneName);\n    sceneController.start();\n  };\n\n  SumerianProvider.prototype.enterVR = function (sceneName) {\n    var sceneController = this.getSceneController(sceneName);\n    sceneController.enterVR();\n  };\n\n  SumerianProvider.prototype.exitVR = function (sceneName) {\n    var sceneController = this.getSceneController(sceneName);\n    sceneController.exitVR();\n  };\n\n  SumerianProvider.prototype.isMuted = function (sceneName) {\n    var sceneController = this.getSceneController(sceneName);\n    return sceneController.muted;\n  };\n\n  SumerianProvider.prototype.setMuted = function (sceneName, muted) {\n    var sceneController = this.getSceneController(sceneName);\n    sceneController.muted = muted;\n  };\n\n  SumerianProvider.prototype.onSceneEvent = function (sceneName, eventName, eventHandler) {\n    var sceneController = this.getSceneController(sceneName);\n    sceneController.on(eventName, eventHandler);\n  };\n\n  SumerianProvider.prototype.enableAudio = function (sceneName) {\n    var sceneController = this.getSceneController(sceneName);\n    sceneController.enableAudio();\n  };\n\n  return SumerianProvider;\n}(AbstractXRProvider);\n\nexport { SumerianProvider };","map":{"version":3,"mappings":"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","names":["ConsoleLogger","Logger","Signer","Credentials","Constants","AbstractXRProvider","XRNoSceneConfiguredError","XRSceneNotFoundError","XRSceneNotLoadedError","XRNoDomElement","XRSceneLoadFailure","SUMERIAN_SERVICE_NAME","logger","__extends","options","_super","SumerianProvider","url","Promise","resolve","reject","scriptElement","document","createElement","src","addEventListener","Error","head","appendChild","sceneName","domElementId","sceneOptions","errorMsg","error","element","getElementById","scene","getScene","sceneConfig","sceneUrl","sceneId","hasOwnProperty","sceneRegion","region","awsSDKConfigOverride","customUserAgent","userAgent","fetchOptions","headers","get","credentials","_d","accessInfo","secret_key","secretAccessKey","access_key","accessKeyId","session_token","sessionToken","serviceInfo","service","request","sign","method","__assign","debug","fetch","apiResponse","json","apiResponseJson","status","message","sceneBundleData","bundleData","sceneBundle","sceneBundleJson","loadScript","bootstrapperUrl","error_1","progressCallback","undefined","publishParamOverrides","sceneLoadParams","window","SumerianBootstrapper","loadScene","sceneController","isLoaded","_a","sceneLoadWarnings","_b","warning","warn","scenes","getSceneController","vrCapable","vrPresentationActive","start","enterVR","exitVR","muted","eventName","eventHandler","on","enableAudio"],"sources":["C:\\Users\\lmore\\OneDrive\\Documents\\GitHub\\JacksOfAllTrades\\jacksofalltrades\\node_modules\\@aws-amplify\\xr\\src\\Providers\\SumerianProvider.ts"],"sourcesContent":["/*\n * Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nimport {\n\tConsoleLogger as Logger,\n\tSigner,\n\tCredentials,\n\tConstants,\n} from '@aws-amplify/core';\n\nimport { AbstractXRProvider } from './XRProvider';\nimport { ProviderOptions, SceneOptions } from '../types';\nimport {\n\tXRNoSceneConfiguredError,\n\tXRSceneNotFoundError,\n\tXRSceneNotLoadedError,\n\tXRNoDomElement,\n\tXRSceneLoadFailure,\n} from '../Errors';\n\ntype SumerianSceneOptions = SceneOptions & { progressCallback: Function };\n\nconst SUMERIAN_SERVICE_NAME = 'sumerian';\n\nconst logger = new Logger('SumerianProvider');\n\nexport class SumerianProvider extends AbstractXRProvider {\n\tconstructor(options: ProviderOptions = {}) {\n\t\tsuper(options);\n\t}\n\n\tgetProviderName() {\n\t\treturn 'SumerianProvider';\n\t}\n\n\tprivate async loadScript(url) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst scriptElement = document.createElement('script');\n\t\t\tscriptElement.src = url;\n\n\t\t\tscriptElement.addEventListener('load', event => {\n\t\t\t\tresolve();\n\t\t\t});\n\n\t\t\tscriptElement.addEventListener('error', event => {\n\t\t\t\treject(new Error(`Failed to load script: ${url}`));\n\t\t\t});\n\n\t\t\tdocument.head.appendChild(scriptElement);\n\t\t});\n\t}\n\n\tpublic async loadScene(\n\t\tsceneName: string,\n\t\tdomElementId: string,\n\t\tsceneOptions: SumerianSceneOptions\n\t) {\n\t\tif (!sceneName) {\n\t\t\tconst errorMsg = 'No scene name passed into loadScene';\n\t\t\tlogger.error(errorMsg);\n\t\t\tthrow new XRSceneLoadFailure(errorMsg);\n\t\t}\n\n\t\tif (!domElementId) {\n\t\t\tconst errorMsg = 'No dom element id passed into loadScene';\n\t\t\tlogger.error(errorMsg);\n\t\t\tthrow new XRNoDomElement(errorMsg);\n\t\t}\n\n\t\tconst element = document.getElementById(domElementId);\n\t\tif (!element) {\n\t\t\tconst errorMsg = `DOM element id, ${domElementId} not found`;\n\t\t\tlogger.error(errorMsg);\n\t\t\tthrow new XRNoDomElement(errorMsg);\n\t\t}\n\n\t\tconst scene = this.getScene(sceneName);\n\t\tif (!scene.sceneConfig) {\n\t\t\tconst errorMsg = `No scene config configured for scene: ${sceneName}`;\n\t\t\tlogger.error(errorMsg);\n\t\t\tthrow new XRSceneLoadFailure(errorMsg);\n\t\t}\n\n\t\tconst sceneUrl = scene.sceneConfig.url;\n\t\tconst sceneId = scene.sceneConfig.sceneId;\n\n\t\tlet sceneRegion;\n\t\tif (scene.sceneConfig.hasOwnProperty('region')) {\n\t\t\t// Use the scene region on the Sumerian scene configuration\n\t\t\tsceneRegion = scene.sceneConfig.region;\n\t\t} else if (this.options.hasOwnProperty('region')) {\n\t\t\t// Use the scene region on the XR category configuration\n\t\t\tsceneRegion = this.options.region;\n\t\t} else {\n\t\t\tconst errorMsg = `No region configured for scene: ${sceneName}`;\n\t\t\tlogger.error(errorMsg);\n\t\t\tthrow new XRSceneLoadFailure(errorMsg);\n\t\t}\n\n\t\tconst awsSDKConfigOverride = {\n\t\t\tregion: sceneRegion,\n\t\t\t// This is passed to the AWS clients created in\n\t\t\t// Sumerian's AwsSystem\n\t\t\t// This helps other services(like Lex and Polly) to track\n\t\t\t// traffic coming from Sumerian scenes embedded with Amplify\n\t\t\tcustomUserAgent: `${Constants.userAgent}-SumerianScene`,\n\t\t};\n\n\t\t// We are signing the requests to Sumerian ourselves instead of using the AWS SDK\n\t\t// We want to set the user agent header\n\t\tconst fetchOptions = {\n\t\t\theaders: {\n\t\t\t\t// This sets the AWS user agent string\n\t\t\t\t// So the Sumerian service knows this request is\n\t\t\t\t// from Amplify\n\t\t\t\t'X-Amz-User-Agent': Constants.userAgent,\n\t\t\t},\n\t\t};\n\n\t\tlet url = sceneUrl;\n\t\ttry {\n\t\t\t// Get credentials from Auth and sign the request\n\t\t\tconst credentials = await Credentials.get();\n\t\t\tawsSDKConfigOverride['credentials'] = credentials;\n\t\t\tconst accessInfo = {\n\t\t\t\tsecret_key: credentials.secretAccessKey,\n\t\t\t\taccess_key: credentials.accessKeyId,\n\t\t\t\tsession_token: credentials.sessionToken,\n\t\t\t};\n\n\t\t\tconst serviceInfo = {\n\t\t\t\tregion: sceneRegion,\n\t\t\t\tservice: SUMERIAN_SERVICE_NAME,\n\t\t\t};\n\t\t\tconst request = Signer.sign(\n\t\t\t\t{ method: 'GET', url: sceneUrl },\n\t\t\t\taccessInfo,\n\t\t\t\tserviceInfo\n\t\t\t);\n\t\t\tfetchOptions.headers = { ...fetchOptions.headers, ...request.headers };\n\t\t\turl = request.url;\n\t\t} catch (e) {\n\t\t\tlogger.debug('No credentials available, the request will be unsigned');\n\t\t}\n\n\t\tconst apiResponse = await fetch(url, fetchOptions);\n\t\tconst apiResponseJson = await apiResponse.json();\n\t\tif (apiResponse.status === 403) {\n\t\t\tif (apiResponseJson.message) {\n\t\t\t\tlogger.error(\n\t\t\t\t\t`Failure to authenticate user: ${apiResponseJson.message}`\n\t\t\t\t);\n\t\t\t\tthrow new XRSceneLoadFailure(\n\t\t\t\t\t`Failure to authenticate user: ${apiResponseJson.message}`\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tlogger.error(`Failure to authenticate user`);\n\t\t\t\tthrow new XRSceneLoadFailure(`Failure to authenticate user`);\n\t\t\t}\n\t\t}\n\n\t\t// Get bundle data from scene api response\n\t\tconst sceneBundleData = apiResponseJson.bundleData[sceneId];\n\t\tconst sceneBundle = await fetch(sceneBundleData.url, {\n\t\t\theaders: sceneBundleData.headers,\n\t\t});\n\t\tconst sceneBundleJson = await sceneBundle.json();\n\n\t\ttry {\n\t\t\t// Load the Sumerian bootstrapper script into the DOM\n\t\t\tawait this.loadScript(sceneBundleJson[sceneId].bootstrapperUrl);\n\t\t} catch (error) {\n\t\t\tlogger.error(error);\n\t\t\tthrow new XRSceneLoadFailure(error);\n\t\t}\n\n\t\tconst progressCallback = sceneOptions.progressCallback\n\t\t\t? sceneOptions.progressCallback\n\t\t\t: undefined;\n\t\tconst publishParamOverrides = scene.publishParamOverrides\n\t\t\t? scene.publishParamOverrides\n\t\t\t: undefined;\n\n\t\tconst sceneLoadParams = {\n\t\t\telement,\n\t\t\tsceneId,\n\t\t\tsceneBundle: sceneBundleJson,\n\t\t\tapiResponse: apiResponseJson,\n\t\t\tprogressCallback,\n\t\t\tpublishParamOverrides,\n\t\t\tawsSDKConfigOverride,\n\t\t};\n\n\t\t// Load the scene into the dom and set the scene controller\n\t\tconst sceneController = await (<any>window).SumerianBootstrapper.loadScene(\n\t\t\tsceneLoadParams\n\t\t);\n\t\tscene.sceneController = sceneController;\n\t\tscene.isLoaded = true;\n\n\t\t// Log scene warnings\n\t\tfor (const warning of sceneController.sceneLoadWarnings) {\n\t\t\tlogger.warn(`loadScene warning: ${warning}`);\n\t\t}\n\t}\n\n\tpublic isSceneLoaded(sceneName: string) {\n\t\tconst scene = this.getScene(sceneName);\n\t\treturn scene.isLoaded || false;\n\t}\n\n\tprivate getScene(sceneName: string) {\n\t\tif (!this.options.scenes) {\n\t\t\tconst errorMsg = 'No scenes were defined in the configuration';\n\t\t\tlogger.error(errorMsg);\n\t\t\tthrow new XRNoSceneConfiguredError(errorMsg);\n\t\t}\n\n\t\tif (!sceneName) {\n\t\t\tconst errorMsg = 'No scene name was passed';\n\t\t\tlogger.error(errorMsg);\n\t\t\tthrow new XRSceneNotFoundError(errorMsg);\n\t\t}\n\n\t\tif (!this.options.scenes[sceneName]) {\n\t\t\tconst errorMsg = `Scene '${sceneName}' is not configured`;\n\t\t\tlogger.error(errorMsg);\n\t\t\tthrow new XRSceneNotFoundError(errorMsg);\n\t\t}\n\n\t\treturn this.options.scenes[sceneName];\n\t}\n\n\tpublic getSceneController(sceneName: string) {\n\t\tif (!this.options.scenes) {\n\t\t\tconst errorMsg = 'No scenes were defined in the configuration';\n\t\t\tlogger.error(errorMsg);\n\t\t\tthrow new XRNoSceneConfiguredError(errorMsg);\n\t\t}\n\n\t\tconst scene = this.options.scenes[sceneName];\n\t\tif (!scene) {\n\t\t\tconst errorMsg = `Scene '${sceneName}' is not configured`;\n\t\t\tlogger.error(errorMsg);\n\t\t\tthrow new XRSceneNotFoundError(errorMsg);\n\t\t}\n\n\t\tconst sceneController = scene.sceneController;\n\t\tif (!sceneController) {\n\t\t\tconst errorMsg = `Scene controller for '${sceneName}' has not been loaded`;\n\t\t\tlogger.error(errorMsg);\n\t\t\tthrow new XRSceneNotLoadedError(errorMsg);\n\t\t}\n\n\t\treturn sceneController;\n\t}\n\n\tpublic isVRCapable(sceneName: string): boolean {\n\t\tconst sceneController = this.getSceneController(sceneName);\n\t\treturn sceneController.vrCapable;\n\t}\n\n\tpublic isVRPresentationActive(sceneName: string): boolean {\n\t\tconst sceneController = this.getSceneController(sceneName);\n\t\treturn sceneController.vrPresentationActive;\n\t}\n\n\tpublic start(sceneName: string) {\n\t\tconst sceneController = this.getSceneController(sceneName);\n\t\tsceneController.start();\n\t}\n\n\tpublic enterVR(sceneName: string) {\n\t\tconst sceneController = this.getSceneController(sceneName);\n\t\tsceneController.enterVR();\n\t}\n\n\tpublic exitVR(sceneName: string) {\n\t\tconst sceneController = this.getSceneController(sceneName);\n\t\tsceneController.exitVR();\n\t}\n\n\tpublic isMuted(sceneName: string): boolean {\n\t\tconst sceneController = this.getSceneController(sceneName);\n\t\treturn sceneController.muted;\n\t}\n\n\tpublic setMuted(sceneName: string, muted: boolean) {\n\t\tconst sceneController = this.getSceneController(sceneName);\n\t\tsceneController.muted = muted;\n\t}\n\n\tpublic onSceneEvent(\n\t\tsceneName: string,\n\t\teventName: string,\n\t\teventHandler: Function\n\t) {\n\t\tconst sceneController = this.getSceneController(sceneName);\n\t\tsceneController.on(eventName, eventHandler);\n\t}\n\n\tpublic enableAudio(sceneName: string) {\n\t\tconst sceneController = this.getSceneController(sceneName);\n\t\tsceneController.enableAudio();\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}