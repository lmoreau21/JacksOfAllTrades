{"ast":null,"code":"import { exhaustiveCheck } from '../util';\nexport { ModelSortPredicateCreator } from './sort';\nvar predicatesAllSet = new WeakSet();\nexport function isPredicatesAll(predicate) {\n  return predicatesAllSet.has(predicate);\n} // This symbol is not used at runtime, only its type (unique symbol)\n\nexport var PredicateAll = Symbol('A predicate that matches all records');\n\nvar Predicates =\n/** @class */\nfunction () {\n  function Predicates() {}\n\n  Object.defineProperty(Predicates, \"ALL\", {\n    get: function get() {\n      var predicate = function predicate(c) {\n        return c;\n      };\n\n      predicatesAllSet.add(predicate);\n      return predicate;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return Predicates;\n}();\n\nexport { Predicates };\n\nvar ModelPredicateCreator =\n/** @class */\nfunction () {\n  function ModelPredicateCreator() {}\n\n  ModelPredicateCreator.createPredicateBuilder = function (modelDefinition) {\n    var modelName = modelDefinition.name;\n    var fieldNames = new Set(Object.keys(modelDefinition.fields));\n    var handler;\n    var predicate = new Proxy({}, handler = {\n      get: function get(_target, propertyKey, receiver) {\n        var groupType = propertyKey;\n\n        switch (groupType) {\n          case 'and':\n          case 'or':\n          case 'not':\n            var result_1 = function result_1(newPredicate) {\n              var group = {\n                type: groupType,\n                predicates: []\n              }; // Create a new recorder\n\n              var tmpPredicateRecorder = new Proxy({}, handler); // Set the recorder group\n\n              ModelPredicateCreator.predicateGroupsMap.set(tmpPredicateRecorder, group); // Apply the predicates to the recorder (this is the step that records the changes)\n\n              newPredicate(tmpPredicateRecorder); // Push the group to the top-level recorder\n\n              ModelPredicateCreator.predicateGroupsMap.get(receiver).predicates.push(group);\n              return receiver;\n            };\n\n            return result_1;\n\n          default:\n            exhaustiveCheck(groupType, false);\n        }\n\n        var field = propertyKey;\n\n        if (!fieldNames.has(field)) {\n          throw new Error(\"Invalid field for model. field: \" + field + \", model: \" + modelName);\n        }\n\n        var result = function result(operator, operand) {\n          ModelPredicateCreator.predicateGroupsMap.get(receiver).predicates.push({\n            field: field,\n            operator: operator,\n            operand: operand\n          });\n          return receiver;\n        };\n\n        return result;\n      }\n    });\n    var group = {\n      type: 'and',\n      predicates: []\n    };\n    ModelPredicateCreator.predicateGroupsMap.set(predicate, group);\n    return predicate;\n  };\n\n  ModelPredicateCreator.isValidPredicate = function (predicate) {\n    return ModelPredicateCreator.predicateGroupsMap.has(predicate);\n  };\n\n  ModelPredicateCreator.getPredicates = function (predicate, throwOnInvalid) {\n    if (throwOnInvalid === void 0) {\n      throwOnInvalid = true;\n    }\n\n    if (throwOnInvalid && !ModelPredicateCreator.isValidPredicate(predicate)) {\n      throw new Error('The predicate is not valid');\n    }\n\n    return ModelPredicateCreator.predicateGroupsMap.get(predicate);\n  }; // transforms cb-style predicate into Proxy\n\n\n  ModelPredicateCreator.createFromExisting = function (modelDefinition, existing) {\n    if (!existing || !modelDefinition) {\n      return undefined;\n    }\n\n    return existing(ModelPredicateCreator.createPredicateBuilder(modelDefinition));\n  };\n\n  ModelPredicateCreator.createForId = function (modelDefinition, id) {\n    return ModelPredicateCreator.createPredicateBuilder(modelDefinition).id('eq', id);\n  };\n\n  ModelPredicateCreator.predicateGroupsMap = new WeakMap();\n  return ModelPredicateCreator;\n}();\n\nexport { ModelPredicateCreator };","map":{"version":3,"mappings":"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","names":["exhaustiveCheck","ModelSortPredicateCreator","predicatesAllSet","WeakSet","isPredicatesAll","predicate","has","PredicateAll","Symbol","Object","Predicates","add","ModelPredicateCreator","modelDefinition","fieldNames","Set","keys","fields","handler","Proxy","get","_target","propertyKey","receiver","groupType","result_1","newPredicate","group","type","predicates","tmpPredicateRecorder","predicateGroupsMap","set","push","field","Error","modelName","result","operator","operand","throwOnInvalid","isValidPredicate","existing","undefined","createPredicateBuilder","id","WeakMap"],"sources":["C:\\Users\\lmore\\OneDrive\\Documents\\GitHub\\JacksOfAllTrades\\jacksofalltrades\\node_modules\\@aws-amplify\\datastore\\src\\predicates\\index.ts"],"sourcesContent":["import {\n\tAllOperators,\n\tModelPredicate,\n\tPersistentModel,\n\tPredicateExpression,\n\tPredicateGroups,\n\tPredicatesGroup,\n\tProducerModelPredicate,\n\tSchemaModel,\n} from '../types';\nimport { exhaustiveCheck } from '../util';\n\nexport { ModelSortPredicateCreator } from './sort';\n\nconst predicatesAllSet = new WeakSet<ProducerModelPredicate<any>>();\n\nexport function isPredicatesAll(\n\tpredicate: any\n): predicate is typeof PredicateAll {\n\treturn predicatesAllSet.has(predicate);\n}\n\n// This symbol is not used at runtime, only its type (unique symbol)\nexport const PredicateAll = Symbol('A predicate that matches all records');\n\nexport class Predicates {\n\tpublic static get ALL(): typeof PredicateAll {\n\t\tconst predicate = <ProducerModelPredicate<any>>(c => c);\n\n\t\tpredicatesAllSet.add(predicate);\n\n\t\treturn <typeof PredicateAll>(<unknown>predicate);\n\t}\n}\n\nexport class ModelPredicateCreator {\n\tprivate static predicateGroupsMap = new WeakMap<\n\t\tModelPredicate<any>,\n\t\tPredicatesGroup<any>\n\t>();\n\n\tprivate static createPredicateBuilder<T extends PersistentModel>(\n\t\tmodelDefinition: SchemaModel\n\t) {\n\t\tconst { name: modelName } = modelDefinition;\n\t\tconst fieldNames = new Set<keyof T>(Object.keys(modelDefinition.fields));\n\n\t\tlet handler: ProxyHandler<ModelPredicate<T>>;\n\t\tconst predicate = new Proxy(\n\t\t\t{} as ModelPredicate<T>,\n\t\t\t(handler = {\n\t\t\t\tget(\n\t\t\t\t\t_target,\n\t\t\t\t\tpropertyKey,\n\t\t\t\t\treceiver: ModelPredicate<T>\n\t\t\t\t): PredicateExpression<T, any> {\n\t\t\t\t\tconst groupType = propertyKey as keyof PredicateGroups<T>;\n\n\t\t\t\t\tswitch (groupType) {\n\t\t\t\t\t\tcase 'and':\n\t\t\t\t\t\tcase 'or':\n\t\t\t\t\t\tcase 'not':\n\t\t\t\t\t\t\tconst result: PredicateExpression<T, any> = (\n\t\t\t\t\t\t\t\tnewPredicate: (criteria: ModelPredicate<T>) => ModelPredicate<T>\n\t\t\t\t\t\t\t) => {\n\t\t\t\t\t\t\t\tconst group: PredicatesGroup<T> = {\n\t\t\t\t\t\t\t\t\ttype: groupType,\n\t\t\t\t\t\t\t\t\tpredicates: [],\n\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\t// Create a new recorder\n\t\t\t\t\t\t\t\tconst tmpPredicateRecorder = new Proxy(\n\t\t\t\t\t\t\t\t\t{} as ModelPredicate<T>,\n\t\t\t\t\t\t\t\t\thandler\n\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t// Set the recorder group\n\t\t\t\t\t\t\t\tModelPredicateCreator.predicateGroupsMap.set(\n\t\t\t\t\t\t\t\t\ttmpPredicateRecorder,\n\t\t\t\t\t\t\t\t\tgroup\n\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t// Apply the predicates to the recorder (this is the step that records the changes)\n\t\t\t\t\t\t\t\tnewPredicate(tmpPredicateRecorder);\n\n\t\t\t\t\t\t\t\t// Push the group to the top-level recorder\n\t\t\t\t\t\t\t\tModelPredicateCreator.predicateGroupsMap\n\t\t\t\t\t\t\t\t\t.get(receiver)\n\t\t\t\t\t\t\t\t\t.predicates.push(group);\n\n\t\t\t\t\t\t\t\treturn receiver;\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\treturn result;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\texhaustiveCheck(groupType, false);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst field = propertyKey as keyof T;\n\n\t\t\t\t\tif (!fieldNames.has(field)) {\n\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t`Invalid field for model. field: ${field}, model: ${modelName}`\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst result: PredicateExpression<T, any> = (\n\t\t\t\t\t\toperator: keyof AllOperators,\n\t\t\t\t\t\toperand: any\n\t\t\t\t\t) => {\n\t\t\t\t\t\tModelPredicateCreator.predicateGroupsMap\n\t\t\t\t\t\t\t.get(receiver)\n\t\t\t\t\t\t\t.predicates.push({ field, operator, operand });\n\t\t\t\t\t\treturn receiver;\n\t\t\t\t\t};\n\t\t\t\t\treturn result;\n\t\t\t\t},\n\t\t\t})\n\t\t);\n\n\t\tconst group: PredicatesGroup<T> = {\n\t\t\ttype: 'and',\n\t\t\tpredicates: [],\n\t\t};\n\t\tModelPredicateCreator.predicateGroupsMap.set(predicate, group);\n\n\t\treturn predicate;\n\t}\n\n\tstatic isValidPredicate<T extends PersistentModel>(\n\t\tpredicate: any\n\t): predicate is ModelPredicate<T> {\n\t\treturn ModelPredicateCreator.predicateGroupsMap.has(predicate);\n\t}\n\n\tstatic getPredicates<T extends PersistentModel>(\n\t\tpredicate: ModelPredicate<T>,\n\t\tthrowOnInvalid: boolean = true\n\t) {\n\t\tif (throwOnInvalid && !ModelPredicateCreator.isValidPredicate(predicate)) {\n\t\t\tthrow new Error('The predicate is not valid');\n\t\t}\n\n\t\treturn ModelPredicateCreator.predicateGroupsMap.get(predicate);\n\t}\n\n\t// transforms cb-style predicate into Proxy\n\tstatic createFromExisting<T extends PersistentModel>(\n\t\tmodelDefinition: SchemaModel,\n\t\texisting: ProducerModelPredicate<T>\n\t) {\n\t\tif (!existing || !modelDefinition) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn existing(\n\t\t\tModelPredicateCreator.createPredicateBuilder(modelDefinition)\n\t\t);\n\t}\n\n\tstatic createForId<T extends PersistentModel>(\n\t\tmodelDefinition: SchemaModel,\n\t\tid: string\n\t) {\n\t\treturn ModelPredicateCreator.createPredicateBuilder<T>(modelDefinition).id(\n\t\t\t'eq',\n\t\t\t<any>id\n\t\t);\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}