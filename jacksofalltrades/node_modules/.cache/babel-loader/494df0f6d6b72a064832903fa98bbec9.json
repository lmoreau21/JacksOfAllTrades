{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { PutObjectTaggingOutput, PutObjectTaggingRequest } from \"../models/models_0\";\nimport { deserializeAws_restXmlPutObjectTaggingCommand, serializeAws_restXmlPutObjectTaggingCommand } from \"../protocols/Aws_restXml\";\nimport { getBucketEndpointPlugin } from \"@aws-sdk/middleware-bucket-endpoint\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Sets the supplied tag-set to an object that already exists in a bucket.</p>\n *          <p>A tag is a key-value pair. You can associate tags with an object by sending a PUT\n *          request against the tagging subresource that is associated with the object. You can\n *          retrieve tags by sending a GET request. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetObjectTagging.html\">GetObjectTagging</a>.</p>\n *\n *          <p>For tagging-related restrictions related to characters and encodings, see <a href=\"https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/allocation-tag-restrictions.html\">Tag\n *             Restrictions</a>. Note that Amazon S3 limits the maximum number of tags to 10 tags per\n *          object.</p>\n *\n *          <p>To use this operation, you must have permission to perform the\n *             <code>s3:PutObjectTagging</code> action. By default, the bucket owner has this\n *          permission and can grant this permission to others.</p>\n *\n *          <p>To put tags of any other version, use the <code>versionId</code> query parameter. You\n *          also need permission for the <code>s3:PutObjectVersionTagging</code> action.</p>\n *\n *          <p>For information about the Amazon S3 object tagging feature, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/object-tagging.html\">Object Tagging</a>.</p>\n *\n *\n *          <p class=\"title\">\n *             <b>Special Errors</b>\n *          </p>\n *          <ul>\n *             <li>\n *                <ul>\n *                   <li>\n *                      <p>\n *                         <i>Code: InvalidTagError </i>\n *                      </p>\n *                   </li>\n *                   <li>\n *                      <p>\n *                         <i>Cause: The tag provided was not a valid tag. This error can occur\n *                         if the tag did not pass input validation. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/object-tagging.html\">Object Tagging</a>.</i>\n *                      </p>\n *                   </li>\n *                </ul>\n *             </li>\n *             <li>\n *                <ul>\n *                   <li>\n *                      <p>\n *                         <i>Code: MalformedXMLError </i>\n *                      </p>\n *                   </li>\n *                   <li>\n *                      <p>\n *                         <i>Cause: The XML provided does not match the schema.</i>\n *                      </p>\n *                   </li>\n *                </ul>\n *             </li>\n *             <li>\n *                <ul>\n *                   <li>\n *                      <p>\n *                         <i>Code: OperationAbortedError </i>\n *                      </p>\n *                   </li>\n *                   <li>\n *                      <p>\n *                         <i>Cause: A conflicting conditional operation is currently in\n *                         progress against this resource. Please try again.</i>\n *                      </p>\n *                   </li>\n *                </ul>\n *             </li>\n *             <li>\n *                <ul>\n *                   <li>\n *                      <p>\n *                         <i>Code: InternalError</i>\n *                      </p>\n *                   </li>\n *                   <li>\n *                      <p>\n *                         <i>Cause: The service was unable to apply the provided tag to the\n *                         object.</i>\n *                      </p>\n *                   </li>\n *                </ul>\n *             </li>\n *          </ul>\n *\n *\n *\n *\n *\n *\n *          <p class=\"title\">\n *             <b>Related Resources</b>\n *          </p>\n *          <ul>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetObjectTagging.html\">GetObjectTagging</a>\n *                </p>\n *             </li>\n *          </ul>\n */\n\nvar PutObjectTaggingCommand =\n/** @class */\nfunction (_super) {\n  __extends(PutObjectTaggingCommand, _super); // Start section: command_properties\n  // End section: command_properties\n\n\n  function PutObjectTaggingCommand(input) {\n    var _this = // Start section: command_constructor\n    _super.call(this) || this;\n\n    _this.input = input;\n    return _this; // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n\n\n  PutObjectTaggingCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    this.middlewareStack.use(getBucketEndpointPlugin(configuration));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"S3Client\";\n    var commandName = \"PutObjectTaggingCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: PutObjectTaggingRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: PutObjectTaggingOutput.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n\n  PutObjectTaggingCommand.prototype.serialize = function (input, context) {\n    return serializeAws_restXmlPutObjectTaggingCommand(input, context);\n  };\n\n  PutObjectTaggingCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_restXmlPutObjectTaggingCommand(output, context);\n  };\n\n  return PutObjectTaggingCommand;\n}($Command);\n\nexport { PutObjectTaggingCommand };","map":{"version":3,"mappings":";AACA,SAASA,sBAAT,EAAiCC,uBAAjC,QAAgE,oBAAhE;AACA,SACEC,6CADF,EAEEC,2CAFF,QAGO,0BAHP;AAIA,SAASC,uBAAT,QAAwC,qCAAxC;AACA,SAASC,cAAT,QAA+B,2BAA/B;AAEA,SAASC,OAAO,IAAIC,QAApB,QAAoC,wBAApC;AAcA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqGA;AAAA;AAAA;EAA6CC,2CAA7C,CAKE;EACA;;;EAEA,iCAAqBC,KAArB,EAAwD;IAAxD,YACE;IACAC,qBAAO,IAFT;;IAAqBC;iBAAmC,CAGtD;EACD;EAED;;;;;EAGAC,gEACEC,WADF,EAEEC,aAFF,EAGEC,OAHF,EAGgC;IAE9B,KAAKC,eAAL,CAAqBC,GAArB,CAAyBZ,cAAc,CAACS,aAAD,EAAgB,KAAKI,SAArB,EAAgC,KAAKC,WAArC,CAAvC;IACA,KAAKH,eAAL,CAAqBC,GAArB,CAAyBb,uBAAuB,CAACU,aAAD,CAAhD;IAEA,IAAMM,KAAK,GAAGP,WAAW,CAACQ,MAAZ,CAAmB,KAAKL,eAAxB,CAAd;IAEQ,UAAM,GAAKF,aAAa,OAAxB;IACR,IAAMQ,UAAU,GAAG,UAAnB;IACA,IAAMC,WAAW,GAAG,yBAApB;IACA,IAAMC,uBAAuB,GAA4B;MACvDC,MAAM,QADiD;MAEvDH,UAAU,YAF6C;MAGvDC,WAAW,aAH4C;MAIvDG,uBAAuB,EAAEzB,uBAAuB,CAAC0B,kBAJM;MAKvDC,wBAAwB,EAAE5B,sBAAsB,CAAC2B;IALM,CAAzD;IAOQ,kBAAc,GAAKb,aAAa,eAAhC;IACR,OAAOM,KAAK,CAACS,OAAN,CACL,UAACC,OAAD,EAAuC;MACrC,qBAAc,CAACC,MAAf,CAAsBD,OAAO,CAACA,OAA9B,EAAwDf,OAAO,IAAI,EAAnE;IAAsE,CAFnE,EAGLS,uBAHK,CAAP;EAKD,CA1BD;;EA4BQZ,8CAAR,UAAkBH,KAAlB,EAAuDuB,OAAvD,EAA8E;IAC5E,OAAO7B,2CAA2C,CAACM,KAAD,EAAQuB,OAAR,CAAlD;EACD,CAFO;;EAIApB,gDAAR,UAAoBqB,MAApB,EAA4CD,OAA5C,EAAmE;IACjE,OAAO9B,6CAA6C,CAAC+B,MAAD,EAASD,OAAT,CAApD;EACD,CAFO;;EAMV;AAAC,CAvDD,CAA6CzB,QAA7C","names":["PutObjectTaggingOutput","PutObjectTaggingRequest","deserializeAws_restXmlPutObjectTaggingCommand","serializeAws_restXmlPutObjectTaggingCommand","getBucketEndpointPlugin","getSerdePlugin","Command","$Command","__extends","input","_super","_this","PutObjectTaggingCommand","clientStack","configuration","options","middlewareStack","use","serialize","deserialize","stack","concat","clientName","commandName","handlerExecutionContext","logger","inputFilterSensitiveLog","filterSensitiveLog","outputFilterSensitiveLog","resolve","request","handle","context","output"],"sources":["C:\\Users\\lmore\\OneDrive\\Documents\\GitHub\\JacksOfAllTrades\\jacksofalltrades\\node_modules\\@aws-sdk\\client-s3\\commands\\PutObjectTaggingCommand.ts"],"sourcesContent":["import { S3ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from \"../S3Client\";\nimport { PutObjectTaggingOutput, PutObjectTaggingRequest } from \"../models/models_0\";\nimport {\n  deserializeAws_restXmlPutObjectTaggingCommand,\n  serializeAws_restXmlPutObjectTaggingCommand,\n} from \"../protocols/Aws_restXml\";\nimport { getBucketEndpointPlugin } from \"@aws-sdk/middleware-bucket-endpoint\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { HttpRequest as __HttpRequest, HttpResponse as __HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport {\n  FinalizeHandlerArguments,\n  Handler,\n  HandlerExecutionContext,\n  MiddlewareStack,\n  HttpHandlerOptions as __HttpHandlerOptions,\n  MetadataBearer as __MetadataBearer,\n  SerdeContext as __SerdeContext,\n} from \"@aws-sdk/types\";\n\nexport type PutObjectTaggingCommandInput = PutObjectTaggingRequest;\nexport type PutObjectTaggingCommandOutput = PutObjectTaggingOutput & __MetadataBearer;\n\n/**\n * <p>Sets the supplied tag-set to an object that already exists in a bucket.</p>\n *          <p>A tag is a key-value pair. You can associate tags with an object by sending a PUT\n *          request against the tagging subresource that is associated with the object. You can\n *          retrieve tags by sending a GET request. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetObjectTagging.html\">GetObjectTagging</a>.</p>\n *\n *          <p>For tagging-related restrictions related to characters and encodings, see <a href=\"https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/allocation-tag-restrictions.html\">Tag\n *             Restrictions</a>. Note that Amazon S3 limits the maximum number of tags to 10 tags per\n *          object.</p>\n *\n *          <p>To use this operation, you must have permission to perform the\n *             <code>s3:PutObjectTagging</code> action. By default, the bucket owner has this\n *          permission and can grant this permission to others.</p>\n *\n *          <p>To put tags of any other version, use the <code>versionId</code> query parameter. You\n *          also need permission for the <code>s3:PutObjectVersionTagging</code> action.</p>\n *\n *          <p>For information about the Amazon S3 object tagging feature, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/object-tagging.html\">Object Tagging</a>.</p>\n *\n *\n *          <p class=\"title\">\n *             <b>Special Errors</b>\n *          </p>\n *          <ul>\n *             <li>\n *                <ul>\n *                   <li>\n *                      <p>\n *                         <i>Code: InvalidTagError </i>\n *                      </p>\n *                   </li>\n *                   <li>\n *                      <p>\n *                         <i>Cause: The tag provided was not a valid tag. This error can occur\n *                         if the tag did not pass input validation. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/object-tagging.html\">Object Tagging</a>.</i>\n *                      </p>\n *                   </li>\n *                </ul>\n *             </li>\n *             <li>\n *                <ul>\n *                   <li>\n *                      <p>\n *                         <i>Code: MalformedXMLError </i>\n *                      </p>\n *                   </li>\n *                   <li>\n *                      <p>\n *                         <i>Cause: The XML provided does not match the schema.</i>\n *                      </p>\n *                   </li>\n *                </ul>\n *             </li>\n *             <li>\n *                <ul>\n *                   <li>\n *                      <p>\n *                         <i>Code: OperationAbortedError </i>\n *                      </p>\n *                   </li>\n *                   <li>\n *                      <p>\n *                         <i>Cause: A conflicting conditional operation is currently in\n *                         progress against this resource. Please try again.</i>\n *                      </p>\n *                   </li>\n *                </ul>\n *             </li>\n *             <li>\n *                <ul>\n *                   <li>\n *                      <p>\n *                         <i>Code: InternalError</i>\n *                      </p>\n *                   </li>\n *                   <li>\n *                      <p>\n *                         <i>Cause: The service was unable to apply the provided tag to the\n *                         object.</i>\n *                      </p>\n *                   </li>\n *                </ul>\n *             </li>\n *          </ul>\n *\n *\n *\n *\n *\n *\n *          <p class=\"title\">\n *             <b>Related Resources</b>\n *          </p>\n *          <ul>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetObjectTagging.html\">GetObjectTagging</a>\n *                </p>\n *             </li>\n *          </ul>\n */\nexport class PutObjectTaggingCommand extends $Command<\n  PutObjectTaggingCommandInput,\n  PutObjectTaggingCommandOutput,\n  S3ClientResolvedConfig\n> {\n  // Start section: command_properties\n  // End section: command_properties\n\n  constructor(readonly input: PutObjectTaggingCommandInput) {\n    // Start section: command_constructor\n    super();\n    // End section: command_constructor\n  }\n\n  /**\n   * @internal\n   */\n  resolveMiddleware(\n    clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>,\n    configuration: S3ClientResolvedConfig,\n    options?: __HttpHandlerOptions\n  ): Handler<PutObjectTaggingCommandInput, PutObjectTaggingCommandOutput> {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    this.middlewareStack.use(getBucketEndpointPlugin(configuration));\n\n    const stack = clientStack.concat(this.middlewareStack);\n\n    const { logger } = configuration;\n    const clientName = \"S3Client\";\n    const commandName = \"PutObjectTaggingCommand\";\n    const handlerExecutionContext: HandlerExecutionContext = {\n      logger,\n      clientName,\n      commandName,\n      inputFilterSensitiveLog: PutObjectTaggingRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: PutObjectTaggingOutput.filterSensitiveLog,\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve(\n      (request: FinalizeHandlerArguments<any>) =>\n        requestHandler.handle(request.request as __HttpRequest, options || {}),\n      handlerExecutionContext\n    );\n  }\n\n  private serialize(input: PutObjectTaggingCommandInput, context: __SerdeContext): Promise<__HttpRequest> {\n    return serializeAws_restXmlPutObjectTaggingCommand(input, context);\n  }\n\n  private deserialize(output: __HttpResponse, context: __SerdeContext): Promise<PutObjectTaggingCommandOutput> {\n    return deserializeAws_restXmlPutObjectTaggingCommand(output, context);\n  }\n\n  // Start section: command_body_extra\n  // End section: command_body_extra\n}\n"]},"metadata":{},"sourceType":"module"}