{"ast":null,"code":"/*\n * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function next() {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nvar DoubleLinkedNode =\n/** @class */\nfunction () {\n  function DoubleLinkedNode(keyVal) {\n    this.key = keyVal ? keyVal : '';\n    this.prevNode = null;\n    this.nextNode = null;\n  }\n\n  return DoubleLinkedNode;\n}();\n/**\n * double linked list plus a hash table inside\n * each key in the cache stored as a node in the list\n * recently visited node will be rotated to the head\n * so the Last Recently Visited node will be at the tail\n *\n * @member head - dummy head of the linked list\n * @member tail - dummy tail of the linked list\n * @member hashtable - the hashtable which maps cache key to list node\n * @member length - length of the list\n */\n\n\nvar CacheList =\n/** @class */\nfunction () {\n  /**\n   * initialization\n   */\n  function CacheList() {\n    this.head = new DoubleLinkedNode();\n    this.tail = new DoubleLinkedNode();\n    this.hashtable = {};\n    this.length = 0;\n    this.head.nextNode = this.tail;\n    this.tail.prevNode = this.head;\n  }\n  /**\n   * insert node to the head of the list\n   *\n   * @param node\n   */\n\n\n  CacheList.prototype.insertNodeToHead = function (node) {\n    var tmp = this.head.nextNode;\n    this.head.nextNode = node;\n    node.nextNode = tmp;\n    node.prevNode = this.head;\n    tmp.prevNode = node;\n    this.length = this.length + 1;\n  };\n  /**\n   * remove node\n   *\n   * @param node\n   */\n\n\n  CacheList.prototype.removeNode = function (node) {\n    node.prevNode.nextNode = node.nextNode;\n    node.nextNode.prevNode = node.prevNode;\n    node.prevNode = null;\n    node.nextNode = null;\n    this.length = this.length - 1;\n  };\n  /**\n   * @return true if list is empty\n   */\n\n\n  CacheList.prototype.isEmpty = function () {\n    return this.length === 0;\n  };\n  /**\n   * refresh node so it is rotated to the head\n   *\n   * @param key - key of the node\n   */\n\n\n  CacheList.prototype.refresh = function (key) {\n    var node = this.hashtable[key];\n    this.removeNode(node);\n    this.insertNodeToHead(node);\n  };\n  /**\n   * insert new node to the head and add it in the hashtable\n   *\n   * @param key - the key of the node\n   */\n\n\n  CacheList.prototype.insertItem = function (key) {\n    var node = new DoubleLinkedNode(key);\n    this.hashtable[key] = node;\n    this.insertNodeToHead(node);\n  };\n  /**\n   * @return the LAST Recently Visited key\n   */\n\n\n  CacheList.prototype.getLastItem = function () {\n    return this.tail.prevNode.key;\n  };\n  /**\n   * remove the cache key from the list and hashtable\n   * @param key - the key of the node\n   */\n\n\n  CacheList.prototype.removeItem = function (key) {\n    var removedItem = this.hashtable[key];\n    this.removeNode(removedItem);\n    delete this.hashtable[key];\n  };\n  /**\n   * @return length of the list\n   */\n\n\n  CacheList.prototype.getSize = function () {\n    return this.length;\n  };\n  /**\n   * @return true if the key is in the hashtable\n   * @param key\n   */\n\n\n  CacheList.prototype.containsKey = function (key) {\n    return key in this.hashtable;\n  };\n  /**\n   * clean up the list and hashtable\n   */\n\n\n  CacheList.prototype.clearList = function () {\n    var e_1, _a;\n\n    try {\n      for (var _b = __values(Object.keys(this.hashtable)), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var key = _c.value;\n\n        if (this.hashtable.hasOwnProperty(key)) {\n          delete this.hashtable[key];\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n\n    this.head.nextNode = this.tail;\n    this.tail.prevNode = this.head;\n    this.length = 0;\n  };\n  /**\n   * @return all keys in the hashtable\n   */\n\n\n  CacheList.prototype.getKeys = function () {\n    return Object.keys(this.hashtable);\n  };\n  /**\n   * mainly for test\n   *\n   * @param key\n   * @return true if key is the head node\n   */\n\n\n  CacheList.prototype.isHeadNode = function (key) {\n    var node = this.hashtable[key];\n    return node.prevNode === this.head;\n  };\n  /**\n   * mainly for test\n   *\n   * @param key\n   * @return true if key is the tail node\n   */\n\n\n  CacheList.prototype.isTailNode = function (key) {\n    var node = this.hashtable[key];\n    return node.nextNode === this.tail;\n  };\n\n  return CacheList;\n}();\n\nexport default CacheList;","map":{"version":3,"mappings":"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","names":["keyVal","key","prevNode","nextNode","head","DoubleLinkedNode","tail","hashtable","length","CacheList","node","tmp","removeNode","insertNodeToHead","removedItem","keys","_c","hasOwnProperty","Object"],"sources":["C:\\Users\\lmore\\OneDrive\\Documents\\GitHub\\JacksOfAllTrades\\jacksofalltrades\\node_modules\\@aws-amplify\\cache\\src\\Utils\\CacheList.ts"],"sourcesContent":["/*\r\n * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\r\n * the License. A copy of the License is located at\r\n *\r\n *     http://aws.amazon.com/apache2.0/\r\n *\r\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\r\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\r\n * and limitations under the License.\r\n */\r\n\r\nclass DoubleLinkedNode {\r\n\tkey: string;\r\n\tprevNode: DoubleLinkedNode | null;\r\n\tnextNode: DoubleLinkedNode | null;\r\n\r\n\tconstructor(keyVal?: string) {\r\n\t\tthis.key = keyVal ? keyVal : '';\r\n\t\tthis.prevNode = null;\r\n\t\tthis.nextNode = null;\r\n\t}\r\n}\r\n\r\n/**\r\n * double linked list plus a hash table inside\r\n * each key in the cache stored as a node in the list\r\n * recently visited node will be rotated to the head\r\n * so the Last Recently Visited node will be at the tail\r\n *\r\n * @member head - dummy head of the linked list\r\n * @member tail - dummy tail of the linked list\r\n * @member hashtable - the hashtable which maps cache key to list node\r\n * @member length - length of the list\r\n */\r\nexport default class CacheList {\r\n\tprivate head: DoubleLinkedNode;\r\n\tprivate tail: DoubleLinkedNode;\r\n\tprivate hashtable: object;\r\n\tprivate length: number;\r\n\r\n\t/**\r\n\t * initialization\r\n\t */\r\n\tconstructor() {\r\n\t\tthis.head = new DoubleLinkedNode();\r\n\t\tthis.tail = new DoubleLinkedNode();\r\n\t\tthis.hashtable = {};\r\n\t\tthis.length = 0;\r\n\r\n\t\tthis.head.nextNode = this.tail;\r\n\t\tthis.tail.prevNode = this.head;\r\n\t}\r\n\r\n\t/**\r\n\t * insert node to the head of the list\r\n\t *\r\n\t * @param node\r\n\t */\r\n\tprivate insertNodeToHead(node: DoubleLinkedNode) {\r\n\t\tconst tmp: DoubleLinkedNode = this.head.nextNode;\r\n\t\tthis.head.nextNode = node;\r\n\t\tnode.nextNode = tmp;\r\n\t\tnode.prevNode = this.head;\r\n\t\ttmp.prevNode = node;\r\n\r\n\t\tthis.length = this.length + 1;\r\n\t}\r\n\r\n\t/**\r\n\t * remove node\r\n\t *\r\n\t * @param node\r\n\t */\r\n\tprivate removeNode(node: DoubleLinkedNode): void {\r\n\t\tnode.prevNode.nextNode = node.nextNode;\r\n\t\tnode.nextNode.prevNode = node.prevNode;\r\n\r\n\t\tnode.prevNode = null;\r\n\t\tnode.nextNode = null;\r\n\r\n\t\tthis.length = this.length - 1;\r\n\t}\r\n\r\n\t/**\r\n\t * @return true if list is empty\r\n\t */\r\n\tpublic isEmpty(): boolean {\r\n\t\treturn this.length === 0;\r\n\t}\r\n\r\n\t/**\r\n\t * refresh node so it is rotated to the head\r\n\t *\r\n\t * @param key - key of the node\r\n\t */\r\n\tpublic refresh(key: string): void {\r\n\t\tconst node: DoubleLinkedNode = this.hashtable[key];\r\n\t\tthis.removeNode(node);\r\n\t\tthis.insertNodeToHead(node);\r\n\t}\r\n\r\n\t/**\r\n\t * insert new node to the head and add it in the hashtable\r\n\t *\r\n\t * @param key - the key of the node\r\n\t */\r\n\tpublic insertItem(key: string): void {\r\n\t\tconst node: DoubleLinkedNode = new DoubleLinkedNode(key);\r\n\t\tthis.hashtable[key] = node;\r\n\t\tthis.insertNodeToHead(node);\r\n\t}\r\n\r\n\t/**\r\n\t * @return the LAST Recently Visited key\r\n\t */\r\n\tpublic getLastItem(): string {\r\n\t\treturn this.tail.prevNode.key;\r\n\t}\r\n\r\n\t/**\r\n\t * remove the cache key from the list and hashtable\r\n\t * @param key - the key of the node\r\n\t */\r\n\tpublic removeItem(key: string): void {\r\n\t\tconst removedItem: DoubleLinkedNode = this.hashtable[key];\r\n\t\tthis.removeNode(removedItem);\r\n\t\tdelete this.hashtable[key];\r\n\t}\r\n\r\n\t/**\r\n\t * @return length of the list\r\n\t */\r\n\tpublic getSize(): number {\r\n\t\treturn this.length;\r\n\t}\r\n\r\n\t/**\r\n\t * @return true if the key is in the hashtable\r\n\t * @param key\r\n\t */\r\n\tpublic containsKey(key: string): boolean {\r\n\t\treturn key in this.hashtable;\r\n\t}\r\n\r\n\t/**\r\n\t * clean up the list and hashtable\r\n\t */\r\n\tpublic clearList(): void {\r\n\t\tfor (const key of Object.keys(this.hashtable)) {\r\n\t\t\tif (this.hashtable.hasOwnProperty(key)) {\r\n\t\t\t\tdelete this.hashtable[key];\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.head.nextNode = this.tail;\r\n\t\tthis.tail.prevNode = this.head;\r\n\t\tthis.length = 0;\r\n\t}\r\n\r\n\t/**\r\n\t * @return all keys in the hashtable\r\n\t */\r\n\tpublic getKeys(): string[] {\r\n\t\treturn Object.keys(this.hashtable);\r\n\t}\r\n\r\n\t/**\r\n\t * mainly for test\r\n\t *\r\n\t * @param key\r\n\t * @return true if key is the head node\r\n\t */\r\n\tpublic isHeadNode(key: string): boolean {\r\n\t\tconst node = this.hashtable[key];\r\n\t\treturn node.prevNode === this.head;\r\n\t}\r\n\r\n\t/**\r\n\t * mainly for test\r\n\t *\r\n\t * @param key\r\n\t * @return true if key is the tail node\r\n\t */\r\n\tpublic isTailNode(key: string): boolean {\r\n\t\tconst node = this.hashtable[key];\r\n\t\treturn node.nextNode === this.tail;\r\n\t}\r\n}\r\n"]},"metadata":{},"sourceType":"module"}