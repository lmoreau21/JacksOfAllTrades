{"ast":null,"code":"/*\n * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nimport { ConsoleLogger as Logger } from '../Logger';\nvar logger = new Logger('I18n');\n/**\n * Language transition class\n */\n\nvar I18n =\n/** @class */\nfunction () {\n  /**\n   * @constructor\n   * Initialize with configurations\n   * @param {Object} options\n   */\n  function I18n(options) {\n    /**\n     * @private\n     */\n    this._options = null;\n    /**\n     * @private\n     */\n\n    this._lang = null;\n    /**\n     * @private\n     */\n\n    this._dict = {};\n    this._options = Object.assign({}, options);\n    this._lang = this._options.language;\n\n    if (!this._lang && typeof window !== 'undefined' && window && window.navigator) {\n      this._lang = window.navigator.language;\n    }\n\n    logger.debug(this._lang);\n  }\n  /**\n   * @method\n   * Explicitly setting language\n   * @param {String} lang\n   */\n\n\n  I18n.prototype.setLanguage = function (lang) {\n    this._lang = lang;\n  };\n  /**\n   * @method\n   * Get value\n   * @param {String} key\n   * @param {String} defVal - Default value\n   */\n\n\n  I18n.prototype.get = function (key, defVal) {\n    if (defVal === void 0) {\n      defVal = undefined;\n    }\n\n    if (!this._lang) {\n      return typeof defVal !== 'undefined' ? defVal : key;\n    }\n\n    var lang = this._lang;\n    var val = this.getByLanguage(key, lang);\n\n    if (val) {\n      return val;\n    }\n\n    if (lang.indexOf('-') > 0) {\n      val = this.getByLanguage(key, lang.split('-')[0]);\n    }\n\n    if (val) {\n      return val;\n    }\n\n    return typeof defVal !== 'undefined' ? defVal : key;\n  };\n  /**\n   * @method\n   * Get value according to specified language\n   * @param {String} key\n   * @param {String} language - Specified langurage to be used\n   * @param {String} defVal - Default value\n   */\n\n\n  I18n.prototype.getByLanguage = function (key, language, defVal) {\n    if (defVal === void 0) {\n      defVal = null;\n    }\n\n    if (!language) {\n      return defVal;\n    }\n\n    var lang_dict = this._dict[language];\n\n    if (!lang_dict) {\n      return defVal;\n    }\n\n    return lang_dict[key];\n  };\n  /**\n   * @method\n   * Add vocabularies for one language\n   * @param {String} language - Language of the dictionary\n   * @param {Object} vocabularies - Object that has key-value as dictionary entry\n   */\n\n\n  I18n.prototype.putVocabulariesForLanguage = function (language, vocabularies) {\n    var lang_dict = this._dict[language];\n\n    if (!lang_dict) {\n      lang_dict = this._dict[language] = {};\n    }\n\n    Object.assign(lang_dict, vocabularies);\n  };\n  /**\n   * @method\n   * Add vocabularies for one language\n   * @param {Object} vocabularies - Object that has language as key,\n   *                                vocabularies of each language as value\n   */\n\n\n  I18n.prototype.putVocabularies = function (vocabularies) {\n    var _this = this;\n\n    Object.keys(vocabularies).map(function (key) {\n      _this.putVocabulariesForLanguage(key, vocabularies[key]);\n    });\n  };\n\n  return I18n;\n}();\n\nexport { I18n };","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;AAcA,SAASA,aAAa,IAAIC,MAA1B,QAAwC,WAAxC;AAEA,IAAMC,MAAM,GAAG,IAAID,MAAJ,CAAW,MAAX,CAAf;AAEA;;;;AAGA;AAAA;AAAA;EAgBC;;;;;EAKA,cAAYE,OAAZ,EAAgC;IApBhC;;;IAGA,gBAAwB,IAAxB;IAEA;;;;IAGA,aAAQ,IAAR;IAEA;;;;IAGA,aAAQ,EAAR;IAQC,KAAKC,QAAL,GAAgBC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBH,OAAlB,CAAhB;IACA,KAAKI,KAAL,GAAa,KAAKH,QAAL,CAAcI,QAA3B;;IAEA,IACC,CAAC,KAAKD,KAAN,IACA,OAAOE,MAAP,KAAkB,WADlB,IAEAA,MAFA,IAGAA,MAAM,CAACC,SAJR,EAKE;MACD,KAAKH,KAAL,GAAaE,MAAM,CAACC,SAAP,CAAiBF,QAA9B;IACA;;IAEDN,MAAM,CAACS,KAAP,CAAa,KAAKJ,KAAlB;EACA;EAED;;;;;;;EAKAK,uCAAYC,IAAZ,EAAwB;IACvB,KAAKN,KAAL,GAAaM,IAAb;EACA,CAFD;EAIA;;;;;;;;EAMAD,+BAAIE,GAAJ,EAASC,MAAT,EAA2B;IAAlB;MAAAA;IAAkB;;IAC1B,IAAI,CAAC,KAAKR,KAAV,EAAiB;MAChB,OAAO,OAAOQ,MAAP,KAAkB,WAAlB,GAAgCA,MAAhC,GAAyCD,GAAhD;IACA;;IAED,IAAMD,IAAI,GAAG,KAAKN,KAAlB;IACA,IAAIS,GAAG,GAAG,KAAKC,aAAL,CAAmBH,GAAnB,EAAwBD,IAAxB,CAAV;;IACA,IAAIG,GAAJ,EAAS;MACR,OAAOA,GAAP;IACA;;IAED,IAAIH,IAAI,CAACK,OAAL,CAAa,GAAb,IAAoB,CAAxB,EAA2B;MAC1BF,GAAG,GAAG,KAAKC,aAAL,CAAmBH,GAAnB,EAAwBD,IAAI,CAACM,KAAL,CAAW,GAAX,EAAgB,CAAhB,CAAxB,CAAN;IACA;;IACD,IAAIH,GAAJ,EAAS;MACR,OAAOA,GAAP;IACA;;IAED,OAAO,OAAOD,MAAP,KAAkB,WAAlB,GAAgCA,MAAhC,GAAyCD,GAAhD;EACA,CAnBD;EAqBA;;;;;;;;;EAOAF,yCAAcE,GAAd,EAAmBN,QAAnB,EAA6BO,MAA7B,EAA0C;IAAb;MAAAA;IAAa;;IACzC,IAAI,CAACP,QAAL,EAAe;MACd,OAAOO,MAAP;IACA;;IAED,IAAMK,SAAS,GAAG,KAAKC,KAAL,CAAWb,QAAX,CAAlB;;IACA,IAAI,CAACY,SAAL,EAAgB;MACf,OAAOL,MAAP;IACA;;IAED,OAAOK,SAAS,CAACN,GAAD,CAAhB;EACA,CAXD;EAaA;;;;;;;;EAMAF,sDAA2BJ,QAA3B,EAAqCc,YAArC,EAAiD;IAChD,IAAIF,SAAS,GAAG,KAAKC,KAAL,CAAWb,QAAX,CAAhB;;IACA,IAAI,CAACY,SAAL,EAAgB;MACfA,SAAS,GAAG,KAAKC,KAAL,CAAWb,QAAX,IAAuB,EAAnC;IACA;;IACDH,MAAM,CAACC,MAAP,CAAcc,SAAd,EAAyBE,YAAzB;EACA,CAND;EAQA;;;;;;;;EAMAV,2CAAgBU,YAAhB,EAA4B;IAA5B;;IACCjB,MAAM,CAACkB,IAAP,CAAYD,YAAZ,EAA0BE,GAA1B,CAA8B,eAAG;MAChCC,KAAI,CAACC,0BAAL,CAAgCZ,GAAhC,EAAqCQ,YAAY,CAACR,GAAD,CAAjD;IACA,CAFD;EAGA,CAJD;;EAKD;AAAC,CAtHD","names":["ConsoleLogger","Logger","logger","options","_options","Object","assign","_lang","language","window","navigator","debug","I18n","lang","key","defVal","val","getByLanguage","indexOf","split","lang_dict","_dict","vocabularies","keys","map","_this","putVocabulariesForLanguage"],"sources":["C:\\Users\\lmore\\OneDrive\\Documents\\GitHub\\JacksOfAllTrades\\jacksofalltrades\\node_modules\\@aws-amplify\\core\\src\\I18n\\I18n.ts"],"sourcesContent":["/*\n * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n\nimport { I18nOptions } from './types';\nimport { ConsoleLogger as Logger } from '../Logger';\n\nconst logger = new Logger('I18n');\n\n/**\n * Language transition class\n */\nexport class I18n {\n\t/**\n\t * @private\n\t */\n\t_options: I18nOptions = null;\n\n\t/**\n\t * @private\n\t */\n\t_lang = null;\n\n\t/**\n\t * @private\n\t */\n\t_dict = {};\n\n\t/**\n\t * @constructor\n\t * Initialize with configurations\n\t * @param {Object} options\n\t */\n\tconstructor(options: I18nOptions) {\n\t\tthis._options = Object.assign({}, options);\n\t\tthis._lang = this._options.language;\n\n\t\tif (\n\t\t\t!this._lang &&\n\t\t\ttypeof window !== 'undefined' &&\n\t\t\twindow &&\n\t\t\twindow.navigator\n\t\t) {\n\t\t\tthis._lang = window.navigator.language;\n\t\t}\n\n\t\tlogger.debug(this._lang);\n\t}\n\n\t/**\n\t * @method\n\t * Explicitly setting language\n\t * @param {String} lang\n\t */\n\tsetLanguage(lang: string) {\n\t\tthis._lang = lang;\n\t}\n\n\t/**\n\t * @method\n\t * Get value\n\t * @param {String} key\n\t * @param {String} defVal - Default value\n\t */\n\tget(key, defVal = undefined) {\n\t\tif (!this._lang) {\n\t\t\treturn typeof defVal !== 'undefined' ? defVal : key;\n\t\t}\n\n\t\tconst lang = this._lang;\n\t\tlet val = this.getByLanguage(key, lang);\n\t\tif (val) {\n\t\t\treturn val;\n\t\t}\n\n\t\tif (lang.indexOf('-') > 0) {\n\t\t\tval = this.getByLanguage(key, lang.split('-')[0]);\n\t\t}\n\t\tif (val) {\n\t\t\treturn val;\n\t\t}\n\n\t\treturn typeof defVal !== 'undefined' ? defVal : key;\n\t}\n\n\t/**\n\t * @method\n\t * Get value according to specified language\n\t * @param {String} key\n\t * @param {String} language - Specified langurage to be used\n\t * @param {String} defVal - Default value\n\t */\n\tgetByLanguage(key, language, defVal = null) {\n\t\tif (!language) {\n\t\t\treturn defVal;\n\t\t}\n\n\t\tconst lang_dict = this._dict[language];\n\t\tif (!lang_dict) {\n\t\t\treturn defVal;\n\t\t}\n\n\t\treturn lang_dict[key];\n\t}\n\n\t/**\n\t * @method\n\t * Add vocabularies for one language\n\t * @param {String} language - Language of the dictionary\n\t * @param {Object} vocabularies - Object that has key-value as dictionary entry\n\t */\n\tputVocabulariesForLanguage(language, vocabularies) {\n\t\tlet lang_dict = this._dict[language];\n\t\tif (!lang_dict) {\n\t\t\tlang_dict = this._dict[language] = {};\n\t\t}\n\t\tObject.assign(lang_dict, vocabularies);\n\t}\n\n\t/**\n\t * @method\n\t * Add vocabularies for one language\n\t * @param {Object} vocabularies - Object that has language as key,\n\t *                                vocabularies of each language as value\n\t */\n\tputVocabularies(vocabularies) {\n\t\tObject.keys(vocabularies).map(key => {\n\t\t\tthis.putVocabulariesForLanguage(key, vocabularies[key]);\n\t\t});\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}