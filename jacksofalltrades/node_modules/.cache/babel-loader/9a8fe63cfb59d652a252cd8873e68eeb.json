{"ast":null,"code":"import _toConsumableArray from \"C:/Users/lmore/OneDrive/Documents/GitHub/JacksOfAllTrades/jacksofalltrades/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _regeneratorRuntime from \"C:/Users/lmore/OneDrive/Documents/GitHub/JacksOfAllTrades/jacksofalltrades/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _classCallCheck from \"C:/Users/lmore/OneDrive/Documents/GitHub/JacksOfAllTrades/jacksofalltrades/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/lmore/OneDrive/Documents/GitHub/JacksOfAllTrades/jacksofalltrades/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport maplibregl from \"maplibre-gl\";\nimport { Geo } from \"@aws-amplify/geo\";\nimport { drawGeofences } from \"../drawGeofences\";\nimport { isValidGeofenceId, getGeofenceFeatureFromPolygon, getGeofenceFeatureArray, isExistingGeofenceId, getDistanceBetweenCoordinates } from \"../geofenceUtils\";\nimport { GEOFENCE_COLOR, GEOFENCE_BORDER_COLOR } from \"../constants\";\nimport { AmplifyGeofenceControlUI } from \"./ui\";\nimport { AmplifyMapDraw } from \"./AmplifyMapDraw\";\nimport { createElement } from \"../utils\";\nvar FIT_BOUNDS_PADDING = {\n  left: 240\n}; // Default to 240px right now because of the left nav\n\nexport var AmplifyGeofenceControl = /*#__PURE__*/function () {\n  function AmplifyGeofenceControl(options) {\n    _classCallCheck(this, AmplifyGeofenceControl);\n\n    this._geofenceCollectionId = options === null || options === void 0 ? void 0 : options.geofenceCollectionId;\n    this._loadedGeofences = {};\n    this._displayedGeofences = [];\n    this.changeMode = this.changeMode.bind(this);\n    this.loadInitialGeofences = this.loadInitialGeofences.bind(this);\n    this.loadMoreGeofences = this.loadMoreGeofences.bind(this);\n    this._loadGeofence = this._loadGeofence.bind(this);\n    this.updateInputRadius = this.updateInputRadius.bind(this);\n    this.saveGeofence = this.saveGeofence.bind(this);\n    this.editGeofence = this.editGeofence.bind(this);\n    this.deleteGeofence = this.deleteGeofence.bind(this);\n    this.displayAllGeofences = this.displayAllGeofences.bind(this);\n    this.hideAllGeofences = this.hideAllGeofences.bind(this);\n    this.addEditableGeofence = this.addEditableGeofence.bind(this);\n    this.setEditingModeEnabled = this.setEditingModeEnabled.bind(this);\n    this.displayHighlightedGeofence = this.displayHighlightedGeofence.bind(this);\n    this.hideHighlightedGeofence = this.hideHighlightedGeofence.bind(this);\n    this.displayGeofence = this.displayGeofence.bind(this);\n    this.hideGeofence = this.hideGeofence.bind(this);\n    this.fitGeofence = this.fitGeofence.bind(this);\n    this.fitAllGeofences = this.fitAllGeofences.bind(this);\n  }\n  /**********************************************************************\n   Public Methods for AmplifyGeofenceControl\n   **********************************************************************/\n\n\n  _createClass(AmplifyGeofenceControl, [{\n    key: \"getDefaultPosition\",\n    value: function getDefaultPosition() {\n      return \"full-screen\";\n    }\n  }, {\n    key: \"onRemove\",\n    value: function onRemove() {\n      this._ui.removeElement(this._container);\n    } // Reorders MapLibre canvas class names to fix a mapbox draw bug - https://github.com/mapbox/mapbox-gl-draw/pull/1079\n\n  }, {\n    key: \"reorderMapLibreClassNames\",\n    value: function reorderMapLibreClassNames() {\n      var mapCanvas = document.getElementsByClassName(\"maplibregl-canvas\").item(0);\n\n      if (mapCanvas) {\n        mapCanvas.className = \"mapboxgl-canvas maplibregl-canvas\";\n      }\n    }\n  }, {\n    key: \"onAdd\",\n    value: function onAdd(map) {\n      var _this = this;\n\n      this._map = map;\n      this.reorderMapLibreClassNames();\n      this._container = createElement(\"div\", \"geofence-ctrl maplibregl-ctrl\");\n      this._ui = AmplifyGeofenceControlUI(this, this._container);\n      this._amplifyDraw = new AmplifyMapDraw(map, this._ui);\n\n      this._ui.registerControlPosition(map, \"full-screen\");\n\n      this._ui.createGeofenceListContainer(); // Draw the geofences source to the map so we can update it on geofences load/creation\n\n\n      this._map.once(\"load\", function () {\n        // Prevents warnings on multiple re-renders, especially when rendered in react\n        if (this._map.getSource(\"displayedGeofences\")) {\n          return;\n        }\n\n        this._drawGeofencesOutput = drawGeofences(\"displayedGeofences\", [], this._map, {\n          fillColor: GEOFENCE_COLOR,\n          borderColor: GEOFENCE_BORDER_COLOR,\n          borderOpacity: 1\n        });\n        this._highlightedGeofenceOutput = drawGeofences(\"highlightedGeofence\", [], this._map, {\n          fillColor: GEOFENCE_COLOR,\n          borderColor: GEOFENCE_BORDER_COLOR,\n          borderOpacity: 1,\n          borderWidth: 6\n        });\n        this.loadInitialGeofences();\n        map.addControl(new maplibregl.NavigationControl({\n          showCompass: false\n        }), \"bottom-right\");\n      }.bind(this));\n\n      this._map.on(\"draw.update\", function () {\n        var coordinates = _this._amplifyDraw._mapBoxDraw.getAll().features[0].geometry.coordinates[0];\n\n        var radius = getDistanceBetweenCoordinates(coordinates[0], coordinates[Math.floor(coordinates.length / 2)]) / 2;\n\n        _this._ui.updateGeofenceRadius(radius.toFixed(2));\n      });\n\n      return this._container;\n    }\n  }, {\n    key: \"createGeofence\",\n    value: function createGeofence(geofenceId) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(!geofenceId || geofenceId.length === 0)) {\n                  _context.next = 3;\n                  break;\n                }\n\n                this._ui.createAddGeofencePromptError(\"Geofence ID is empty.\");\n\n                return _context.abrupt(\"return\");\n\n              case 3:\n                if (isValidGeofenceId(geofenceId)) {\n                  _context.next = 6;\n                  break;\n                }\n\n                this._ui.createAddGeofencePromptError(\"Geofence ID contains special characters.\");\n\n                return _context.abrupt(\"return\");\n\n              case 6:\n                if (!isExistingGeofenceId(geofenceId, this._loadedGeofences)) {\n                  _context.next = 9;\n                  break;\n                }\n\n                this._ui.createAddGeofencePromptError(\"Geofence ID already exists.\");\n\n                return _context.abrupt(\"return\");\n\n              case 9:\n                return _context.abrupt(\"return\", this.saveGeofence(geofenceId));\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n  }, {\n    key: \"saveGeofence\",\n    value: function saveGeofence(geofenceId) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var feature, idToSave, response, err, success, savedGeofence;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                feature = this._amplifyDraw.get(this._editingGeofenceId);\n                idToSave = geofenceId || this._editingGeofenceId;\n                _context2.next = 4;\n                return Geo.saveGeofences({\n                  geofenceId: idToSave,\n                  geometry: {\n                    polygon: feature.geometry[\"coordinates\"]\n                  }\n                });\n\n              case 4:\n                response = _context2.sent;\n\n                if (!response.errors[0]) {\n                  _context2.next = 8;\n                  break;\n                }\n\n                err = response.errors[0];\n                throw new Error(\"There was an error saving geofence with id \".concat(idToSave, \": \").concat(err.error.code, \" - \").concat(err.error.message));\n\n              case 8:\n                success = response.successes[0];\n                savedGeofence = {\n                  geofenceId: success.geofenceId,\n                  geometry: {\n                    polygon: feature.geometry[\"coordinates\"]\n                  }\n                }; // render geofence to the map and add it to the list\n\n                this._loadGeofence(savedGeofence);\n\n                this.displayGeofence(savedGeofence.geofenceId);\n                this.setEditingModeEnabled(false);\n                return _context2.abrupt(\"return\", savedGeofence.geofenceId);\n\n              case 14:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n    } // Each page loads 100 geofences\n\n  }, {\n    key: \"loadInitialGeofences\",\n    value: function loadInitialGeofences() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var _yield$Geo$listGeofen, entries, nextToken, loadGeofence;\n\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.prev = 0;\n                _context3.next = 3;\n                return Geo.listGeofences();\n\n              case 3:\n                _yield$Geo$listGeofen = _context3.sent;\n                entries = _yield$Geo$listGeofen.entries;\n                nextToken = _yield$Geo$listGeofen.nextToken;\n                this._listGeofencesNextToken = nextToken;\n                loadGeofence = this._loadGeofence;\n                entries.forEach(function (geofence) {\n                  return loadGeofence(geofence);\n                });\n\n                this._ui.updateGeofenceCount(Object.keys(this._loadedGeofences).length);\n\n                _context3.next = 15;\n                break;\n\n              case 12:\n                _context3.prev = 12;\n                _context3.t0 = _context3[\"catch\"](0);\n                throw new Error(\"Error calling listGeofences: \".concat(_context3.t0));\n\n              case 15:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[0, 12]]);\n      }));\n    }\n  }, {\n    key: \"loadMoreGeofences\",\n    value: function loadMoreGeofences() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var _yield$Geo$listGeofen2, entries, nextToken, loadGeofence;\n\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (!this._listGeofencesNextToken) {\n                  _context4.next = 16;\n                  break;\n                }\n\n                _context4.prev = 1;\n                _context4.next = 4;\n                return Geo.listGeofences({\n                  nextToken: this._listGeofencesNextToken\n                });\n\n              case 4:\n                _yield$Geo$listGeofen2 = _context4.sent;\n                entries = _yield$Geo$listGeofen2.entries;\n                nextToken = _yield$Geo$listGeofen2.nextToken;\n                this._listGeofencesNextToken = nextToken;\n                loadGeofence = this._loadGeofence;\n                entries.forEach(function (geofence) {\n                  return loadGeofence(geofence);\n                });\n\n                this._ui.updateGeofenceCount(Object.keys(this._loadedGeofences).length);\n\n                _context4.next = 16;\n                break;\n\n              case 13:\n                _context4.prev = 13;\n                _context4.t0 = _context4[\"catch\"](1);\n                throw new Error(\"Error calling listGeofences: \".concat(_context4.t0));\n\n              case 16:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[1, 13]]);\n      }));\n    }\n  }, {\n    key: \"editGeofence\",\n    value: function editGeofence(geofenceId) {\n      this.setEditingModeEnabled(true);\n      var geofence = this._loadedGeofences[geofenceId];\n\n      if (!geofence) {\n        throw new Error(\"Geofence with id \".concat(geofenceId, \" does not exist\"));\n      } // render in mapboxdraw\n\n\n      var feature = getGeofenceFeatureFromPolygon(geofence.geometry.polygon);\n      var data = Object.assign({\n        id: geofence.geofenceId\n      }, feature);\n\n      this._amplifyDraw.add(data);\n\n      this._editingGeofenceId = geofence.geofenceId;\n    }\n  }, {\n    key: \"deleteGeofence\",\n    value: function deleteGeofence(geofenceId) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        var response, err;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return Geo.deleteGeofences(geofenceId);\n\n              case 2:\n                response = _context5.sent;\n\n                if (!response.errors[0]) {\n                  _context5.next = 6;\n                  break;\n                }\n\n                err = response.errors[0].error;\n                throw new Error(\"There was an error deleting geofence with id \".concat(geofenceId, \": \").concat(err.code, \" - \").concat(err.message));\n\n              case 6:\n                this._ui.removeGeofenceListItem(geofenceId);\n\n                delete this._loadedGeofences[geofenceId];\n\n                this._ui.updateGeofenceCount(Object.keys(this._loadedGeofences).length);\n\n                this._displayedGeofences = this._displayedGeofences.filter(function (geofence) {\n                  return geofence.geofenceId !== geofenceId;\n                });\n\n                this._updateDisplayedGeofences();\n\n                return _context5.abrupt(\"return\", geofenceId);\n\n              case 12:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n    }\n  }, {\n    key: \"deleteSelectedGeofences\",\n    value: function deleteSelectedGeofences() {\n      var _this2 = this;\n\n      var idsToDelete = this._displayedGeofences.map(function (fence) {\n        return fence.geofenceId;\n      }); // FIXME: delete geofence api call here\n\n\n      idsToDelete.forEach(function (id) {\n        _this2._ui.removeGeofenceListItem(id);\n\n        delete _this2._loadedGeofences[id];\n      });\n      this._displayedGeofences = [];\n\n      this._updateDisplayedGeofences();\n    }\n    /**********************************************************************\n     Private methods for CRUD Geofences\n     **********************************************************************/\n\n  }, {\n    key: \"_loadGeofence\",\n    value: function _loadGeofence(geofence) {\n      // If geofence exists remove it from displayed geofences\n      if (this._loadedGeofences[geofence.geofenceId]) {\n        this._displayedGeofences = this._displayedGeofences.filter(function (fence) {\n          return fence.geofenceId !== geofence.geofenceId;\n        });\n      } else {\n        // If geofence doesn't exist render a new list item for it\n        this._ui.renderListItem(geofence);\n      }\n\n      this._loadedGeofences[geofence.geofenceId] = geofence;\n\n      this._ui.updateGeofenceCount(Object.keys(this._loadedGeofences).length);\n    }\n  }, {\n    key: \"displayGeofence\",\n    value: function displayGeofence(geofenceId) {\n      this._displayedGeofences.push(this._loadedGeofences[geofenceId]);\n\n      this._updateDisplayedGeofences();\n\n      this._ui.updateCheckbox(geofenceId, true);\n\n      this.fitAllGeofences();\n    }\n  }, {\n    key: \"displayAllGeofences\",\n    value: function displayAllGeofences() {\n      var _this$_displayedGeofe,\n          _this3 = this;\n\n      (_this$_displayedGeofe = this._displayedGeofences).push.apply(_this$_displayedGeofe, _toConsumableArray(Object.values(this._loadedGeofences)));\n\n      this._updateDisplayedGeofences();\n\n      var checkboxes = document.getElementsByClassName(\"geofence-ctrl-list-item-checkbox\");\n      Array.from(checkboxes).forEach(function (checkbox) {\n        return checkbox.checked = _this3._ui.getCheckboxAllValue();\n      });\n      this.fitAllGeofences();\n    }\n  }, {\n    key: \"fitGeofence\",\n    value: function fitGeofence(geofenceId) {\n      var mapBounds = this._map.getBounds();\n\n      var geofence = this._loadedGeofences[geofenceId];\n      geofence.geometry.polygon[0].forEach(function (coord) {\n        mapBounds.extend(coord);\n      });\n\n      this._map.fitBounds(mapBounds, {\n        padding: FIT_BOUNDS_PADDING\n      });\n    }\n  }, {\n    key: \"fitAllGeofences\",\n    value: function fitAllGeofences() {\n      var shouldFitBounds = false;\n\n      var mapBounds = this._map.getBounds();\n\n      this._displayedGeofences.forEach(function (geofence) {\n        geofence.geometry.polygon[0].forEach(function (coord) {\n          if (!mapBounds.contains(coord)) {\n            mapBounds.extend(coord);\n            shouldFitBounds = true;\n          }\n        });\n      });\n\n      if (shouldFitBounds) this._map.fitBounds(mapBounds, {\n        padding: FIT_BOUNDS_PADDING\n      });\n    }\n  }, {\n    key: \"hideGeofence\",\n    value: function hideGeofence(geofenceId) {\n      this._displayedGeofences = this._displayedGeofences.filter(function (geofence) {\n        return geofence.geofenceId !== geofenceId;\n      });\n\n      this._updateDisplayedGeofences();\n\n      this._ui.updateCheckbox(geofenceId, false);\n    }\n  }, {\n    key: \"hideAllGeofences\",\n    value: function hideAllGeofences() {\n      var _this4 = this;\n\n      this._displayedGeofences = [];\n\n      this._updateDisplayedGeofences();\n\n      var checkboxes = document.getElementsByClassName(\"geofence-ctrl-list-item-checkbox\");\n      Array.from(checkboxes).forEach(function (checkbox) {\n        return checkbox.checked = _this4._ui.getCheckboxAllValue();\n      });\n    }\n  }, {\n    key: \"_updateDisplayedGeofences\",\n    value: function _updateDisplayedGeofences() {\n      var feature = getGeofenceFeatureArray(this._displayedGeofences);\n\n      this._drawGeofencesOutput.setData(feature);\n    }\n  }, {\n    key: \"displayHighlightedGeofence\",\n    value: function displayHighlightedGeofence(geofenceId) {\n      var geofence = this._loadedGeofences[geofenceId];\n\n      if (!geofence) {\n        console.warn(\"Geofence with id \".concat(geofenceId, \" does not exist\"));\n        return;\n      }\n\n      var feature = getGeofenceFeatureFromPolygon(geofence.geometry.polygon);\n\n      this._highlightedGeofenceOutput.setData(feature);\n\n      this._highlightedGeofenceOutput.show();\n    }\n  }, {\n    key: \"hideHighlightedGeofence\",\n    value: function hideHighlightedGeofence() {\n      this._highlightedGeofenceOutput.hide();\n    }\n    /**********************************************************************\n     Methods for controlling amplify mapbox draw\n     **********************************************************************/\n\n  }, {\n    key: \"changeMode\",\n    value: function changeMode(mode) {\n      // erase existing mapbox draw content\n      this._amplifyDraw.delete(this._editingGeofenceId);\n\n      if (mode === \"draw_circle\") {\n        this._amplifyDraw.drawCircularGeofence(this._editingGeofenceId);\n      } else {\n        this._amplifyDraw.drawPolygonGeofence(this._editingGeofenceId);\n      }\n    }\n  }, {\n    key: \"resetGeofence\",\n    value: function resetGeofence() {\n      // erase existing mapbox draw content\n      this._amplifyDraw.delete(this._editingGeofenceId);\n\n      if (isExistingGeofenceId(this._editingGeofenceId, this._loadedGeofences)) {\n        this.editGeofence(this._editingGeofenceId);\n      } else {\n        this._amplifyDraw.drawPolygonGeofence(this._editingGeofenceId);\n      }\n    } // Disables add button and selecting items from geofence list\n\n  }, {\n    key: \"setEditingModeEnabled\",\n    value: function setEditingModeEnabled(enabled) {\n      enabled ? this._amplifyDraw.enable() : this._amplifyDraw.disable();\n      enabled ? this._drawGeofencesOutput.hide() : this._drawGeofencesOutput.show();\n\n      this._ui.setGeofenceListEnabled(!enabled);\n    }\n  }, {\n    key: \"updateInputRadius\",\n    value: function updateInputRadius(event) {\n      var radiusString = event.target.value;\n      var radius = parseInt(radiusString);\n\n      if (isNaN(radius)) {\n        return;\n      }\n\n      this._amplifyDraw.drawCircularGeofence(this._editingGeofenceId, radius);\n    }\n  }, {\n    key: \"addEditableGeofence\",\n    value: function addEditableGeofence() {\n      this._editingGeofenceId = \"tempGeofence\";\n\n      this._amplifyDraw.drawCircularGeofence(\"tempGeofence\");\n\n      this.setEditingModeEnabled(true);\n    }\n  }]);\n\n  return AmplifyGeofenceControl;\n}();","map":{"version":3,"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","maplibregl","Geo","drawGeofences","isValidGeofenceId","getGeofenceFeatureFromPolygon","getGeofenceFeatureArray","isExistingGeofenceId","getDistanceBetweenCoordinates","GEOFENCE_COLOR","GEOFENCE_BORDER_COLOR","AmplifyGeofenceControlUI","AmplifyMapDraw","createElement","FIT_BOUNDS_PADDING","left","AmplifyGeofenceControl","options","_geofenceCollectionId","geofenceCollectionId","_loadedGeofences","_displayedGeofences","changeMode","bind","loadInitialGeofences","loadMoreGeofences","_loadGeofence","updateInputRadius","saveGeofence","editGeofence","deleteGeofence","displayAllGeofences","hideAllGeofences","addEditableGeofence","setEditingModeEnabled","displayHighlightedGeofence","hideHighlightedGeofence","displayGeofence","hideGeofence","fitGeofence","fitAllGeofences","_ui","removeElement","_container","mapCanvas","document","getElementsByClassName","item","className","map","_map","reorderMapLibreClassNames","_amplifyDraw","registerControlPosition","createGeofenceListContainer","once","getSource","_drawGeofencesOutput","fillColor","borderColor","borderOpacity","_highlightedGeofenceOutput","borderWidth","addControl","NavigationControl","showCompass","on","coordinates","_mapBoxDraw","getAll","features","geometry","radius","Math","floor","length","updateGeofenceRadius","toFixed","geofenceId","createAddGeofencePromptError","feature","get","_editingGeofenceId","idToSave","saveGeofences","polygon","response","errors","err","Error","error","code","message","success","successes","savedGeofence","listGeofences","entries","nextToken","_listGeofencesNextToken","loadGeofence","forEach","geofence","updateGeofenceCount","Object","keys","data","assign","id","add","deleteGeofences","removeGeofenceListItem","filter","_updateDisplayedGeofences","idsToDelete","fence","renderListItem","push","updateCheckbox","values","checkboxes","Array","from","checkbox","checked","getCheckboxAllValue","mapBounds","getBounds","coord","extend","fitBounds","padding","shouldFitBounds","contains","setData","console","warn","show","hide","mode","delete","drawCircularGeofence","drawPolygonGeofence","enabled","enable","disable","setGeofenceListEnabled","event","radiusString","target","parseInt","isNaN"],"sources":["C:/Users/lmore/OneDrive/Documents/GitHub/JacksOfAllTrades/jacksofalltrades/node_modules/maplibre-gl-js-amplify/lib/esm/AmplifyGeofenceControl/index.js"],"sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport maplibregl from \"maplibre-gl\";\nimport { Geo } from \"@aws-amplify/geo\";\nimport { drawGeofences } from \"../drawGeofences\";\nimport { isValidGeofenceId, getGeofenceFeatureFromPolygon, getGeofenceFeatureArray, isExistingGeofenceId, getDistanceBetweenCoordinates, } from \"../geofenceUtils\";\nimport { GEOFENCE_COLOR, GEOFENCE_BORDER_COLOR } from \"../constants\";\nimport { AmplifyGeofenceControlUI } from \"./ui\";\nimport { AmplifyMapDraw } from \"./AmplifyMapDraw\";\nimport { createElement } from \"../utils\";\nconst FIT_BOUNDS_PADDING = { left: 240 }; // Default to 240px right now because of the left nav\nexport class AmplifyGeofenceControl {\n    constructor(options) {\n        this._geofenceCollectionId = options === null || options === void 0 ? void 0 : options.geofenceCollectionId;\n        this._loadedGeofences = {};\n        this._displayedGeofences = [];\n        this.changeMode = this.changeMode.bind(this);\n        this.loadInitialGeofences = this.loadInitialGeofences.bind(this);\n        this.loadMoreGeofences = this.loadMoreGeofences.bind(this);\n        this._loadGeofence = this._loadGeofence.bind(this);\n        this.updateInputRadius = this.updateInputRadius.bind(this);\n        this.saveGeofence = this.saveGeofence.bind(this);\n        this.editGeofence = this.editGeofence.bind(this);\n        this.deleteGeofence = this.deleteGeofence.bind(this);\n        this.displayAllGeofences = this.displayAllGeofences.bind(this);\n        this.hideAllGeofences = this.hideAllGeofences.bind(this);\n        this.addEditableGeofence = this.addEditableGeofence.bind(this);\n        this.setEditingModeEnabled = this.setEditingModeEnabled.bind(this);\n        this.displayHighlightedGeofence =\n            this.displayHighlightedGeofence.bind(this);\n        this.hideHighlightedGeofence = this.hideHighlightedGeofence.bind(this);\n        this.displayGeofence = this.displayGeofence.bind(this);\n        this.hideGeofence = this.hideGeofence.bind(this);\n        this.fitGeofence = this.fitGeofence.bind(this);\n        this.fitAllGeofences = this.fitAllGeofences.bind(this);\n    }\n    /**********************************************************************\n     Public Methods for AmplifyGeofenceControl\n     **********************************************************************/\n    getDefaultPosition() {\n        return \"full-screen\";\n    }\n    onRemove() {\n        this._ui.removeElement(this._container);\n    }\n    // Reorders MapLibre canvas class names to fix a mapbox draw bug - https://github.com/mapbox/mapbox-gl-draw/pull/1079\n    reorderMapLibreClassNames() {\n        const mapCanvas = document\n            .getElementsByClassName(\"maplibregl-canvas\")\n            .item(0);\n        if (mapCanvas) {\n            mapCanvas.className = \"mapboxgl-canvas maplibregl-canvas\";\n        }\n    }\n    onAdd(map) {\n        this._map = map;\n        this.reorderMapLibreClassNames();\n        this._container = createElement(\"div\", \"geofence-ctrl maplibregl-ctrl\");\n        this._ui = AmplifyGeofenceControlUI(this, this._container);\n        this._amplifyDraw = new AmplifyMapDraw(map, this._ui);\n        this._ui.registerControlPosition(map, \"full-screen\");\n        this._ui.createGeofenceListContainer();\n        // Draw the geofences source to the map so we can update it on geofences load/creation\n        this._map.once(\"load\", function () {\n            // Prevents warnings on multiple re-renders, especially when rendered in react\n            if (this._map.getSource(\"displayedGeofences\")) {\n                return;\n            }\n            this._drawGeofencesOutput = drawGeofences(\"displayedGeofences\", [], this._map, {\n                fillColor: GEOFENCE_COLOR,\n                borderColor: GEOFENCE_BORDER_COLOR,\n                borderOpacity: 1,\n            });\n            this._highlightedGeofenceOutput = drawGeofences(\"highlightedGeofence\", [], this._map, {\n                fillColor: GEOFENCE_COLOR,\n                borderColor: GEOFENCE_BORDER_COLOR,\n                borderOpacity: 1,\n                borderWidth: 6,\n            });\n            this.loadInitialGeofences();\n            map.addControl(new maplibregl.NavigationControl({ showCompass: false }), \"bottom-right\");\n        }.bind(this));\n        this._map.on(\"draw.update\", () => {\n            const coordinates = this._amplifyDraw._mapBoxDraw.getAll().features[0].geometry.coordinates[0];\n            const radius = getDistanceBetweenCoordinates(coordinates[0], coordinates[Math.floor(coordinates.length / 2)]) / 2;\n            this._ui.updateGeofenceRadius(radius.toFixed(2));\n        });\n        return this._container;\n    }\n    createGeofence(geofenceId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!geofenceId || geofenceId.length === 0) {\n                this._ui.createAddGeofencePromptError(\"Geofence ID is empty.\");\n                return;\n            }\n            if (!isValidGeofenceId(geofenceId)) {\n                this._ui.createAddGeofencePromptError(\"Geofence ID contains special characters.\");\n                return;\n            }\n            if (isExistingGeofenceId(geofenceId, this._loadedGeofences)) {\n                this._ui.createAddGeofencePromptError(\"Geofence ID already exists.\");\n                return;\n            }\n            return this.saveGeofence(geofenceId);\n        });\n    }\n    saveGeofence(geofenceId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const feature = this._amplifyDraw.get(this._editingGeofenceId);\n            const idToSave = geofenceId || this._editingGeofenceId;\n            const response = yield Geo.saveGeofences({\n                geofenceId: idToSave,\n                geometry: { polygon: feature.geometry[\"coordinates\"] },\n            });\n            if (response.errors[0]) {\n                const err = response.errors[0];\n                throw new Error(`There was an error saving geofence with id ${idToSave}: ${err.error.code} - ${err.error.message}`);\n            }\n            const success = response.successes[0];\n            const savedGeofence = {\n                geofenceId: success.geofenceId,\n                geometry: { polygon: feature.geometry[\"coordinates\"] },\n            };\n            // render geofence to the map and add it to the list\n            this._loadGeofence(savedGeofence);\n            this.displayGeofence(savedGeofence.geofenceId);\n            this.setEditingModeEnabled(false);\n            return savedGeofence.geofenceId;\n        });\n    }\n    // Each page loads 100 geofences\n    loadInitialGeofences() {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const { entries, nextToken } = yield Geo.listGeofences();\n                this._listGeofencesNextToken = nextToken;\n                const loadGeofence = this._loadGeofence;\n                entries.forEach((geofence) => loadGeofence(geofence));\n                this._ui.updateGeofenceCount(Object.keys(this._loadedGeofences).length);\n            }\n            catch (e) {\n                throw new Error(`Error calling listGeofences: ${e}`);\n            }\n        });\n    }\n    loadMoreGeofences() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this._listGeofencesNextToken) {\n                try {\n                    const { entries, nextToken } = yield Geo.listGeofences({\n                        nextToken: this._listGeofencesNextToken,\n                    });\n                    this._listGeofencesNextToken = nextToken;\n                    const loadGeofence = this._loadGeofence;\n                    entries.forEach((geofence) => loadGeofence(geofence));\n                    this._ui.updateGeofenceCount(Object.keys(this._loadedGeofences).length);\n                }\n                catch (e) {\n                    throw new Error(`Error calling listGeofences: ${e}`);\n                }\n            }\n        });\n    }\n    editGeofence(geofenceId) {\n        this.setEditingModeEnabled(true);\n        const geofence = this._loadedGeofences[geofenceId];\n        if (!geofence) {\n            throw new Error(`Geofence with id ${geofenceId} does not exist`);\n        }\n        // render in mapboxdraw\n        const feature = getGeofenceFeatureFromPolygon(geofence.geometry.polygon);\n        const data = Object.assign({ id: geofence.geofenceId }, feature);\n        this._amplifyDraw.add(data);\n        this._editingGeofenceId = geofence.geofenceId;\n    }\n    deleteGeofence(geofenceId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const response = yield Geo.deleteGeofences(geofenceId);\n            if (response.errors[0]) {\n                const err = response.errors[0].error;\n                throw new Error(`There was an error deleting geofence with id ${geofenceId}: ${err.code} - ${err.message}`);\n            }\n            this._ui.removeGeofenceListItem(geofenceId);\n            delete this._loadedGeofences[geofenceId];\n            this._ui.updateGeofenceCount(Object.keys(this._loadedGeofences).length);\n            this._displayedGeofences = this._displayedGeofences.filter((geofence) => geofence.geofenceId !== geofenceId);\n            this._updateDisplayedGeofences();\n            return geofenceId;\n        });\n    }\n    deleteSelectedGeofences() {\n        const idsToDelete = this._displayedGeofences.map((fence) => fence.geofenceId);\n        // FIXME: delete geofence api call here\n        idsToDelete.forEach((id) => {\n            this._ui.removeGeofenceListItem(id);\n            delete this._loadedGeofences[id];\n        });\n        this._displayedGeofences = [];\n        this._updateDisplayedGeofences();\n    }\n    /**********************************************************************\n     Private methods for CRUD Geofences\n     **********************************************************************/\n    _loadGeofence(geofence) {\n        // If geofence exists remove it from displayed geofences\n        if (this._loadedGeofences[geofence.geofenceId]) {\n            this._displayedGeofences = this._displayedGeofences.filter((fence) => fence.geofenceId !== geofence.geofenceId);\n        }\n        else {\n            // If geofence doesn't exist render a new list item for it\n            this._ui.renderListItem(geofence);\n        }\n        this._loadedGeofences[geofence.geofenceId] = geofence;\n        this._ui.updateGeofenceCount(Object.keys(this._loadedGeofences).length);\n    }\n    displayGeofence(geofenceId) {\n        this._displayedGeofences.push(this._loadedGeofences[geofenceId]);\n        this._updateDisplayedGeofences();\n        this._ui.updateCheckbox(geofenceId, true);\n        this.fitAllGeofences();\n    }\n    displayAllGeofences() {\n        this._displayedGeofences.push(...Object.values(this._loadedGeofences));\n        this._updateDisplayedGeofences();\n        const checkboxes = document.getElementsByClassName(\"geofence-ctrl-list-item-checkbox\");\n        Array.from(checkboxes).forEach((checkbox) => (checkbox.checked = this._ui.getCheckboxAllValue()));\n        this.fitAllGeofences();\n    }\n    fitGeofence(geofenceId) {\n        const mapBounds = this._map.getBounds();\n        const geofence = this._loadedGeofences[geofenceId];\n        geofence.geometry.polygon[0].forEach((coord) => {\n            mapBounds.extend(coord);\n        });\n        this._map.fitBounds(mapBounds, { padding: FIT_BOUNDS_PADDING });\n    }\n    fitAllGeofences() {\n        let shouldFitBounds = false;\n        const mapBounds = this._map.getBounds();\n        this._displayedGeofences.forEach((geofence) => {\n            geofence.geometry.polygon[0].forEach((coord) => {\n                if (!mapBounds.contains(coord)) {\n                    mapBounds.extend(coord);\n                    shouldFitBounds = true;\n                }\n            });\n        });\n        if (shouldFitBounds)\n            this._map.fitBounds(mapBounds, { padding: FIT_BOUNDS_PADDING });\n    }\n    hideGeofence(geofenceId) {\n        this._displayedGeofences = this._displayedGeofences.filter((geofence) => geofence.geofenceId !== geofenceId);\n        this._updateDisplayedGeofences();\n        this._ui.updateCheckbox(geofenceId, false);\n    }\n    hideAllGeofences() {\n        this._displayedGeofences = [];\n        this._updateDisplayedGeofences();\n        const checkboxes = document.getElementsByClassName(\"geofence-ctrl-list-item-checkbox\");\n        Array.from(checkboxes).forEach((checkbox) => (checkbox.checked = this._ui.getCheckboxAllValue()));\n    }\n    _updateDisplayedGeofences() {\n        const feature = getGeofenceFeatureArray(this._displayedGeofences);\n        this._drawGeofencesOutput.setData(feature);\n    }\n    displayHighlightedGeofence(geofenceId) {\n        const geofence = this._loadedGeofences[geofenceId];\n        if (!geofence) {\n            console.warn(`Geofence with id ${geofenceId} does not exist`);\n            return;\n        }\n        const feature = getGeofenceFeatureFromPolygon(geofence.geometry.polygon);\n        this._highlightedGeofenceOutput.setData(feature);\n        this._highlightedGeofenceOutput.show();\n    }\n    hideHighlightedGeofence() {\n        this._highlightedGeofenceOutput.hide();\n    }\n    /**********************************************************************\n     Methods for controlling amplify mapbox draw\n     **********************************************************************/\n    changeMode(mode) {\n        // erase existing mapbox draw content\n        this._amplifyDraw.delete(this._editingGeofenceId);\n        if (mode === \"draw_circle\") {\n            this._amplifyDraw.drawCircularGeofence(this._editingGeofenceId);\n        }\n        else {\n            this._amplifyDraw.drawPolygonGeofence(this._editingGeofenceId);\n        }\n    }\n    resetGeofence() {\n        // erase existing mapbox draw content\n        this._amplifyDraw.delete(this._editingGeofenceId);\n        if (isExistingGeofenceId(this._editingGeofenceId, this._loadedGeofences)) {\n            this.editGeofence(this._editingGeofenceId);\n        }\n        else {\n            this._amplifyDraw.drawPolygonGeofence(this._editingGeofenceId);\n        }\n    }\n    // Disables add button and selecting items from geofence list\n    setEditingModeEnabled(enabled) {\n        enabled ? this._amplifyDraw.enable() : this._amplifyDraw.disable();\n        enabled\n            ? this._drawGeofencesOutput.hide()\n            : this._drawGeofencesOutput.show();\n        this._ui.setGeofenceListEnabled(!enabled);\n    }\n    updateInputRadius(event) {\n        const radiusString = event.target.value;\n        const radius = parseInt(radiusString);\n        if (isNaN(radius)) {\n            return;\n        }\n        this._amplifyDraw.drawCircularGeofence(this._editingGeofenceId, radius);\n    }\n    addEditableGeofence() {\n        this._editingGeofenceId = \"tempGeofence\";\n        this._amplifyDraw.drawCircularGeofence(\"tempGeofence\");\n        this.setEditingModeEnabled(true);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}