{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n/*\n * Copyright 2017-2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n\n\nimport * as Paho from 'paho-mqtt';\nimport { v4 as uuid } from 'uuid';\nimport Observable from 'zen-observable-ts';\nimport { AbstractPubSubProvider } from './PubSubProvider';\nimport { ConsoleLogger as Logger, Hub } from '@aws-amplify/core';\nimport { ConnectionStateMonitor, CONNECTION_CHANGE } from '../utils/ConnectionStateMonitor';\nimport { AMPLIFY_SYMBOL, CONNECTION_STATE_CHANGE } from './constants';\nvar logger = new Logger('MqttOverWSProvider');\nexport function mqttTopicMatch(filter, topic) {\n  var filterArray = filter.split('/');\n  var length = filterArray.length;\n  var topicArray = topic.split('/');\n\n  for (var i = 0; i < length; ++i) {\n    var left = filterArray[i];\n    var right = topicArray[i];\n    if (left === '#') return topicArray.length >= length;\n    if (left !== '+' && left !== right) return false;\n  }\n\n  return length === topicArray.length;\n}\n\nvar ClientsQueue =\n/** @class */\nfunction () {\n  function ClientsQueue() {\n    this.promises = new Map();\n  }\n\n  ClientsQueue.prototype.get = function (clientId, clientFactory) {\n    return __awaiter(this, void 0, void 0, function () {\n      var cachedPromise, newPromise;\n      return __generator(this, function (_a) {\n        cachedPromise = this.promises.get(clientId);\n\n        if (cachedPromise) {\n          return [2\n          /*return*/\n          , cachedPromise];\n        }\n\n        if (clientFactory) {\n          newPromise = clientFactory(clientId);\n          this.promises.set(clientId, newPromise);\n          return [2\n          /*return*/\n          , newPromise];\n        }\n\n        return [2\n        /*return*/\n        , undefined];\n      });\n    });\n  };\n\n  Object.defineProperty(ClientsQueue.prototype, \"allClients\", {\n    get: function get() {\n      return Array.from(this.promises.keys());\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  ClientsQueue.prototype.remove = function (clientId) {\n    this.promises.delete(clientId);\n  };\n\n  return ClientsQueue;\n}();\n\nvar dispatchPubSubEvent = function dispatchPubSubEvent(event, data, message) {\n  Hub.dispatch('pubsub', {\n    event: event,\n    data: data,\n    message: message\n  }, 'PubSub', AMPLIFY_SYMBOL);\n};\n\nvar topicSymbol = typeof Symbol !== 'undefined' ? Symbol('topic') : '@@topic';\n\nvar MqttOverWSProvider =\n/** @class */\nfunction (_super) {\n  __extends(MqttOverWSProvider, _super);\n\n  function MqttOverWSProvider(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var _this = _super.call(this, __assign(__assign({}, options), {\n      clientId: options.clientId || uuid()\n    })) || this;\n\n    _this._clientsQueue = new ClientsQueue();\n    _this.connectionStateMonitor = new ConnectionStateMonitor();\n    _this._topicObservers = new Map();\n    _this._clientIdObservers = new Map(); // Monitor the connection health state and pass changes along to Hub\n\n    _this.connectionStateMonitor.connectionStateObservable.subscribe(function (connectionStateChange) {\n      dispatchPubSubEvent(CONNECTION_STATE_CHANGE, {\n        provider: _this,\n        connectionState: connectionStateChange\n      }, \"Connection state is \" + connectionStateChange);\n    });\n\n    return _this;\n  }\n\n  Object.defineProperty(MqttOverWSProvider.prototype, \"clientId\", {\n    get: function get() {\n      return this.options.clientId;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MqttOverWSProvider.prototype, \"endpoint\", {\n    get: function get() {\n      return this.options.aws_pubsub_endpoint;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MqttOverWSProvider.prototype, \"clientsQueue\", {\n    get: function get() {\n      return this._clientsQueue;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MqttOverWSProvider.prototype, \"isSSLEnabled\", {\n    get: function get() {\n      return !this.options.aws_appsync_dangerously_connect_to_http_endpoint_for_testing;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  MqttOverWSProvider.prototype.getTopicForValue = function (value) {\n    return typeof value === 'object' && value[topicSymbol];\n  };\n\n  MqttOverWSProvider.prototype.getProviderName = function () {\n    return 'MqttOverWSProvider';\n  };\n\n  MqttOverWSProvider.prototype.onDisconnect = function (_a) {\n    var _this = this;\n\n    var clientId = _a.clientId,\n        errorCode = _a.errorCode,\n        args = __rest(_a, [\"clientId\", \"errorCode\"]);\n\n    if (errorCode !== 0) {\n      logger.warn(clientId, JSON.stringify(__assign({\n        errorCode: errorCode\n      }, args), null, 2));\n      var topicsToDelete_1 = [];\n\n      if (!clientId) {\n        return;\n      }\n\n      var clientIdObservers = this._clientIdObservers.get(clientId);\n\n      if (!clientIdObservers) {\n        return;\n      }\n\n      clientIdObservers.forEach(function (observer) {\n        observer.error('Disconnected, error code: ' + errorCode); // removing observers for disconnected clientId\n\n        _this._topicObservers.forEach(function (observerForTopic, observerTopic) {\n          observerForTopic.delete(observer);\n\n          if (observerForTopic.size === 0) {\n            topicsToDelete_1.push(observerTopic);\n          }\n        });\n      }); // forgiving any trace of clientId\n\n      this._clientIdObservers.delete(clientId); // Removing topics that are not listen by an observer\n\n\n      topicsToDelete_1.forEach(function (topic) {\n        _this._topicObservers.delete(topic);\n      });\n    }\n  };\n\n  MqttOverWSProvider.prototype.newClient = function (_a) {\n    var url = _a.url,\n        clientId = _a.clientId;\n    return __awaiter(this, void 0, void 0, function () {\n      var client;\n\n      var _this = this;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            logger.debug('Creating new MQTT client', clientId);\n            this.connectionStateMonitor.record(CONNECTION_CHANGE.OPENING_CONNECTION);\n            client = new Paho.Client(url, clientId); // client.trace = (args) => logger.debug(clientId, JSON.stringify(args, null, 2));\n\n            client.onMessageArrived = function (_a) {\n              var topic = _a.destinationName,\n                  msg = _a.payloadString;\n\n              _this._onMessage(topic, msg);\n            };\n\n            client.onConnectionLost = function (_a) {\n              var errorCode = _a.errorCode,\n                  args = __rest(_a, [\"errorCode\"]);\n\n              _this.onDisconnect(__assign({\n                clientId: clientId,\n                errorCode: errorCode\n              }, args));\n\n              _this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED);\n            };\n\n            return [4\n            /*yield*/\n            , new Promise(function (resolve, reject) {\n              client.connect({\n                useSSL: _this.isSSLEnabled,\n                mqttVersion: 3,\n                onSuccess: function onSuccess() {\n                  return resolve(client);\n                },\n                onFailure: function onFailure() {\n                  reject();\n\n                  _this.connectionStateMonitor.record(CONNECTION_CHANGE.CONNECTION_FAILED);\n                }\n              });\n            })];\n\n          case 1:\n            _b.sent();\n\n            this.connectionStateMonitor.record(CONNECTION_CHANGE.CONNECTION_ESTABLISHED);\n            return [2\n            /*return*/\n            , client];\n        }\n      });\n    });\n  };\n\n  MqttOverWSProvider.prototype.connect = function (clientId, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.clientsQueue.get(clientId, function (clientId) {\n              return _this.newClient(__assign(__assign({}, options), {\n                clientId: clientId\n              }));\n            })];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n\n  MqttOverWSProvider.prototype.disconnect = function (clientId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var client;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.clientsQueue.get(clientId)];\n\n          case 1:\n            client = _a.sent();\n\n            if (client && client.isConnected()) {\n              client.disconnect();\n              this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED);\n            }\n\n            this.clientsQueue.remove(clientId);\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  MqttOverWSProvider.prototype.publish = function (topics, msg) {\n    return __awaiter(this, void 0, void 0, function () {\n      var targetTopics, message, url, client;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            targetTopics = [].concat(topics);\n            message = JSON.stringify(msg);\n            return [4\n            /*yield*/\n            , this.endpoint];\n\n          case 1:\n            url = _a.sent();\n            return [4\n            /*yield*/\n            , this.connect(this.clientId, {\n              url: url\n            })];\n\n          case 2:\n            client = _a.sent();\n            logger.debug('Publishing to topic(s)', targetTopics.join(','), message);\n            targetTopics.forEach(function (topic) {\n              return client.send(topic, message);\n            });\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  MqttOverWSProvider.prototype._onMessage = function (topic, msg) {\n    try {\n      var matchedTopicObservers_1 = [];\n\n      this._topicObservers.forEach(function (observerForTopic, observerTopic) {\n        if (mqttTopicMatch(observerTopic, topic)) {\n          matchedTopicObservers_1.push(observerForTopic);\n        }\n      });\n\n      var parsedMessage_1 = JSON.parse(msg);\n\n      if (typeof parsedMessage_1 === 'object') {\n        parsedMessage_1[topicSymbol] = topic;\n      }\n\n      matchedTopicObservers_1.forEach(function (observersForTopic) {\n        observersForTopic.forEach(function (observer) {\n          return observer.next(parsedMessage_1);\n        });\n      });\n    } catch (error) {\n      logger.warn('Error handling message', error, msg);\n    }\n  };\n\n  MqttOverWSProvider.prototype.subscribe = function (topics, options) {\n    var _this = this;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    var targetTopics = [].concat(topics);\n    logger.debug('Subscribing to topic(s)', targetTopics.join(','));\n    return new Observable(function (observer) {\n      targetTopics.forEach(function (topic) {\n        // this._topicObservers is used to notify the observers according to the topic received on the message\n        var observersForTopic = _this._topicObservers.get(topic);\n\n        if (!observersForTopic) {\n          observersForTopic = new Set();\n\n          _this._topicObservers.set(topic, observersForTopic);\n        }\n\n        observersForTopic.add(observer);\n      }); // @ts-ignore\n\n      var client;\n      var _a = options.clientId,\n          clientId = _a === void 0 ? _this.clientId : _a; // this._clientIdObservers is used to close observers when client gets disconnected\n\n      var observersForClientId = _this._clientIdObservers.get(clientId);\n\n      if (!observersForClientId) {\n        observersForClientId = new Set();\n      }\n\n      observersForClientId.add(observer);\n\n      _this._clientIdObservers.set(clientId, observersForClientId);\n\n      (function () {\n        return __awaiter(_this, void 0, void 0, function () {\n          var _a, url, _b, e_1;\n\n          return __generator(this, function (_c) {\n            switch (_c.label) {\n              case 0:\n                _a = options.url;\n                if (!(_a === void 0)) return [3\n                /*break*/\n                , 2];\n                return [4\n                /*yield*/\n                , this.endpoint];\n\n              case 1:\n                _b = _c.sent();\n                return [3\n                /*break*/\n                , 3];\n\n              case 2:\n                _b = _a;\n                _c.label = 3;\n\n              case 3:\n                url = _b;\n                _c.label = 4;\n\n              case 4:\n                _c.trys.push([4, 6,, 7]);\n\n                return [4\n                /*yield*/\n                , this.connect(clientId, {\n                  url: url\n                })];\n\n              case 5:\n                client = _c.sent();\n                targetTopics.forEach(function (topic) {\n                  client.subscribe(topic);\n                });\n                return [3\n                /*break*/\n                , 7];\n\n              case 6:\n                e_1 = _c.sent();\n                observer.error(e_1);\n                return [3\n                /*break*/\n                , 7];\n\n              case 7:\n                return [2\n                /*return*/\n                ];\n            }\n          });\n        });\n      })();\n\n      return function () {\n        var _a, _b;\n\n        logger.debug('Unsubscribing from topic(s)', targetTopics.join(','));\n\n        if (client) {\n          (_a = _this._clientIdObservers.get(clientId)) === null || _a === void 0 ? void 0 : _a.delete(observer); // No more observers per client => client not needed anymore\n\n          if (((_b = _this._clientIdObservers.get(clientId)) === null || _b === void 0 ? void 0 : _b.size) === 0) {\n            _this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSING_CONNECTION);\n\n            _this.disconnect(clientId);\n\n            _this._clientIdObservers.delete(clientId);\n          }\n\n          targetTopics.forEach(function (topic) {\n            var observersForTopic = _this._topicObservers.get(topic) || new Set();\n            observersForTopic.delete(observer); // if no observers exists for the topic, topic should be removed\n\n            if (observersForTopic.size === 0) {\n              _this._topicObservers.delete(topic);\n\n              if (client.isConnected()) {\n                client.unsubscribe(topic);\n              }\n            }\n          });\n        }\n\n        return null;\n      };\n    });\n  };\n\n  return MqttOverWSProvider;\n}(AbstractPubSubProvider);\n\nexport { MqttOverWSProvider };","map":{"version":3,"mappings":"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","names":["Paho","v4","uuid","Observable","AbstractPubSubProvider","ConsoleLogger","Logger","Hub","ConnectionStateMonitor","CONNECTION_CHANGE","AMPLIFY_SYMBOL","CONNECTION_STATE_CHANGE","logger","mqttTopicMatch","filter","topic","filterArray","split","length","topicArray","i","left","right","Map","ClientsQueue","clientId","clientFactory","cachedPromise","promises","get","newPromise","set","undefined","Object","Array","from","keys","delete","dispatchPubSubEvent","event","data","message","dispatch","topicSymbol","Symbol","__extends","options","_super","_this","connectionStateMonitor","connectionStateObservable","subscribe","provider","connectionState","connectionStateChange","MqttOverWSProvider","aws_pubsub_endpoint","_clientsQueue","aws_appsync_dangerously_connect_to_http_endpoint_for_testing","value","_a","errorCode","args","warn","JSON","stringify","__assign","topicsToDelete_1","clientIdObservers","_clientIdObservers","forEach","observer","error","_topicObservers","observerForTopic","observerTopic","size","push","url","debug","record","OPENING_CONNECTION","client","Client","onMessageArrived","msg","_onMessage","onConnectionLost","onDisconnect","CLOSED","Promise","resolve","reject","connect","useSSL","isSSLEnabled","mqttVersion","onSuccess","onFailure","CONNECTION_FAILED","_b","CONNECTION_ESTABLISHED","clientsQueue","newClient","isConnected","disconnect","remove","topics","targetTopics","concat","endpoint","join","send","matchedTopicObservers_1","parsedMessage_1","parse","observersForTopic","next","Set","add","observersForClientId","_c","e_1","CLOSING_CONNECTION","unsubscribe"],"sources":["C:\\Users\\lmore\\OneDrive\\Documents\\GitHub\\JacksOfAllTrades\\jacksofalltrades\\node_modules\\@aws-amplify\\pubsub\\src\\Providers\\MqttOverWSProvider.ts"],"sourcesContent":["/*\n * Copyright 2017-2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nimport * as Paho from 'paho-mqtt';\nimport { v4 as uuid } from 'uuid';\nimport Observable from 'zen-observable-ts';\n\nimport { AbstractPubSubProvider } from './PubSubProvider';\nimport { ProviderOptions, SubscriptionObserver } from '../types';\nimport { ConsoleLogger as Logger, Hub } from '@aws-amplify/core';\nimport {\n\tConnectionStateMonitor,\n\tCONNECTION_CHANGE,\n} from '../utils/ConnectionStateMonitor';\nimport { AMPLIFY_SYMBOL, CONNECTION_STATE_CHANGE } from './constants';\n\nconst logger = new Logger('MqttOverWSProvider');\n\nexport function mqttTopicMatch(filter: string, topic: string) {\n\tconst filterArray = filter.split('/');\n\tconst length = filterArray.length;\n\tconst topicArray = topic.split('/');\n\n\tfor (let i = 0; i < length; ++i) {\n\t\tconst left = filterArray[i];\n\t\tconst right = topicArray[i];\n\t\tif (left === '#') return topicArray.length >= length;\n\t\tif (left !== '+' && left !== right) return false;\n\t}\n\treturn length === topicArray.length;\n}\n\nexport interface MqttProviderOptions extends ProviderOptions {\n\tclientId?: string;\n\turl?: string;\n}\n\n/**\n * @deprecated Migrated to MqttProviderOptions\n */\nexport type MqttProvidertOptions = MqttProviderOptions;\n\nclass ClientsQueue {\n\tprivate promises: Map<string, Promise<any>> = new Map();\n\n\tasync get(clientId: string, clientFactory?: (input: string) => Promise<any>) {\n\t\tconst cachedPromise = this.promises.get(clientId);\n\t\tif (cachedPromise) {\n\t\t\treturn cachedPromise;\n\t\t}\n\n\t\tif (clientFactory) {\n\t\t\tconst newPromise = clientFactory(clientId);\n\n\t\t\tthis.promises.set(clientId, newPromise);\n\n\t\t\treturn newPromise;\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tget allClients() {\n\t\treturn Array.from(this.promises.keys());\n\t}\n\n\tremove(clientId: string) {\n\t\tthis.promises.delete(clientId);\n\t}\n}\n\nconst dispatchPubSubEvent = (event: string, data: any, message: string) => {\n\tHub.dispatch('pubsub', { event, data, message }, 'PubSub', AMPLIFY_SYMBOL);\n};\n\nconst topicSymbol = typeof Symbol !== 'undefined' ? Symbol('topic') : '@@topic';\n\nexport class MqttOverWSProvider extends AbstractPubSubProvider {\n\tprivate _clientsQueue = new ClientsQueue();\n\tprivate readonly connectionStateMonitor = new ConnectionStateMonitor();\n\n\tconstructor(options: MqttProviderOptions = {}) {\n\t\tsuper({ ...options, clientId: options.clientId || uuid() });\n\n\t\t// Monitor the connection health state and pass changes along to Hub\n\t\tthis.connectionStateMonitor.connectionStateObservable.subscribe(\n\t\t\tconnectionStateChange => {\n\t\t\t\tdispatchPubSubEvent(\n\t\t\t\t\tCONNECTION_STATE_CHANGE,\n\t\t\t\t\t{\n\t\t\t\t\t\tprovider: this,\n\t\t\t\t\t\tconnectionState: connectionStateChange,\n\t\t\t\t\t},\n\t\t\t\t\t`Connection state is ${connectionStateChange}`\n\t\t\t\t);\n\t\t\t}\n\t\t);\n\t}\n\n\tprotected get clientId() {\n\t\treturn this.options.clientId;\n\t}\n\n\tprotected get endpoint() {\n\t\treturn this.options.aws_pubsub_endpoint;\n\t}\n\n\tprotected get clientsQueue() {\n\t\treturn this._clientsQueue;\n\t}\n\n\tprotected get isSSLEnabled() {\n\t\treturn !this.options\n\t\t\t.aws_appsync_dangerously_connect_to_http_endpoint_for_testing;\n\t}\n\n\tprotected getTopicForValue(value: any) {\n\t\treturn typeof value === 'object' && value[topicSymbol];\n\t}\n\n\tgetProviderName() {\n\t\treturn 'MqttOverWSProvider';\n\t}\n\n\tpublic onDisconnect({\n\t\tclientId,\n\t\terrorCode,\n\t\t...args\n\t}: {\n\t\tclientId?: string;\n\t\terrorCode?: number;\n\t}) {\n\t\tif (errorCode !== 0) {\n\t\t\tlogger.warn(clientId, JSON.stringify({ errorCode, ...args }, null, 2));\n\n\t\t\tconst topicsToDelete: string[] = [];\n\t\t\tif (!clientId) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst clientIdObservers = this._clientIdObservers.get(clientId);\n\t\t\tif (!clientIdObservers) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tclientIdObservers.forEach(observer => {\n\t\t\t\tobserver.error('Disconnected, error code: ' + errorCode);\n\t\t\t\t// removing observers for disconnected clientId\n\t\t\t\tthis._topicObservers.forEach((observerForTopic, observerTopic) => {\n\t\t\t\t\tobserverForTopic.delete(observer);\n\t\t\t\t\tif (observerForTopic.size === 0) {\n\t\t\t\t\t\ttopicsToDelete.push(observerTopic);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\n\t\t\t// forgiving any trace of clientId\n\t\t\tthis._clientIdObservers.delete(clientId);\n\n\t\t\t// Removing topics that are not listen by an observer\n\t\t\ttopicsToDelete.forEach(topic => {\n\t\t\t\tthis._topicObservers.delete(topic);\n\t\t\t});\n\t\t}\n\t}\n\n\tpublic async newClient({ url, clientId }: MqttProviderOptions): Promise<any> {\n\t\tlogger.debug('Creating new MQTT client', clientId);\n\n\t\tthis.connectionStateMonitor.record(CONNECTION_CHANGE.OPENING_CONNECTION);\n\t\t// @ts-ignore\n\t\tconst client = new Paho.Client(url, clientId);\n\t\t// client.trace = (args) => logger.debug(clientId, JSON.stringify(args, null, 2));\n\t\tclient.onMessageArrived = ({\n\t\t\tdestinationName: topic,\n\t\t\tpayloadString: msg,\n\t\t}: {\n\t\t\tdestinationName: string;\n\t\t\tpayloadString: string;\n\t\t}) => {\n\t\t\tthis._onMessage(topic, msg);\n\t\t};\n\t\tclient.onConnectionLost = ({\n\t\t\terrorCode,\n\t\t\t...args\n\t\t}: {\n\t\t\terrorCode: number;\n\t\t}) => {\n\t\t\tthis.onDisconnect({ clientId, errorCode, ...args });\n\t\t\tthis.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED);\n\t\t};\n\n\t\tawait new Promise((resolve, reject) => {\n\t\t\tclient.connect({\n\t\t\t\tuseSSL: this.isSSLEnabled,\n\t\t\t\tmqttVersion: 3,\n\t\t\t\tonSuccess: () => resolve(client),\n\t\t\t\tonFailure: () => {\n\t\t\t\t\treject();\n\t\t\t\t\tthis.connectionStateMonitor.record(\n\t\t\t\t\t\tCONNECTION_CHANGE.CONNECTION_FAILED\n\t\t\t\t\t);\n\t\t\t\t},\n\t\t\t});\n\t\t});\n\n\t\tthis.connectionStateMonitor.record(\n\t\t\tCONNECTION_CHANGE.CONNECTION_ESTABLISHED\n\t\t);\n\n\t\treturn client;\n\t}\n\n\tprotected async connect(\n\t\tclientId: string,\n\t\toptions: MqttProviderOptions = {}\n\t): Promise<any> {\n\t\treturn await this.clientsQueue.get(clientId, clientId =>\n\t\t\tthis.newClient({ ...options, clientId })\n\t\t);\n\t}\n\n\tprotected async disconnect(clientId: string): Promise<void> {\n\t\tconst client = await this.clientsQueue.get(clientId);\n\n\t\tif (client && client.isConnected()) {\n\t\t\tclient.disconnect();\n\t\t\tthis.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED);\n\t\t}\n\t\tthis.clientsQueue.remove(clientId);\n\t}\n\n\tasync publish(topics: string[] | string, msg: any) {\n\t\tconst targetTopics = ([] as string[]).concat(topics);\n\t\tconst message = JSON.stringify(msg);\n\n\t\tconst url = await this.endpoint;\n\n\t\tconst client = await this.connect(this.clientId, { url });\n\n\t\tlogger.debug('Publishing to topic(s)', targetTopics.join(','), message);\n\t\ttargetTopics.forEach(topic => client.send(topic, message));\n\t}\n\n\tprotected _topicObservers: Map<string, Set<SubscriptionObserver<any>>> =\n\t\tnew Map();\n\n\tprotected _clientIdObservers: Map<string, Set<SubscriptionObserver<any>>> =\n\t\tnew Map();\n\n\tprivate _onMessage(topic: string, msg: any) {\n\t\ttry {\n\t\t\tconst matchedTopicObservers: Set<SubscriptionObserver<any>>[] = [];\n\t\t\tthis._topicObservers.forEach((observerForTopic, observerTopic) => {\n\t\t\t\tif (mqttTopicMatch(observerTopic, topic)) {\n\t\t\t\t\tmatchedTopicObservers.push(observerForTopic);\n\t\t\t\t}\n\t\t\t});\n\t\t\tconst parsedMessage = JSON.parse(msg);\n\n\t\t\tif (typeof parsedMessage === 'object') {\n\t\t\t\tparsedMessage[topicSymbol] = topic;\n\t\t\t}\n\n\t\t\tmatchedTopicObservers.forEach(observersForTopic => {\n\t\t\t\tobserversForTopic.forEach(observer => observer.next(parsedMessage));\n\t\t\t});\n\t\t} catch (error) {\n\t\t\tlogger.warn('Error handling message', error, msg);\n\t\t}\n\t}\n\n\tsubscribe(\n\t\ttopics: string[] | string,\n\t\toptions: MqttProviderOptions = {}\n\t): Observable<any> {\n\t\tconst targetTopics = ([] as string[]).concat(topics);\n\t\tlogger.debug('Subscribing to topic(s)', targetTopics.join(','));\n\n\t\treturn new Observable(observer => {\n\t\t\ttargetTopics.forEach(topic => {\n\t\t\t\t// this._topicObservers is used to notify the observers according to the topic received on the message\n\t\t\t\tlet observersForTopic = this._topicObservers.get(topic);\n\n\t\t\t\tif (!observersForTopic) {\n\t\t\t\t\tobserversForTopic = new Set();\n\n\t\t\t\t\tthis._topicObservers.set(topic, observersForTopic);\n\t\t\t\t}\n\n\t\t\t\tobserversForTopic.add(observer);\n\t\t\t});\n\n\t\t\t// @ts-ignore\n\t\t\tlet client: Paho.Client;\n\t\t\tconst { clientId = this.clientId } = options;\n\n\t\t\t// this._clientIdObservers is used to close observers when client gets disconnected\n\t\t\tlet observersForClientId = this._clientIdObservers.get(clientId);\n\t\t\tif (!observersForClientId) {\n\t\t\t\tobserversForClientId = new Set();\n\t\t\t}\n\t\t\tobserversForClientId.add(observer);\n\t\t\tthis._clientIdObservers.set(clientId, observersForClientId);\n\n\t\t\t(async () => {\n\t\t\t\tconst { url = await this.endpoint } = options;\n\n\t\t\t\ttry {\n\t\t\t\t\tclient = await this.connect(clientId, { url });\n\t\t\t\t\ttargetTopics.forEach(topic => {\n\t\t\t\t\t\tclient.subscribe(topic);\n\t\t\t\t\t});\n\t\t\t\t} catch (e) {\n\t\t\t\t\tobserver.error(e);\n\t\t\t\t}\n\t\t\t})();\n\n\t\t\treturn () => {\n\t\t\t\tlogger.debug('Unsubscribing from topic(s)', targetTopics.join(','));\n\n\t\t\t\tif (client) {\n\t\t\t\t\tthis._clientIdObservers.get(clientId)?.delete(observer);\n\t\t\t\t\t// No more observers per client => client not needed anymore\n\t\t\t\t\tif (this._clientIdObservers.get(clientId)?.size === 0) {\n\t\t\t\t\t\tthis.connectionStateMonitor.record(\n\t\t\t\t\t\t\tCONNECTION_CHANGE.CLOSING_CONNECTION\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tthis.disconnect(clientId);\n\t\t\t\t\t\tthis._clientIdObservers.delete(clientId);\n\t\t\t\t\t}\n\n\t\t\t\t\ttargetTopics.forEach(topic => {\n\t\t\t\t\t\tconst observersForTopic =\n\t\t\t\t\t\t\tthis._topicObservers.get(topic) ||\n\t\t\t\t\t\t\t(new Set() as Set<SubscriptionObserver<any>>);\n\n\t\t\t\t\t\tobserversForTopic.delete(observer);\n\n\t\t\t\t\t\t// if no observers exists for the topic, topic should be removed\n\t\t\t\t\t\tif (observersForTopic.size === 0) {\n\t\t\t\t\t\t\tthis._topicObservers.delete(topic);\n\t\t\t\t\t\t\tif (client.isConnected()) {\n\t\t\t\t\t\t\t\tclient.unsubscribe(topic);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\t\t\t};\n\t\t});\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}