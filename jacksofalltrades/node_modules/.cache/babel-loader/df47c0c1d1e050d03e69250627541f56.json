{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n/*\n * Copyright 2017-2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n\n\nimport Observable from 'zen-observable-ts';\nimport { GraphQLError } from 'graphql';\nimport * as url from 'url';\nimport { v4 as uuid } from 'uuid';\nimport { Buffer } from 'buffer';\nimport { Logger, Credentials, Signer, Hub, Constants, USER_AGENT_HEADER, jitteredExponentialRetry, NonRetryableError } from '@aws-amplify/core';\nimport Cache from '@aws-amplify/cache';\nimport Auth from '@aws-amplify/auth';\nimport { AbstractPubSubProvider } from '../PubSubProvider';\nimport { CONNECTION_STATE_CHANGE, CONTROL_MSG } from '../../index';\nimport { AMPLIFY_SYMBOL, AWS_APPSYNC_REALTIME_HEADERS, CONNECTION_INIT_TIMEOUT, DEFAULT_KEEP_ALIVE_TIMEOUT, DEFAULT_KEEP_ALIVE_ALERT_TIMEOUT, MAX_DELAY_MS, MESSAGE_TYPES, NON_RETRYABLE_CODES, SOCKET_STATUS, START_ACK_TIMEOUT, SUBSCRIPTION_STATUS } from '../constants';\nimport { ConnectionStateMonitor, CONNECTION_CHANGE } from '../../utils/ConnectionStateMonitor';\nvar logger = new Logger('AWSAppSyncRealTimeProvider');\n\nvar dispatchApiEvent = function (event, data, message) {\n  Hub.dispatch('api', {\n    event: event,\n    data: data,\n    message: message\n  }, 'PubSub', AMPLIFY_SYMBOL);\n};\n\nvar standardDomainPattern = /^https:\\/\\/\\w{26}\\.appsync\\-api\\.\\w{2}(?:(?:\\-\\w{2,})+)\\-\\d\\.amazonaws.com\\/graphql$/i;\nvar customDomainPath = '/realtime';\n\nvar AWSAppSyncRealTimeProvider =\n/** @class */\nfunction (_super) {\n  __extends(AWSAppSyncRealTimeProvider, _super);\n\n  function AWSAppSyncRealTimeProvider(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var _this = _super.call(this, options) || this;\n\n    _this.socketStatus = SOCKET_STATUS.CLOSED;\n    _this.keepAliveTimeout = DEFAULT_KEEP_ALIVE_TIMEOUT;\n    _this.subscriptionObserverMap = new Map();\n    _this.promiseArray = [];\n    _this.connectionStateMonitor = new ConnectionStateMonitor(); // Monitor the connection state and pass changes along to Hub\n\n    _this.connectionStateMonitor.connectionStateObservable.subscribe(function (ConnectionState) {\n      dispatchApiEvent(CONNECTION_STATE_CHANGE, {\n        provider: _this,\n        connectionState: ConnectionState\n      }, \"Connection state is \" + ConnectionState);\n    });\n\n    return _this;\n  }\n\n  AWSAppSyncRealTimeProvider.prototype.getNewWebSocket = function (url, protocol) {\n    return new WebSocket(url, protocol);\n  };\n\n  AWSAppSyncRealTimeProvider.prototype.getProviderName = function () {\n    return 'AWSAppSyncRealTimeProvider';\n  };\n\n  AWSAppSyncRealTimeProvider.prototype.newClient = function () {\n    throw new Error('Not used here');\n  };\n\n  AWSAppSyncRealTimeProvider.prototype.publish = function (_topics, _msg, _options) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        throw new Error('Operation not supported');\n      });\n    });\n  }; // Check if url matches standard domain pattern\n\n\n  AWSAppSyncRealTimeProvider.prototype.isCustomDomain = function (url) {\n    return url.match(standardDomainPattern) === null;\n  };\n\n  AWSAppSyncRealTimeProvider.prototype.subscribe = function (_topics, options) {\n    var _this = this;\n\n    var appSyncGraphqlEndpoint = options === null || options === void 0 ? void 0 : options.appSyncGraphqlEndpoint;\n    return new Observable(function (observer) {\n      if (!options || !appSyncGraphqlEndpoint) {\n        observer.error({\n          errors: [__assign({}, new GraphQLError(\"Subscribe only available for AWS AppSync endpoint\"))]\n        });\n        observer.complete();\n      } else {\n        var subscriptionId_1 = uuid();\n\n        _this._startSubscriptionWithAWSAppSyncRealTime({\n          options: options,\n          observer: observer,\n          subscriptionId: subscriptionId_1\n        }).catch(function (err) {\n          observer.error({\n            errors: [__assign({}, new GraphQLError(CONTROL_MSG.REALTIME_SUBSCRIPTION_INIT_ERROR + \": \" + err))]\n          });\n\n          _this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED);\n\n          observer.complete();\n        });\n\n        return function () {\n          return __awaiter(_this, void 0, void 0, function () {\n            var subscriptionState, err_1;\n            return __generator(this, function (_a) {\n              switch (_a.label) {\n                case 0:\n                  _a.trys.push([0, 2, 3, 4]); // Waiting that subscription has been connected before trying to unsubscribe\n\n\n                  return [4\n                  /*yield*/\n                  , this._waitForSubscriptionToBeConnected(subscriptionId_1)];\n\n                case 1:\n                  // Waiting that subscription has been connected before trying to unsubscribe\n                  _a.sent();\n\n                  subscriptionState = (this.subscriptionObserverMap.get(subscriptionId_1) || {}).subscriptionState;\n\n                  if (!subscriptionState) {\n                    // subscription already unsubscribed\n                    return [2\n                    /*return*/\n                    ];\n                  }\n\n                  if (subscriptionState === SUBSCRIPTION_STATUS.CONNECTED) {\n                    this._sendUnsubscriptionMessage(subscriptionId_1);\n                  } else {\n                    throw new Error('Subscription never connected');\n                  }\n\n                  return [3\n                  /*break*/\n                  , 4];\n\n                case 2:\n                  err_1 = _a.sent();\n                  logger.debug(\"Error while unsubscribing \" + err_1);\n                  return [3\n                  /*break*/\n                  , 4];\n\n                case 3:\n                  this._removeSubscriptionObserver(subscriptionId_1);\n\n                  return [7\n                  /*endfinally*/\n                  ];\n\n                case 4:\n                  return [2\n                  /*return*/\n                  ];\n              }\n            });\n          });\n        };\n      }\n    });\n  };\n\n  Object.defineProperty(AWSAppSyncRealTimeProvider.prototype, \"isSSLEnabled\", {\n    get: function () {\n      return !this.options.aws_appsync_dangerously_connect_to_http_endpoint_for_testing;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  AWSAppSyncRealTimeProvider.prototype._startSubscriptionWithAWSAppSyncRealTime = function (_a) {\n    var options = _a.options,\n        observer = _a.observer,\n        subscriptionId = _a.subscriptionId;\n\n    var _b, _c;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var appSyncGraphqlEndpoint, authenticationType, query, variables, apiKey, region, _d, graphql_headers, _e, additionalHeaders, subscriptionState, data, dataString, headerObj, _f, _g, subscriptionMessage, stringToAWSRealTime, err_2, message, subscriptionFailedCallback_1, _h, subscriptionFailedCallback, subscriptionReadyCallback;\n\n      var _j;\n\n      var _this = this;\n\n      return __generator(this, function (_k) {\n        switch (_k.label) {\n          case 0:\n            appSyncGraphqlEndpoint = options.appSyncGraphqlEndpoint, authenticationType = options.authenticationType, query = options.query, variables = options.variables, apiKey = options.apiKey, region = options.region, _d = options.graphql_headers, graphql_headers = _d === void 0 ? function () {\n              return {};\n            } : _d, _e = options.additionalHeaders, additionalHeaders = _e === void 0 ? {} : _e;\n            subscriptionState = SUBSCRIPTION_STATUS.PENDING;\n            data = {\n              query: query,\n              variables: variables\n            }; // Having a subscription id map will make it simple to forward messages received\n\n            this.subscriptionObserverMap.set(subscriptionId, {\n              observer: observer,\n              query: query !== null && query !== void 0 ? query : '',\n              variables: variables !== null && variables !== void 0 ? variables : {},\n              subscriptionState: subscriptionState,\n              startAckTimeoutId: undefined\n            });\n            dataString = JSON.stringify(data);\n            _f = [{}];\n            return [4\n            /*yield*/\n            , this._awsRealTimeHeaderBasedAuth({\n              apiKey: apiKey,\n              appSyncGraphqlEndpoint: appSyncGraphqlEndpoint,\n              authenticationType: authenticationType,\n              payload: dataString,\n              canonicalUri: '',\n              region: region,\n              additionalHeaders: additionalHeaders\n            })];\n\n          case 1:\n            _g = [__assign.apply(void 0, _f.concat([_k.sent()]))];\n            return [4\n            /*yield*/\n            , graphql_headers()];\n\n          case 2:\n            headerObj = __assign.apply(void 0, [__assign.apply(void 0, [__assign.apply(void 0, _g.concat([_k.sent()])), additionalHeaders]), (_j = {}, _j[USER_AGENT_HEADER] = Constants.userAgent, _j)]);\n            subscriptionMessage = {\n              id: subscriptionId,\n              payload: {\n                data: dataString,\n                extensions: {\n                  authorization: __assign({}, headerObj)\n                }\n              },\n              type: MESSAGE_TYPES.GQL_START\n            };\n            stringToAWSRealTime = JSON.stringify(subscriptionMessage);\n            _k.label = 3;\n\n          case 3:\n            _k.trys.push([3, 5,, 6]);\n\n            this.connectionStateMonitor.record(CONNECTION_CHANGE.OPENING_CONNECTION);\n            return [4\n            /*yield*/\n            , this._initializeWebSocketConnection({\n              apiKey: apiKey,\n              appSyncGraphqlEndpoint: appSyncGraphqlEndpoint,\n              authenticationType: authenticationType,\n              region: region,\n              additionalHeaders: additionalHeaders\n            })];\n\n          case 4:\n            _k.sent();\n\n            return [3\n            /*break*/\n            , 6];\n\n          case 5:\n            err_2 = _k.sent();\n            logger.debug({\n              err: err_2\n            });\n            message = (_b = err_2['message']) !== null && _b !== void 0 ? _b : '';\n            this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED);\n            observer.error({\n              errors: [__assign({}, new GraphQLError(CONTROL_MSG.CONNECTION_FAILED + \": \" + message))]\n            });\n            observer.complete();\n            subscriptionFailedCallback_1 = (this.subscriptionObserverMap.get(subscriptionId) || {}).subscriptionFailedCallback; // Notify concurrent unsubscription\n\n            if (typeof subscriptionFailedCallback_1 === 'function') {\n              subscriptionFailedCallback_1();\n            }\n\n            return [2\n            /*return*/\n            ];\n\n          case 6:\n            _h = (_c = this.subscriptionObserverMap.get(subscriptionId)) !== null && _c !== void 0 ? _c : {}, subscriptionFailedCallback = _h.subscriptionFailedCallback, subscriptionReadyCallback = _h.subscriptionReadyCallback; // This must be done before sending the message in order to be listening immediately\n\n            this.subscriptionObserverMap.set(subscriptionId, {\n              observer: observer,\n              subscriptionState: subscriptionState,\n              query: query !== null && query !== void 0 ? query : '',\n              variables: variables !== null && variables !== void 0 ? variables : {},\n              subscriptionReadyCallback: subscriptionReadyCallback,\n              subscriptionFailedCallback: subscriptionFailedCallback,\n              startAckTimeoutId: setTimeout(function () {\n                _this._timeoutStartSubscriptionAck.call(_this, subscriptionId);\n              }, START_ACK_TIMEOUT)\n            });\n\n            if (this.awsRealTimeSocket) {\n              this.awsRealTimeSocket.send(stringToAWSRealTime);\n            }\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  }; // Waiting that subscription has been connected before trying to unsubscribe\n\n\n  AWSAppSyncRealTimeProvider.prototype._waitForSubscriptionToBeConnected = function (subscriptionId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var subscriptionObserver, subscriptionState;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        subscriptionObserver = this.subscriptionObserverMap.get(subscriptionId);\n\n        if (subscriptionObserver) {\n          subscriptionState = subscriptionObserver.subscriptionState; // This in case unsubscribe is invoked before sending start subscription message\n\n          if (subscriptionState === SUBSCRIPTION_STATUS.PENDING) {\n            return [2\n            /*return*/\n            , new Promise(function (res, rej) {\n              var observer = subscriptionObserver.observer,\n                  subscriptionState = subscriptionObserver.subscriptionState,\n                  variables = subscriptionObserver.variables,\n                  query = subscriptionObserver.query;\n\n              _this.subscriptionObserverMap.set(subscriptionId, {\n                observer: observer,\n                subscriptionState: subscriptionState,\n                variables: variables,\n                query: query,\n                subscriptionReadyCallback: res,\n                subscriptionFailedCallback: rej\n              });\n            })];\n          }\n        }\n\n        return [2\n        /*return*/\n        ];\n      });\n    });\n  };\n\n  AWSAppSyncRealTimeProvider.prototype._sendUnsubscriptionMessage = function (subscriptionId) {\n    try {\n      if (this.awsRealTimeSocket && this.awsRealTimeSocket.readyState === WebSocket.OPEN && this.socketStatus === SOCKET_STATUS.READY) {\n        // Preparing unsubscribe message to stop receiving messages for that subscription\n        var unsubscribeMessage = {\n          id: subscriptionId,\n          type: MESSAGE_TYPES.GQL_STOP\n        };\n        var stringToAWSRealTime = JSON.stringify(unsubscribeMessage);\n        this.awsRealTimeSocket.send(stringToAWSRealTime);\n      }\n    } catch (err) {\n      // If GQL_STOP is not sent because of disconnection issue, then there is nothing the client can do\n      logger.debug({\n        err: err\n      });\n    }\n  };\n\n  AWSAppSyncRealTimeProvider.prototype._removeSubscriptionObserver = function (subscriptionId) {\n    this.subscriptionObserverMap.delete(subscriptionId); // Verifying 1000ms after removing subscription in case there are new subscription unmount/mount\n\n    setTimeout(this._closeSocketIfRequired.bind(this), 1000);\n  };\n\n  AWSAppSyncRealTimeProvider.prototype._closeSocketIfRequired = function () {\n    if (this.subscriptionObserverMap.size > 0) {\n      // Active subscriptions on the WebSocket\n      return;\n    }\n\n    if (!this.awsRealTimeSocket) {\n      this.socketStatus = SOCKET_STATUS.CLOSED;\n      return;\n    }\n\n    this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSING_CONNECTION);\n\n    if (this.awsRealTimeSocket.bufferedAmount > 0) {\n      // Still data on the WebSocket\n      setTimeout(this._closeSocketIfRequired.bind(this), 1000);\n    } else {\n      logger.debug('closing WebSocket...');\n\n      if (this.keepAliveTimeoutId) {\n        clearTimeout(this.keepAliveTimeoutId);\n      }\n\n      if (this.keepAliveAlertTimeoutId) {\n        clearTimeout(this.keepAliveAlertTimeoutId);\n      }\n\n      var tempSocket = this.awsRealTimeSocket; // Cleaning callbacks to avoid race condition, socket still exists\n\n      tempSocket.onclose = null;\n      tempSocket.onerror = null;\n      tempSocket.close(1000);\n      this.awsRealTimeSocket = undefined;\n      this.socketStatus = SOCKET_STATUS.CLOSED;\n      this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED);\n    }\n  };\n\n  AWSAppSyncRealTimeProvider.prototype._handleIncomingSubscriptionMessage = function (message) {\n    var _this = this;\n\n    logger.debug(\"subscription message from AWS AppSync RealTime: \" + message.data);\n\n    var _a = JSON.parse(message.data),\n        _b = _a.id,\n        id = _b === void 0 ? '' : _b,\n        payload = _a.payload,\n        type = _a.type;\n\n    var _c = this.subscriptionObserverMap.get(id) || {},\n        _d = _c.observer,\n        observer = _d === void 0 ? null : _d,\n        _e = _c.query,\n        query = _e === void 0 ? '' : _e,\n        _f = _c.variables,\n        variables = _f === void 0 ? {} : _f,\n        startAckTimeoutId = _c.startAckTimeoutId,\n        subscriptionReadyCallback = _c.subscriptionReadyCallback,\n        subscriptionFailedCallback = _c.subscriptionFailedCallback;\n\n    logger.debug({\n      id: id,\n      observer: observer,\n      query: query,\n      variables: variables\n    });\n\n    if (type === MESSAGE_TYPES.GQL_DATA && payload && payload.data) {\n      if (observer) {\n        observer.next(payload);\n      } else {\n        logger.debug(\"observer not found for id: \" + id);\n      }\n\n      return;\n    }\n\n    if (type === MESSAGE_TYPES.GQL_START_ACK) {\n      logger.debug(\"subscription ready for \" + JSON.stringify({\n        query: query,\n        variables: variables\n      }));\n\n      if (typeof subscriptionReadyCallback === 'function') {\n        subscriptionReadyCallback();\n      }\n\n      if (startAckTimeoutId) clearTimeout(startAckTimeoutId);\n      dispatchApiEvent(CONTROL_MSG.SUBSCRIPTION_ACK, {\n        query: query,\n        variables: variables\n      }, 'Connection established for subscription');\n      var subscriptionState = SUBSCRIPTION_STATUS.CONNECTED;\n\n      if (observer) {\n        this.subscriptionObserverMap.set(id, {\n          observer: observer,\n          query: query,\n          variables: variables,\n          startAckTimeoutId: undefined,\n          subscriptionState: subscriptionState,\n          subscriptionReadyCallback: subscriptionReadyCallback,\n          subscriptionFailedCallback: subscriptionFailedCallback\n        });\n      }\n\n      this.connectionStateMonitor.record(CONNECTION_CHANGE.CONNECTION_ESTABLISHED);\n      return;\n    }\n\n    if (type === MESSAGE_TYPES.GQL_CONNECTION_KEEP_ALIVE) {\n      if (this.keepAliveTimeoutId) clearTimeout(this.keepAliveTimeoutId);\n      if (this.keepAliveAlertTimeoutId) clearTimeout(this.keepAliveAlertTimeoutId);\n      this.keepAliveTimeoutId = setTimeout(function () {\n        return _this._errorDisconnect(CONTROL_MSG.TIMEOUT_DISCONNECT);\n      }, this.keepAliveTimeout);\n      this.keepAliveAlertTimeoutId = setTimeout(function () {\n        _this.connectionStateMonitor.record(CONNECTION_CHANGE.KEEP_ALIVE_MISSED);\n      }, DEFAULT_KEEP_ALIVE_ALERT_TIMEOUT);\n      this.connectionStateMonitor.record(CONNECTION_CHANGE.KEEP_ALIVE);\n      return;\n    }\n\n    if (type === MESSAGE_TYPES.GQL_ERROR) {\n      var subscriptionState = SUBSCRIPTION_STATUS.FAILED;\n\n      if (observer) {\n        this.subscriptionObserverMap.set(id, {\n          observer: observer,\n          query: query,\n          variables: variables,\n          startAckTimeoutId: startAckTimeoutId,\n          subscriptionReadyCallback: subscriptionReadyCallback,\n          subscriptionFailedCallback: subscriptionFailedCallback,\n          subscriptionState: subscriptionState\n        });\n        observer.error({\n          errors: [__assign({}, new GraphQLError(CONTROL_MSG.CONNECTION_FAILED + \": \" + JSON.stringify(payload)))]\n        });\n        if (startAckTimeoutId) clearTimeout(startAckTimeoutId);\n        observer.complete();\n\n        if (typeof subscriptionFailedCallback === 'function') {\n          subscriptionFailedCallback();\n        }\n      }\n    }\n  };\n\n  AWSAppSyncRealTimeProvider.prototype._errorDisconnect = function (msg) {\n    logger.debug(\"Disconnect error: \" + msg);\n    this.subscriptionObserverMap.forEach(function (_a) {\n      var observer = _a.observer;\n\n      if (observer && !observer.closed) {\n        observer.error({\n          errors: [__assign({}, new GraphQLError(msg))]\n        });\n      }\n    });\n    this.subscriptionObserverMap.clear();\n\n    if (this.awsRealTimeSocket) {\n      this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED);\n      this.awsRealTimeSocket.close();\n    }\n\n    this.socketStatus = SOCKET_STATUS.CLOSED;\n  };\n\n  AWSAppSyncRealTimeProvider.prototype._timeoutStartSubscriptionAck = function (subscriptionId) {\n    var subscriptionObserver = this.subscriptionObserverMap.get(subscriptionId);\n\n    if (subscriptionObserver) {\n      var observer = subscriptionObserver.observer,\n          query = subscriptionObserver.query,\n          variables = subscriptionObserver.variables;\n\n      if (!observer) {\n        return;\n      }\n\n      this.subscriptionObserverMap.set(subscriptionId, {\n        observer: observer,\n        query: query,\n        variables: variables,\n        subscriptionState: SUBSCRIPTION_STATUS.FAILED\n      });\n\n      if (observer && !observer.closed) {\n        observer.error({\n          errors: [__assign({}, new GraphQLError(\"Subscription timeout \" + JSON.stringify({\n            query: query,\n            variables: variables\n          })))]\n        }); // Cleanup will be automatically executed\n\n        observer.complete();\n      }\n\n      logger.debug('timeoutStartSubscription', JSON.stringify({\n        query: query,\n        variables: variables\n      }));\n    }\n  };\n\n  AWSAppSyncRealTimeProvider.prototype._initializeWebSocketConnection = function (_a) {\n    var _this = this;\n\n    var appSyncGraphqlEndpoint = _a.appSyncGraphqlEndpoint,\n        authenticationType = _a.authenticationType,\n        apiKey = _a.apiKey,\n        region = _a.region,\n        additionalHeaders = _a.additionalHeaders;\n\n    if (this.socketStatus === SOCKET_STATUS.READY) {\n      return;\n    }\n\n    return new Promise(function (res, rej) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var payloadString, headerString, _a, _b, headerQs, payloadQs, discoverableEndpoint, protocol, awsRealTimeUrl, err_3;\n\n        return __generator(this, function (_c) {\n          switch (_c.label) {\n            case 0:\n              this.promiseArray.push({\n                res: res,\n                rej: rej\n              });\n              if (!(this.socketStatus === SOCKET_STATUS.CLOSED)) return [3\n              /*break*/\n              , 5];\n              _c.label = 1;\n\n            case 1:\n              _c.trys.push([1, 4,, 5]);\n\n              this.socketStatus = SOCKET_STATUS.CONNECTING;\n              payloadString = '{}';\n              _b = (_a = JSON).stringify;\n              return [4\n              /*yield*/\n              , this._awsRealTimeHeaderBasedAuth({\n                authenticationType: authenticationType,\n                payload: payloadString,\n                canonicalUri: '/connect',\n                apiKey: apiKey,\n                appSyncGraphqlEndpoint: appSyncGraphqlEndpoint,\n                region: region,\n                additionalHeaders: additionalHeaders\n              })];\n\n            case 2:\n              headerString = _b.apply(_a, [_c.sent()]);\n              headerQs = Buffer.from(headerString).toString('base64');\n              payloadQs = Buffer.from(payloadString).toString('base64');\n              discoverableEndpoint = appSyncGraphqlEndpoint !== null && appSyncGraphqlEndpoint !== void 0 ? appSyncGraphqlEndpoint : '';\n\n              if (this.isCustomDomain(discoverableEndpoint)) {\n                discoverableEndpoint = discoverableEndpoint.concat(customDomainPath);\n              } else {\n                discoverableEndpoint = discoverableEndpoint.replace('appsync-api', 'appsync-realtime-api').replace('gogi-beta', 'grt-beta');\n              }\n\n              protocol = this.isSSLEnabled ? 'wss://' : 'ws://';\n              discoverableEndpoint = discoverableEndpoint.replace('https://', protocol).replace('http://', protocol);\n              awsRealTimeUrl = discoverableEndpoint + \"?header=\" + headerQs + \"&payload=\" + payloadQs;\n              return [4\n              /*yield*/\n              , this._initializeRetryableHandshake(awsRealTimeUrl)];\n\n            case 3:\n              _c.sent();\n\n              this.promiseArray.forEach(function (_a) {\n                var res = _a.res;\n                logger.debug('Notifying connection successful');\n                res();\n              });\n              this.socketStatus = SOCKET_STATUS.READY;\n              this.promiseArray = [];\n              return [3\n              /*break*/\n              , 5];\n\n            case 4:\n              err_3 = _c.sent();\n              this.promiseArray.forEach(function (_a) {\n                var rej = _a.rej;\n                return rej(err_3);\n              });\n              this.promiseArray = [];\n\n              if (this.awsRealTimeSocket && this.awsRealTimeSocket.readyState === WebSocket.OPEN) {\n                this.awsRealTimeSocket.close(3001);\n              }\n\n              this.awsRealTimeSocket = undefined;\n              this.socketStatus = SOCKET_STATUS.CLOSED;\n              return [3\n              /*break*/\n              , 5];\n\n            case 5:\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    });\n  };\n\n  AWSAppSyncRealTimeProvider.prototype._initializeRetryableHandshake = function (awsRealTimeUrl) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            logger.debug(\"Initializaling retryable Handshake\");\n            return [4\n            /*yield*/\n            , jitteredExponentialRetry(this._initializeHandshake.bind(this), [awsRealTimeUrl], MAX_DELAY_MS)];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AWSAppSyncRealTimeProvider.prototype._initializeHandshake = function (awsRealTimeUrl) {\n    return __awaiter(this, void 0, void 0, function () {\n      var err_4, _a, errorType, errorCode;\n\n      var _this = this;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            logger.debug(\"Initializing handshake \" + awsRealTimeUrl);\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 4,, 5]);\n\n            return [4\n            /*yield*/\n            , function () {\n              return new Promise(function (res, rej) {\n                var newSocket = _this.getNewWebSocket(awsRealTimeUrl, 'graphql-ws');\n\n                newSocket.onerror = function () {\n                  logger.debug(\"WebSocket connection error\");\n                };\n\n                newSocket.onclose = function () {\n                  _this.connectionStateMonitor.record(CONNECTION_CHANGE.CONNECTION_FAILED);\n\n                  rej(new Error('Connection handshake error'));\n                };\n\n                newSocket.onopen = function () {\n                  _this.awsRealTimeSocket = newSocket;\n                  return res();\n                };\n              });\n            }()];\n\n          case 2:\n            _b.sent(); // Step 2: wait for ack from AWS AppSyncReaTime after sending init\n\n\n            return [4\n            /*yield*/\n            , function () {\n              return new Promise(function (res, rej) {\n                if (_this.awsRealTimeSocket) {\n                  var ackOk_1 = false;\n\n                  _this.awsRealTimeSocket.onerror = function (error) {\n                    logger.debug(\"WebSocket error \" + JSON.stringify(error));\n                  };\n\n                  _this.awsRealTimeSocket.onclose = function (event) {\n                    logger.debug(\"WebSocket closed \" + event.reason);\n                    rej(new Error(JSON.stringify(event)));\n                  };\n\n                  _this.awsRealTimeSocket.onmessage = function (message) {\n                    logger.debug(\"subscription message from AWS AppSyncRealTime: \" + message.data + \" \");\n                    var data = JSON.parse(message.data);\n                    var type = data.type,\n                        _a = data.payload,\n                        _b = (_a === void 0 ? {} : _a).connectionTimeoutMs,\n                        connectionTimeoutMs = _b === void 0 ? DEFAULT_KEEP_ALIVE_TIMEOUT : _b;\n\n                    if (type === MESSAGE_TYPES.GQL_CONNECTION_ACK) {\n                      ackOk_1 = true;\n\n                      if (_this.awsRealTimeSocket) {\n                        _this.keepAliveTimeout = connectionTimeoutMs;\n                        _this.awsRealTimeSocket.onmessage = _this._handleIncomingSubscriptionMessage.bind(_this);\n\n                        _this.awsRealTimeSocket.onerror = function (err) {\n                          logger.debug(err);\n\n                          _this._errorDisconnect(CONTROL_MSG.CONNECTION_CLOSED);\n                        };\n\n                        _this.awsRealTimeSocket.onclose = function (event) {\n                          logger.debug(\"WebSocket closed \" + event.reason);\n\n                          _this._errorDisconnect(CONTROL_MSG.CONNECTION_CLOSED);\n                        };\n                      }\n\n                      res('Cool, connected to AWS AppSyncRealTime');\n                      return;\n                    }\n\n                    if (type === MESSAGE_TYPES.GQL_CONNECTION_ERROR) {\n                      var _c = data.payload,\n                          _d = (_c === void 0 ? {} : _c).errors,\n                          _e = __read(_d === void 0 ? [] : _d, 1),\n                          _f = _e[0],\n                          _g = _f === void 0 ? {} : _f,\n                          _h = _g.errorType,\n                          errorType = _h === void 0 ? '' : _h,\n                          _j = _g.errorCode,\n                          errorCode = _j === void 0 ? 0 : _j;\n\n                      rej({\n                        errorType: errorType,\n                        errorCode: errorCode\n                      });\n                    }\n                  };\n\n                  var gqlInit = {\n                    type: MESSAGE_TYPES.GQL_CONNECTION_INIT\n                  };\n\n                  _this.awsRealTimeSocket.send(JSON.stringify(gqlInit));\n\n                  var checkAckOk_1 = function (ackOk) {\n                    if (!ackOk) {\n                      _this.connectionStateMonitor.record(CONNECTION_CHANGE.CONNECTION_FAILED);\n\n                      rej(new Error(\"Connection timeout: ack from AWSAppSyncRealTime was not received after \" + CONNECTION_INIT_TIMEOUT + \" ms\"));\n                    }\n                  };\n\n                  setTimeout(function () {\n                    return checkAckOk_1(ackOk_1);\n                  }, CONNECTION_INIT_TIMEOUT);\n                }\n              });\n            }()];\n\n          case 3:\n            // Step 2: wait for ack from AWS AppSyncReaTime after sending init\n            _b.sent();\n\n            return [3\n            /*break*/\n            , 5];\n\n          case 4:\n            err_4 = _b.sent();\n            _a = err_4, errorType = _a.errorType, errorCode = _a.errorCode;\n\n            if (NON_RETRYABLE_CODES.includes(errorCode)) {\n              throw new NonRetryableError(errorType);\n            } else if (errorType) {\n              throw new Error(errorType);\n            } else {\n              throw err_4;\n            }\n\n            return [3\n            /*break*/\n            , 5];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AWSAppSyncRealTimeProvider.prototype._awsRealTimeHeaderBasedAuth = function (_a) {\n    var authenticationType = _a.authenticationType,\n        payload = _a.payload,\n        canonicalUri = _a.canonicalUri,\n        appSyncGraphqlEndpoint = _a.appSyncGraphqlEndpoint,\n        apiKey = _a.apiKey,\n        region = _a.region,\n        additionalHeaders = _a.additionalHeaders;\n    return __awaiter(this, void 0, void 0, function () {\n      var headerHandler, handler, host, result;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            headerHandler = {\n              API_KEY: this._awsRealTimeApiKeyHeader.bind(this),\n              AWS_IAM: this._awsRealTimeIAMHeader.bind(this),\n              OPENID_CONNECT: this._awsRealTimeOPENIDHeader.bind(this),\n              AMAZON_COGNITO_USER_POOLS: this._awsRealTimeCUPHeader.bind(this),\n              AWS_LAMBDA: this._customAuthHeader\n            };\n            if (!(!authenticationType || !headerHandler[authenticationType])) return [3\n            /*break*/\n            , 1];\n            logger.debug(\"Authentication type \" + authenticationType + \" not supported\");\n            return [2\n            /*return*/\n            , ''];\n\n          case 1:\n            handler = headerHandler[authenticationType];\n            host = url.parse(appSyncGraphqlEndpoint !== null && appSyncGraphqlEndpoint !== void 0 ? appSyncGraphqlEndpoint : '').host;\n            logger.debug(\"Authenticating with \" + authenticationType);\n            return [4\n            /*yield*/\n            , handler({\n              payload: payload,\n              canonicalUri: canonicalUri,\n              appSyncGraphqlEndpoint: appSyncGraphqlEndpoint,\n              apiKey: apiKey,\n              region: region,\n              host: host,\n              additionalHeaders: additionalHeaders\n            })];\n\n          case 2:\n            result = _b.sent();\n            return [2\n            /*return*/\n            , result];\n        }\n      });\n    });\n  };\n\n  AWSAppSyncRealTimeProvider.prototype._awsRealTimeCUPHeader = function (_a) {\n    var host = _a.host;\n    return __awaiter(this, void 0, void 0, function () {\n      var session;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , Auth.currentSession()];\n\n          case 1:\n            session = _b.sent();\n            return [2\n            /*return*/\n            , {\n              Authorization: session.getAccessToken().getJwtToken(),\n              host: host\n            }];\n        }\n      });\n    });\n  };\n\n  AWSAppSyncRealTimeProvider.prototype._awsRealTimeOPENIDHeader = function (_a) {\n    var host = _a.host;\n    return __awaiter(this, void 0, void 0, function () {\n      var token, federatedInfo, currentUser;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , Cache.getItem('federatedInfo')];\n\n          case 1:\n            federatedInfo = _b.sent();\n            if (!federatedInfo) return [3\n            /*break*/\n            , 2];\n            token = federatedInfo.token;\n            return [3\n            /*break*/\n            , 4];\n\n          case 2:\n            return [4\n            /*yield*/\n            , Auth.currentAuthenticatedUser()];\n\n          case 3:\n            currentUser = _b.sent();\n\n            if (currentUser) {\n              token = currentUser.token;\n            }\n\n            _b.label = 4;\n\n          case 4:\n            if (!token) {\n              throw new Error('No federated jwt');\n            }\n\n            return [2\n            /*return*/\n            , {\n              Authorization: token,\n              host: host\n            }];\n        }\n      });\n    });\n  };\n\n  AWSAppSyncRealTimeProvider.prototype._awsRealTimeApiKeyHeader = function (_a) {\n    var apiKey = _a.apiKey,\n        host = _a.host;\n    return __awaiter(this, void 0, void 0, function () {\n      var dt, dtStr;\n      return __generator(this, function (_b) {\n        dt = new Date();\n        dtStr = dt.toISOString().replace(/[:\\-]|\\.\\d{3}/g, '');\n        return [2\n        /*return*/\n        , {\n          host: host,\n          'x-amz-date': dtStr,\n          'x-api-key': apiKey\n        }];\n      });\n    });\n  };\n\n  AWSAppSyncRealTimeProvider.prototype._awsRealTimeIAMHeader = function (_a) {\n    var payload = _a.payload,\n        canonicalUri = _a.canonicalUri,\n        appSyncGraphqlEndpoint = _a.appSyncGraphqlEndpoint,\n        region = _a.region;\n    return __awaiter(this, void 0, void 0, function () {\n      var endpointInfo, credentialsOK, creds, request, signed_params;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            endpointInfo = {\n              region: region,\n              service: 'appsync'\n            };\n            return [4\n            /*yield*/\n            , this._ensureCredentials()];\n\n          case 1:\n            credentialsOK = _b.sent();\n\n            if (!credentialsOK) {\n              throw new Error('No credentials');\n            }\n\n            return [4\n            /*yield*/\n            , Credentials.get().then(function (credentials) {\n              var _a = credentials,\n                  secretAccessKey = _a.secretAccessKey,\n                  accessKeyId = _a.accessKeyId,\n                  sessionToken = _a.sessionToken;\n              return {\n                secret_key: secretAccessKey,\n                access_key: accessKeyId,\n                session_token: sessionToken\n              };\n            })];\n\n          case 2:\n            creds = _b.sent();\n            request = {\n              url: \"\" + appSyncGraphqlEndpoint + canonicalUri,\n              data: payload,\n              method: 'POST',\n              headers: __assign({}, AWS_APPSYNC_REALTIME_HEADERS)\n            };\n            signed_params = Signer.sign(request, creds, endpointInfo);\n            return [2\n            /*return*/\n            , signed_params.headers];\n        }\n      });\n    });\n  };\n\n  AWSAppSyncRealTimeProvider.prototype._customAuthHeader = function (_a) {\n    var host = _a.host,\n        additionalHeaders = _a.additionalHeaders;\n\n    if (!additionalHeaders || !additionalHeaders['Authorization']) {\n      throw new Error('No auth token specified');\n    }\n\n    return {\n      Authorization: additionalHeaders.Authorization,\n      host: host\n    };\n  };\n  /**\n   * @private\n   */\n\n\n  AWSAppSyncRealTimeProvider.prototype._ensureCredentials = function () {\n    return Credentials.get().then(function (credentials) {\n      if (!credentials) return false;\n      var cred = Credentials.shear(credentials);\n      logger.debug('set credentials for AWSAppSyncRealTimeProvider', cred);\n      return true;\n    }).catch(function (err) {\n      logger.warn('ensure credentials error', err);\n      return false;\n    });\n  };\n\n  return AWSAppSyncRealTimeProvider;\n}(AbstractPubSubProvider);\n\nexport { AWSAppSyncRealTimeProvider };","map":{"version":3,"mappings":"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","names":["Observable","GraphQLError","url","v4","uuid","Buffer","Logger","Credentials","Signer","Hub","Constants","USER_AGENT_HEADER","jitteredExponentialRetry","NonRetryableError","Cache","Auth","AbstractPubSubProvider","CONNECTION_STATE_CHANGE","CONTROL_MSG","AMPLIFY_SYMBOL","AWS_APPSYNC_REALTIME_HEADERS","CONNECTION_INIT_TIMEOUT","DEFAULT_KEEP_ALIVE_TIMEOUT","DEFAULT_KEEP_ALIVE_ALERT_TIMEOUT","MAX_DELAY_MS","MESSAGE_TYPES","NON_RETRYABLE_CODES","SOCKET_STATUS","START_ACK_TIMEOUT","SUBSCRIPTION_STATUS","ConnectionStateMonitor","CONNECTION_CHANGE","logger","dispatchApiEvent","event","data","message","dispatch","standardDomainPattern","customDomainPath","__extends","options","_super","_this","CLOSED","Map","connectionStateMonitor","connectionStateObservable","subscribe","provider","connectionState","ConnectionState","AWSAppSyncRealTimeProvider","protocol","WebSocket","Error","_topics","_msg","_options","match","appSyncGraphqlEndpoint","observer","error","errors","complete","subscriptionId_1","_startSubscriptionWithAWSAppSyncRealTime","subscriptionId","catch","REALTIME_SUBSCRIPTION_INIT_ERROR","err","record","_waitForSubscriptionToBeConnected","_a","subscriptionState","subscriptionObserverMap","get","CONNECTED","_sendUnsubscriptionMessage","debug","err_1","_removeSubscriptionObserver","Object","aws_appsync_dangerously_connect_to_http_endpoint_for_testing","authenticationType","query","variables","apiKey","region","_d","graphql_headers","_e","additionalHeaders","PENDING","set","startAckTimeoutId","undefined","dataString","JSON","stringify","_awsRealTimeHeaderBasedAuth","payload","canonicalUri","_k","headerObj","_j","userAgent","subscriptionMessage","id","extensions","authorization","type","GQL_START","stringToAWSRealTime","OPENING_CONNECTION","_initializeWebSocketConnection","err_2","_b","CONNECTION_FAILED","subscriptionFailedCallback_1","subscriptionFailedCallback","_h","_c","subscriptionReadyCallback","setTimeout","_timeoutStartSubscriptionAck","call","awsRealTimeSocket","send","subscriptionObserver","Promise","res","rej","readyState","OPEN","socketStatus","READY","unsubscribeMessage","GQL_STOP","delete","_closeSocketIfRequired","bind","size","CLOSING_CONNECTION","bufferedAmount","keepAliveTimeoutId","clearTimeout","keepAliveAlertTimeoutId","tempSocket","onclose","onerror","close","_f","GQL_DATA","next","GQL_START_ACK","SUBSCRIPTION_ACK","CONNECTION_ESTABLISHED","GQL_CONNECTION_KEEP_ALIVE","_errorDisconnect","TIMEOUT_DISCONNECT","keepAliveTimeout","KEEP_ALIVE_MISSED","KEEP_ALIVE","GQL_ERROR","FAILED","msg","forEach","closed","clear","promiseArray","push","CONNECTING","payloadString","headerString","headerQs","from","toString","payloadQs","discoverableEndpoint","isCustomDomain","concat","replace","isSSLEnabled","awsRealTimeUrl","_initializeRetryableHandshake","err_3","_initializeHandshake","newSocket","getNewWebSocket","onopen","ackOk_1","reason","onmessage","parse","connectionTimeoutMs","GQL_CONNECTION_ACK","_handleIncomingSubscriptionMessage","CONNECTION_CLOSED","GQL_CONNECTION_ERROR","_g","errorType","errorCode","gqlInit","GQL_CONNECTION_INIT","checkAckOk_1","ackOk","err_4","includes","headerHandler","API_KEY","_awsRealTimeApiKeyHeader","AWS_IAM","_awsRealTimeIAMHeader","OPENID_CONNECT","_awsRealTimeOPENIDHeader","AMAZON_COGNITO_USER_POOLS","_awsRealTimeCUPHeader","AWS_LAMBDA","_customAuthHeader","handler","host","result","currentSession","session","Authorization","getAccessToken","getJwtToken","getItem","federatedInfo","token","currentAuthenticatedUser","currentUser","dt","Date","dtStr","toISOString","endpointInfo","service","_ensureCredentials","credentialsOK","then","credentials","secretAccessKey","accessKeyId","sessionToken","secret_key","access_key","session_token","creds","request","method","headers","signed_params","sign","cred","shear","warn"],"sources":["C:\\Users\\lmore\\OneDrive\\Documents\\GitHub\\JacksOfAllTrades\\jacksofalltrades\\node_modules\\@aws-amplify\\pubsub\\src\\Providers\\AWSAppSyncRealTimeProvider\\index.ts"],"sourcesContent":["/*\n * Copyright 2017-2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nimport Observable, { ZenObservable } from 'zen-observable-ts';\nimport { GraphQLError } from 'graphql';\nimport * as url from 'url';\nimport { v4 as uuid } from 'uuid';\nimport { Buffer } from 'buffer';\nimport { ProviderOptions } from '../../types';\nimport {\n\tLogger,\n\tCredentials,\n\tSigner,\n\tHub,\n\tConstants,\n\tUSER_AGENT_HEADER,\n\tjitteredExponentialRetry,\n\tNonRetryableError,\n\tICredentials,\n} from '@aws-amplify/core';\nimport Cache from '@aws-amplify/cache';\nimport Auth, { GRAPHQL_AUTH_MODE } from '@aws-amplify/auth';\nimport { AbstractPubSubProvider } from '../PubSubProvider';\nimport { CONNECTION_STATE_CHANGE, CONTROL_MSG } from '../../index';\n\nimport {\n\tAMPLIFY_SYMBOL,\n\tAWS_APPSYNC_REALTIME_HEADERS,\n\tCONNECTION_INIT_TIMEOUT,\n\tDEFAULT_KEEP_ALIVE_TIMEOUT,\n\tDEFAULT_KEEP_ALIVE_ALERT_TIMEOUT,\n\tMAX_DELAY_MS,\n\tMESSAGE_TYPES,\n\tNON_RETRYABLE_CODES,\n\tSOCKET_STATUS,\n\tSTART_ACK_TIMEOUT,\n\tSUBSCRIPTION_STATUS,\n} from '../constants';\nimport {\n\tConnectionStateMonitor,\n\tCONNECTION_CHANGE,\n} from '../../utils/ConnectionStateMonitor';\n\nconst logger = new Logger('AWSAppSyncRealTimeProvider');\n\nconst dispatchApiEvent = (event: string, data: any, message: string) => {\n\tHub.dispatch('api', { event, data, message }, 'PubSub', AMPLIFY_SYMBOL);\n};\n\nexport type ObserverQuery = {\n\tobserver: ZenObservable.SubscriptionObserver<any>;\n\tquery: string;\n\tvariables: object;\n\tsubscriptionState: SUBSCRIPTION_STATUS;\n\tsubscriptionReadyCallback?: Function;\n\tsubscriptionFailedCallback?: Function;\n\tstartAckTimeoutId?: ReturnType<typeof setTimeout>;\n};\n\nconst standardDomainPattern =\n\t/^https:\\/\\/\\w{26}\\.appsync\\-api\\.\\w{2}(?:(?:\\-\\w{2,})+)\\-\\d\\.amazonaws.com\\/graphql$/i;\n\nconst customDomainPath = '/realtime';\n\ntype GraphqlAuthModes = keyof typeof GRAPHQL_AUTH_MODE;\n\nexport interface AWSAppSyncRealTimeProviderOptions extends ProviderOptions {\n\tappSyncGraphqlEndpoint?: string;\n\tauthenticationType?: GraphqlAuthModes;\n\tquery?: string;\n\tvariables?: object;\n\tapiKey?: string;\n\tregion?: string;\n\tgraphql_headers?: () => {} | (() => Promise<{}>);\n\tadditionalHeaders?: { [key: string]: string };\n}\n\ntype AWSAppSyncRealTimeAuthInput =\n\tPartial<AWSAppSyncRealTimeProviderOptions> & {\n\t\tcanonicalUri: string;\n\t\tpayload: string;\n\t};\n\nexport class AWSAppSyncRealTimeProvider extends AbstractPubSubProvider {\n\tprivate awsRealTimeSocket?: WebSocket;\n\tprivate socketStatus: SOCKET_STATUS = SOCKET_STATUS.CLOSED;\n\tprivate keepAliveTimeoutId?: ReturnType<typeof setTimeout>;\n\tprivate keepAliveTimeout = DEFAULT_KEEP_ALIVE_TIMEOUT;\n\tprivate keepAliveAlertTimeoutId?: ReturnType<typeof setTimeout>;\n\tprivate subscriptionObserverMap: Map<string, ObserverQuery> = new Map();\n\tprivate promiseArray: Array<{ res: Function; rej: Function }> = [];\n\tprivate readonly connectionStateMonitor = new ConnectionStateMonitor();\n\n\tconstructor(options: ProviderOptions = {}) {\n\t\tsuper(options);\n\t\t// Monitor the connection state and pass changes along to Hub\n\t\tthis.connectionStateMonitor.connectionStateObservable.subscribe(\n\t\t\tConnectionState => {\n\t\t\t\tdispatchApiEvent(\n\t\t\t\t\tCONNECTION_STATE_CHANGE,\n\t\t\t\t\t{\n\t\t\t\t\t\tprovider: this,\n\t\t\t\t\t\tconnectionState: ConnectionState,\n\t\t\t\t\t},\n\t\t\t\t\t`Connection state is ${ConnectionState}`\n\t\t\t\t);\n\t\t\t}\n\t\t);\n\t}\n\n\tgetNewWebSocket(url, protocol) {\n\t\treturn new WebSocket(url, protocol);\n\t}\n\n\tgetProviderName() {\n\t\treturn 'AWSAppSyncRealTimeProvider';\n\t}\n\n\tnewClient(): Promise<any> {\n\t\tthrow new Error('Not used here');\n\t}\n\n\tpublic async publish(_topics: string[] | string, _msg: any, _options?: any) {\n\t\tthrow new Error('Operation not supported');\n\t}\n\n\t// Check if url matches standard domain pattern\n\tprivate isCustomDomain(url: string): boolean {\n\t\treturn url.match(standardDomainPattern) === null;\n\t}\n\n\tsubscribe(\n\t\t_topics: string[] | string,\n\t\toptions?: AWSAppSyncRealTimeProviderOptions\n\t): Observable<any> {\n\t\tconst appSyncGraphqlEndpoint = options?.appSyncGraphqlEndpoint;\n\n\t\treturn new Observable(observer => {\n\t\t\tif (!options || !appSyncGraphqlEndpoint) {\n\t\t\t\tobserver.error({\n\t\t\t\t\terrors: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t...new GraphQLError(\n\t\t\t\t\t\t\t\t`Subscribe only available for AWS AppSync endpoint`\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t});\n\t\t\t\tobserver.complete();\n\t\t\t} else {\n\t\t\t\tconst subscriptionId = uuid();\n\t\t\t\tthis._startSubscriptionWithAWSAppSyncRealTime({\n\t\t\t\t\toptions,\n\t\t\t\t\tobserver,\n\t\t\t\t\tsubscriptionId,\n\t\t\t\t}).catch<any>(err => {\n\t\t\t\t\tobserver.error({\n\t\t\t\t\t\terrors: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t...new GraphQLError(\n\t\t\t\t\t\t\t\t\t`${CONTROL_MSG.REALTIME_SUBSCRIPTION_INIT_ERROR}: ${err}`\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t});\n\t\t\t\t\tthis.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED);\n\t\t\t\t\tobserver.complete();\n\t\t\t\t});\n\n\t\t\t\treturn async () => {\n\t\t\t\t\t// Cleanup after unsubscribing or observer.complete was called after _startSubscriptionWithAWSAppSyncRealTime\n\t\t\t\t\ttry {\n\t\t\t\t\t\t// Waiting that subscription has been connected before trying to unsubscribe\n\t\t\t\t\t\tawait this._waitForSubscriptionToBeConnected(subscriptionId);\n\n\t\t\t\t\t\tconst { subscriptionState } =\n\t\t\t\t\t\t\tthis.subscriptionObserverMap.get(subscriptionId) || {};\n\n\t\t\t\t\t\tif (!subscriptionState) {\n\t\t\t\t\t\t\t// subscription already unsubscribed\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (subscriptionState === SUBSCRIPTION_STATUS.CONNECTED) {\n\t\t\t\t\t\t\tthis._sendUnsubscriptionMessage(subscriptionId);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthrow new Error('Subscription never connected');\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\tlogger.debug(`Error while unsubscribing ${err}`);\n\t\t\t\t\t} finally {\n\t\t\t\t\t\tthis._removeSubscriptionObserver(subscriptionId);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\t\t});\n\t}\n\n\tprotected get isSSLEnabled() {\n\t\treturn !this.options\n\t\t\t.aws_appsync_dangerously_connect_to_http_endpoint_for_testing;\n\t}\n\n\tprivate async _startSubscriptionWithAWSAppSyncRealTime({\n\t\toptions,\n\t\tobserver,\n\t\tsubscriptionId,\n\t}: {\n\t\toptions: AWSAppSyncRealTimeProviderOptions;\n\t\tobserver: ZenObservable.SubscriptionObserver<any>;\n\t\tsubscriptionId: string;\n\t}) {\n\t\tconst {\n\t\t\tappSyncGraphqlEndpoint,\n\t\t\tauthenticationType,\n\t\t\tquery,\n\t\t\tvariables,\n\t\t\tapiKey,\n\t\t\tregion,\n\t\t\tgraphql_headers = () => ({}),\n\t\t\tadditionalHeaders = {},\n\t\t} = options;\n\n\t\tconst subscriptionState: SUBSCRIPTION_STATUS = SUBSCRIPTION_STATUS.PENDING;\n\t\tconst data = {\n\t\t\tquery,\n\t\t\tvariables,\n\t\t};\n\t\t// Having a subscription id map will make it simple to forward messages received\n\t\tthis.subscriptionObserverMap.set(subscriptionId, {\n\t\t\tobserver,\n\t\t\tquery: query ?? '',\n\t\t\tvariables: variables ?? {},\n\t\t\tsubscriptionState,\n\t\t\tstartAckTimeoutId: undefined,\n\t\t});\n\n\t\t// Preparing payload for subscription message\n\n\t\tconst dataString = JSON.stringify(data);\n\t\tconst headerObj = {\n\t\t\t...(await this._awsRealTimeHeaderBasedAuth({\n\t\t\t\tapiKey,\n\t\t\t\tappSyncGraphqlEndpoint,\n\t\t\t\tauthenticationType,\n\t\t\t\tpayload: dataString,\n\t\t\t\tcanonicalUri: '',\n\t\t\t\tregion,\n\t\t\t\tadditionalHeaders,\n\t\t\t})),\n\t\t\t...(await graphql_headers()),\n\t\t\t...additionalHeaders,\n\t\t\t[USER_AGENT_HEADER]: Constants.userAgent,\n\t\t};\n\n\t\tconst subscriptionMessage = {\n\t\t\tid: subscriptionId,\n\t\t\tpayload: {\n\t\t\t\tdata: dataString,\n\t\t\t\textensions: {\n\t\t\t\t\tauthorization: {\n\t\t\t\t\t\t...headerObj,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\ttype: MESSAGE_TYPES.GQL_START,\n\t\t};\n\n\t\tconst stringToAWSRealTime = JSON.stringify(subscriptionMessage);\n\n\t\ttry {\n\t\t\tthis.connectionStateMonitor.record(CONNECTION_CHANGE.OPENING_CONNECTION);\n\t\t\tawait this._initializeWebSocketConnection({\n\t\t\t\tapiKey,\n\t\t\t\tappSyncGraphqlEndpoint,\n\t\t\t\tauthenticationType,\n\t\t\t\tregion,\n\t\t\t\tadditionalHeaders,\n\t\t\t});\n\t\t} catch (err) {\n\t\t\tlogger.debug({ err });\n\t\t\tconst message = err['message'] ?? '';\n\t\t\tthis.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED);\n\t\t\tobserver.error({\n\t\t\t\terrors: [\n\t\t\t\t\t{\n\t\t\t\t\t\t...new GraphQLError(`${CONTROL_MSG.CONNECTION_FAILED}: ${message}`),\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t});\n\t\t\tobserver.complete();\n\t\t\tconst { subscriptionFailedCallback } =\n\t\t\t\tthis.subscriptionObserverMap.get(subscriptionId) || {};\n\n\t\t\t// Notify concurrent unsubscription\n\t\t\tif (typeof subscriptionFailedCallback === 'function') {\n\t\t\t\tsubscriptionFailedCallback();\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\t// Potential race condition can occur when unsubscribe is called during _initializeWebSocketConnection.\n\t\t// E.g.unsubscribe gets invoked prior to finishing WebSocket handshake or START_ACK.\n\t\t// Both subscriptionFailedCallback and subscriptionReadyCallback are used to synchronized this.\n\n\t\tconst { subscriptionFailedCallback, subscriptionReadyCallback } =\n\t\t\tthis.subscriptionObserverMap.get(subscriptionId) ?? {};\n\n\t\t// This must be done before sending the message in order to be listening immediately\n\t\tthis.subscriptionObserverMap.set(subscriptionId, {\n\t\t\tobserver,\n\t\t\tsubscriptionState,\n\t\t\tquery: query ?? '',\n\t\t\tvariables: variables ?? {},\n\t\t\tsubscriptionReadyCallback,\n\t\t\tsubscriptionFailedCallback,\n\t\t\tstartAckTimeoutId: setTimeout(() => {\n\t\t\t\tthis._timeoutStartSubscriptionAck.call(this, subscriptionId);\n\t\t\t}, START_ACK_TIMEOUT),\n\t\t});\n\t\tif (this.awsRealTimeSocket) {\n\t\t\tthis.awsRealTimeSocket.send(stringToAWSRealTime);\n\t\t}\n\t}\n\n\t// Waiting that subscription has been connected before trying to unsubscribe\n\tprivate async _waitForSubscriptionToBeConnected(subscriptionId: string) {\n\t\tconst subscriptionObserver =\n\t\t\tthis.subscriptionObserverMap.get(subscriptionId);\n\t\tif (subscriptionObserver) {\n\t\t\tconst { subscriptionState } = subscriptionObserver;\n\t\t\t// This in case unsubscribe is invoked before sending start subscription message\n\t\t\tif (subscriptionState === SUBSCRIPTION_STATUS.PENDING) {\n\t\t\t\treturn new Promise((res, rej) => {\n\t\t\t\t\tconst { observer, subscriptionState, variables, query } =\n\t\t\t\t\t\tsubscriptionObserver;\n\t\t\t\t\tthis.subscriptionObserverMap.set(subscriptionId, {\n\t\t\t\t\t\tobserver,\n\t\t\t\t\t\tsubscriptionState,\n\t\t\t\t\t\tvariables,\n\t\t\t\t\t\tquery,\n\t\t\t\t\t\tsubscriptionReadyCallback: res,\n\t\t\t\t\t\tsubscriptionFailedCallback: rej,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _sendUnsubscriptionMessage(subscriptionId: string) {\n\t\ttry {\n\t\t\tif (\n\t\t\t\tthis.awsRealTimeSocket &&\n\t\t\t\tthis.awsRealTimeSocket.readyState === WebSocket.OPEN &&\n\t\t\t\tthis.socketStatus === SOCKET_STATUS.READY\n\t\t\t) {\n\t\t\t\t// Preparing unsubscribe message to stop receiving messages for that subscription\n\t\t\t\tconst unsubscribeMessage = {\n\t\t\t\t\tid: subscriptionId,\n\t\t\t\t\ttype: MESSAGE_TYPES.GQL_STOP,\n\t\t\t\t};\n\t\t\t\tconst stringToAWSRealTime = JSON.stringify(unsubscribeMessage);\n\t\t\t\tthis.awsRealTimeSocket.send(stringToAWSRealTime);\n\t\t\t}\n\t\t} catch (err) {\n\t\t\t// If GQL_STOP is not sent because of disconnection issue, then there is nothing the client can do\n\t\t\tlogger.debug({ err });\n\t\t}\n\t}\n\n\tprivate _removeSubscriptionObserver(subscriptionId: string) {\n\t\tthis.subscriptionObserverMap.delete(subscriptionId);\n\n\t\t// Verifying 1000ms after removing subscription in case there are new subscription unmount/mount\n\t\tsetTimeout(this._closeSocketIfRequired.bind(this), 1000);\n\t}\n\n\tprivate _closeSocketIfRequired() {\n\t\tif (this.subscriptionObserverMap.size > 0) {\n\t\t\t// Active subscriptions on the WebSocket\n\t\t\treturn;\n\t\t}\n\n\t\tif (!this.awsRealTimeSocket) {\n\t\t\tthis.socketStatus = SOCKET_STATUS.CLOSED;\n\t\t\treturn;\n\t\t}\n\n\t\tthis.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSING_CONNECTION);\n\n\t\tif (this.awsRealTimeSocket.bufferedAmount > 0) {\n\t\t\t// Still data on the WebSocket\n\t\t\tsetTimeout(this._closeSocketIfRequired.bind(this), 1000);\n\t\t} else {\n\t\t\tlogger.debug('closing WebSocket...');\n\t\t\tif (this.keepAliveTimeoutId) {\n\t\t\t\tclearTimeout(this.keepAliveTimeoutId);\n\t\t\t}\n\t\t\tif (this.keepAliveAlertTimeoutId) {\n\t\t\t\tclearTimeout(this.keepAliveAlertTimeoutId);\n\t\t\t}\n\t\t\tconst tempSocket = this.awsRealTimeSocket;\n\t\t\t// Cleaning callbacks to avoid race condition, socket still exists\n\t\t\ttempSocket.onclose = null;\n\t\t\ttempSocket.onerror = null;\n\t\t\ttempSocket.close(1000);\n\t\t\tthis.awsRealTimeSocket = undefined;\n\t\t\tthis.socketStatus = SOCKET_STATUS.CLOSED;\n\t\t\tthis.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED);\n\t\t}\n\t}\n\n\tprivate _handleIncomingSubscriptionMessage(message: MessageEvent) {\n\t\tlogger.debug(\n\t\t\t`subscription message from AWS AppSync RealTime: ${message.data}`\n\t\t);\n\t\tconst { id = '', payload, type } = JSON.parse(message.data);\n\t\tconst {\n\t\t\tobserver = null,\n\t\t\tquery = '',\n\t\t\tvariables = {},\n\t\t\tstartAckTimeoutId,\n\t\t\tsubscriptionReadyCallback,\n\t\t\tsubscriptionFailedCallback,\n\t\t} = this.subscriptionObserverMap.get(id) || {};\n\n\t\tlogger.debug({ id, observer, query, variables });\n\n\t\tif (type === MESSAGE_TYPES.GQL_DATA && payload && payload.data) {\n\t\t\tif (observer) {\n\t\t\t\tobserver.next(payload);\n\t\t\t} else {\n\t\t\t\tlogger.debug(`observer not found for id: ${id}`);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tif (type === MESSAGE_TYPES.GQL_START_ACK) {\n\t\t\tlogger.debug(\n\t\t\t\t`subscription ready for ${JSON.stringify({ query, variables })}`\n\t\t\t);\n\t\t\tif (typeof subscriptionReadyCallback === 'function') {\n\t\t\t\tsubscriptionReadyCallback();\n\t\t\t}\n\t\t\tif (startAckTimeoutId) clearTimeout(startAckTimeoutId);\n\t\t\tdispatchApiEvent(\n\t\t\t\tCONTROL_MSG.SUBSCRIPTION_ACK,\n\t\t\t\t{ query, variables },\n\t\t\t\t'Connection established for subscription'\n\t\t\t);\n\t\t\tconst subscriptionState = SUBSCRIPTION_STATUS.CONNECTED;\n\t\t\tif (observer) {\n\t\t\t\tthis.subscriptionObserverMap.set(id, {\n\t\t\t\t\tobserver,\n\t\t\t\t\tquery,\n\t\t\t\t\tvariables,\n\t\t\t\t\tstartAckTimeoutId: undefined,\n\t\t\t\t\tsubscriptionState,\n\t\t\t\t\tsubscriptionReadyCallback,\n\t\t\t\t\tsubscriptionFailedCallback,\n\t\t\t\t});\n\t\t\t}\n\t\t\tthis.connectionStateMonitor.record(\n\t\t\t\tCONNECTION_CHANGE.CONNECTION_ESTABLISHED\n\t\t\t);\n\n\t\t\treturn;\n\t\t}\n\n\t\tif (type === MESSAGE_TYPES.GQL_CONNECTION_KEEP_ALIVE) {\n\t\t\tif (this.keepAliveTimeoutId) clearTimeout(this.keepAliveTimeoutId);\n\t\t\tif (this.keepAliveAlertTimeoutId)\n\t\t\t\tclearTimeout(this.keepAliveAlertTimeoutId);\n\t\t\tthis.keepAliveTimeoutId = setTimeout(\n\t\t\t\t() => this._errorDisconnect(CONTROL_MSG.TIMEOUT_DISCONNECT),\n\t\t\t\tthis.keepAliveTimeout\n\t\t\t);\n\t\t\tthis.keepAliveAlertTimeoutId = setTimeout(() => {\n\t\t\t\tthis.connectionStateMonitor.record(CONNECTION_CHANGE.KEEP_ALIVE_MISSED);\n\t\t\t}, DEFAULT_KEEP_ALIVE_ALERT_TIMEOUT);\n\t\t\tthis.connectionStateMonitor.record(CONNECTION_CHANGE.KEEP_ALIVE);\n\t\t\treturn;\n\t\t}\n\n\t\tif (type === MESSAGE_TYPES.GQL_ERROR) {\n\t\t\tconst subscriptionState = SUBSCRIPTION_STATUS.FAILED;\n\t\t\tif (observer) {\n\t\t\t\tthis.subscriptionObserverMap.set(id, {\n\t\t\t\t\tobserver,\n\t\t\t\t\tquery,\n\t\t\t\t\tvariables,\n\t\t\t\t\tstartAckTimeoutId,\n\t\t\t\t\tsubscriptionReadyCallback,\n\t\t\t\t\tsubscriptionFailedCallback,\n\t\t\t\t\tsubscriptionState,\n\t\t\t\t});\n\n\t\t\t\tobserver.error({\n\t\t\t\t\terrors: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t...new GraphQLError(\n\t\t\t\t\t\t\t\t`${CONTROL_MSG.CONNECTION_FAILED}: ${JSON.stringify(payload)}`\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t});\n\t\t\t\tif (startAckTimeoutId) clearTimeout(startAckTimeoutId);\n\n\t\t\t\tobserver.complete();\n\t\t\t\tif (typeof subscriptionFailedCallback === 'function') {\n\t\t\t\t\tsubscriptionFailedCallback();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _errorDisconnect(msg: string) {\n\t\tlogger.debug(`Disconnect error: ${msg}`);\n\t\tthis.subscriptionObserverMap.forEach(({ observer }) => {\n\t\t\tif (observer && !observer.closed) {\n\t\t\t\tobserver.error({\n\t\t\t\t\terrors: [{ ...new GraphQLError(msg) }],\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t\tthis.subscriptionObserverMap.clear();\n\t\tif (this.awsRealTimeSocket) {\n\t\t\tthis.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED);\n\t\t\tthis.awsRealTimeSocket.close();\n\t\t}\n\n\t\tthis.socketStatus = SOCKET_STATUS.CLOSED;\n\t}\n\n\tprivate _timeoutStartSubscriptionAck(subscriptionId: string) {\n\t\tconst subscriptionObserver =\n\t\t\tthis.subscriptionObserverMap.get(subscriptionId);\n\t\tif (subscriptionObserver) {\n\t\t\tconst { observer, query, variables } = subscriptionObserver;\n\t\t\tif (!observer) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.subscriptionObserverMap.set(subscriptionId, {\n\t\t\t\tobserver,\n\t\t\t\tquery,\n\t\t\t\tvariables,\n\t\t\t\tsubscriptionState: SUBSCRIPTION_STATUS.FAILED,\n\t\t\t});\n\n\t\t\tif (observer && !observer.closed) {\n\t\t\t\tobserver.error({\n\t\t\t\t\terrors: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t...new GraphQLError(\n\t\t\t\t\t\t\t\t`Subscription timeout ${JSON.stringify({\n\t\t\t\t\t\t\t\t\tquery,\n\t\t\t\t\t\t\t\t\tvariables,\n\t\t\t\t\t\t\t\t})}`\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t});\n\t\t\t\t// Cleanup will be automatically executed\n\t\t\t\tobserver.complete();\n\t\t\t}\n\t\t\tlogger.debug(\n\t\t\t\t'timeoutStartSubscription',\n\t\t\t\tJSON.stringify({ query, variables })\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate _initializeWebSocketConnection({\n\t\tappSyncGraphqlEndpoint,\n\t\tauthenticationType,\n\t\tapiKey,\n\t\tregion,\n\t\tadditionalHeaders,\n\t}: AWSAppSyncRealTimeProviderOptions) {\n\t\tif (this.socketStatus === SOCKET_STATUS.READY) {\n\t\t\treturn;\n\t\t}\n\t\treturn new Promise(async (res, rej) => {\n\t\t\tthis.promiseArray.push({ res, rej });\n\n\t\t\tif (this.socketStatus === SOCKET_STATUS.CLOSED) {\n\t\t\t\ttry {\n\t\t\t\t\tthis.socketStatus = SOCKET_STATUS.CONNECTING;\n\n\t\t\t\t\tconst payloadString = '{}';\n\t\t\t\t\tconst headerString = JSON.stringify(\n\t\t\t\t\t\tawait this._awsRealTimeHeaderBasedAuth({\n\t\t\t\t\t\t\tauthenticationType,\n\t\t\t\t\t\t\tpayload: payloadString,\n\t\t\t\t\t\t\tcanonicalUri: '/connect',\n\t\t\t\t\t\t\tapiKey,\n\t\t\t\t\t\t\tappSyncGraphqlEndpoint,\n\t\t\t\t\t\t\tregion,\n\t\t\t\t\t\t\tadditionalHeaders,\n\t\t\t\t\t\t})\n\t\t\t\t\t);\n\t\t\t\t\tconst headerQs = Buffer.from(headerString).toString('base64');\n\n\t\t\t\t\tconst payloadQs = Buffer.from(payloadString).toString('base64');\n\n\t\t\t\t\tlet discoverableEndpoint = appSyncGraphqlEndpoint ?? '';\n\n\t\t\t\t\tif (this.isCustomDomain(discoverableEndpoint)) {\n\t\t\t\t\t\tdiscoverableEndpoint =\n\t\t\t\t\t\t\tdiscoverableEndpoint.concat(customDomainPath);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdiscoverableEndpoint = discoverableEndpoint\n\t\t\t\t\t\t\t.replace('appsync-api', 'appsync-realtime-api')\n\t\t\t\t\t\t\t.replace('gogi-beta', 'grt-beta');\n\t\t\t\t\t}\n\n\t\t\t\t\t// Creating websocket url with required query strings\n\t\t\t\t\tconst protocol = this.isSSLEnabled ? 'wss://' : 'ws://';\n\t\t\t\t\tdiscoverableEndpoint = discoverableEndpoint\n\t\t\t\t\t\t.replace('https://', protocol)\n\t\t\t\t\t\t.replace('http://', protocol);\n\n\t\t\t\t\tconst awsRealTimeUrl = `${discoverableEndpoint}?header=${headerQs}&payload=${payloadQs}`;\n\n\t\t\t\t\tawait this._initializeRetryableHandshake(awsRealTimeUrl);\n\n\t\t\t\t\tthis.promiseArray.forEach(({ res }) => {\n\t\t\t\t\t\tlogger.debug('Notifying connection successful');\n\t\t\t\t\t\tres();\n\t\t\t\t\t});\n\t\t\t\t\tthis.socketStatus = SOCKET_STATUS.READY;\n\t\t\t\t\tthis.promiseArray = [];\n\t\t\t\t} catch (err) {\n\t\t\t\t\tthis.promiseArray.forEach(({ rej }) => rej(err));\n\t\t\t\t\tthis.promiseArray = [];\n\t\t\t\t\tif (\n\t\t\t\t\t\tthis.awsRealTimeSocket &&\n\t\t\t\t\t\tthis.awsRealTimeSocket.readyState === WebSocket.OPEN\n\t\t\t\t\t) {\n\t\t\t\t\t\tthis.awsRealTimeSocket.close(3001);\n\t\t\t\t\t}\n\t\t\t\t\tthis.awsRealTimeSocket = undefined;\n\t\t\t\t\tthis.socketStatus = SOCKET_STATUS.CLOSED;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate async _initializeRetryableHandshake(awsRealTimeUrl: string) {\n\t\tlogger.debug(`Initializaling retryable Handshake`);\n\t\tawait jitteredExponentialRetry(\n\t\t\tthis._initializeHandshake.bind(this),\n\t\t\t[awsRealTimeUrl],\n\t\t\tMAX_DELAY_MS\n\t\t);\n\t}\n\n\tprivate async _initializeHandshake(awsRealTimeUrl: string) {\n\t\tlogger.debug(`Initializing handshake ${awsRealTimeUrl}`);\n\t\t// Because connecting the socket is async, is waiting until connection is open\n\t\t// Step 1: connect websocket\n\t\ttry {\n\t\t\tawait (() => {\n\t\t\t\treturn new Promise<void>((res, rej) => {\n\t\t\t\t\tconst newSocket = this.getNewWebSocket(awsRealTimeUrl, 'graphql-ws');\n\t\t\t\t\tnewSocket.onerror = () => {\n\t\t\t\t\t\tlogger.debug(`WebSocket connection error`);\n\t\t\t\t\t};\n\t\t\t\t\tnewSocket.onclose = () => {\n\t\t\t\t\t\tthis.connectionStateMonitor.record(\n\t\t\t\t\t\t\tCONNECTION_CHANGE.CONNECTION_FAILED\n\t\t\t\t\t\t);\n\t\t\t\t\t\trej(new Error('Connection handshake error'));\n\t\t\t\t\t};\n\t\t\t\t\tnewSocket.onopen = () => {\n\t\t\t\t\t\tthis.awsRealTimeSocket = newSocket;\n\t\t\t\t\t\treturn res();\n\t\t\t\t\t};\n\t\t\t\t});\n\t\t\t})();\n\n\t\t\t// Step 2: wait for ack from AWS AppSyncReaTime after sending init\n\t\t\tawait (() => {\n\t\t\t\treturn new Promise((res, rej) => {\n\t\t\t\t\tif (this.awsRealTimeSocket) {\n\t\t\t\t\t\tlet ackOk = false;\n\t\t\t\t\t\tthis.awsRealTimeSocket.onerror = error => {\n\t\t\t\t\t\t\tlogger.debug(`WebSocket error ${JSON.stringify(error)}`);\n\t\t\t\t\t\t};\n\t\t\t\t\t\tthis.awsRealTimeSocket.onclose = event => {\n\t\t\t\t\t\t\tlogger.debug(`WebSocket closed ${event.reason}`);\n\t\t\t\t\t\t\trej(new Error(JSON.stringify(event)));\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tthis.awsRealTimeSocket.onmessage = (message: MessageEvent) => {\n\t\t\t\t\t\t\tlogger.debug(\n\t\t\t\t\t\t\t\t`subscription message from AWS AppSyncRealTime: ${message.data} `\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tconst data = JSON.parse(message.data);\n\t\t\t\t\t\t\tconst {\n\t\t\t\t\t\t\t\ttype,\n\t\t\t\t\t\t\t\tpayload: {\n\t\t\t\t\t\t\t\t\tconnectionTimeoutMs = DEFAULT_KEEP_ALIVE_TIMEOUT,\n\t\t\t\t\t\t\t\t} = {},\n\t\t\t\t\t\t\t} = data;\n\t\t\t\t\t\t\tif (type === MESSAGE_TYPES.GQL_CONNECTION_ACK) {\n\t\t\t\t\t\t\t\tackOk = true;\n\t\t\t\t\t\t\t\tif (this.awsRealTimeSocket) {\n\t\t\t\t\t\t\t\t\tthis.keepAliveTimeout = connectionTimeoutMs;\n\t\t\t\t\t\t\t\t\tthis.awsRealTimeSocket.onmessage =\n\t\t\t\t\t\t\t\t\t\tthis._handleIncomingSubscriptionMessage.bind(this);\n\t\t\t\t\t\t\t\t\tthis.awsRealTimeSocket.onerror = err => {\n\t\t\t\t\t\t\t\t\t\tlogger.debug(err);\n\t\t\t\t\t\t\t\t\t\tthis._errorDisconnect(CONTROL_MSG.CONNECTION_CLOSED);\n\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\tthis.awsRealTimeSocket.onclose = event => {\n\t\t\t\t\t\t\t\t\t\tlogger.debug(`WebSocket closed ${event.reason}`);\n\t\t\t\t\t\t\t\t\t\tthis._errorDisconnect(CONTROL_MSG.CONNECTION_CLOSED);\n\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tres('Cool, connected to AWS AppSyncRealTime');\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (type === MESSAGE_TYPES.GQL_CONNECTION_ERROR) {\n\t\t\t\t\t\t\t\tconst {\n\t\t\t\t\t\t\t\t\tpayload: {\n\t\t\t\t\t\t\t\t\t\terrors: [{ errorType = '', errorCode = 0 } = {}] = [],\n\t\t\t\t\t\t\t\t\t} = {},\n\t\t\t\t\t\t\t\t} = data;\n\n\t\t\t\t\t\t\t\trej({ errorType, errorCode });\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tconst gqlInit = {\n\t\t\t\t\t\t\ttype: MESSAGE_TYPES.GQL_CONNECTION_INIT,\n\t\t\t\t\t\t};\n\t\t\t\t\t\tthis.awsRealTimeSocket.send(JSON.stringify(gqlInit));\n\n\t\t\t\t\t\tconst checkAckOk = (ackOk: boolean) => {\n\t\t\t\t\t\t\tif (!ackOk) {\n\t\t\t\t\t\t\t\tthis.connectionStateMonitor.record(\n\t\t\t\t\t\t\t\t\tCONNECTION_CHANGE.CONNECTION_FAILED\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\trej(\n\t\t\t\t\t\t\t\t\tnew Error(\n\t\t\t\t\t\t\t\t\t\t`Connection timeout: ack from AWSAppSyncRealTime was not received after ${CONNECTION_INIT_TIMEOUT} ms`\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tsetTimeout(() => checkAckOk(ackOk), CONNECTION_INIT_TIMEOUT);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t})();\n\t\t} catch (err) {\n\t\t\tconst { errorType, errorCode } = err as {\n\t\t\t\terrorType: string;\n\t\t\t\terrorCode: number;\n\t\t\t};\n\n\t\t\tif (NON_RETRYABLE_CODES.includes(errorCode)) {\n\t\t\t\tthrow new NonRetryableError(errorType);\n\t\t\t} else if (errorType) {\n\t\t\t\tthrow new Error(errorType);\n\t\t\t} else {\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async _awsRealTimeHeaderBasedAuth({\n\t\tauthenticationType,\n\t\tpayload,\n\t\tcanonicalUri,\n\t\tappSyncGraphqlEndpoint,\n\t\tapiKey,\n\t\tregion,\n\t\tadditionalHeaders,\n\t}: AWSAppSyncRealTimeProviderOptions): Promise<any> {\n\t\tconst headerHandler: {\n\t\t\t[key in GraphqlAuthModes]: (AWSAppSyncRealTimeAuthInput) => {};\n\t\t} = {\n\t\t\tAPI_KEY: this._awsRealTimeApiKeyHeader.bind(this),\n\t\t\tAWS_IAM: this._awsRealTimeIAMHeader.bind(this),\n\t\t\tOPENID_CONNECT: this._awsRealTimeOPENIDHeader.bind(this),\n\t\t\tAMAZON_COGNITO_USER_POOLS: this._awsRealTimeCUPHeader.bind(this),\n\t\t\tAWS_LAMBDA: this._customAuthHeader,\n\t\t};\n\n\t\tif (!authenticationType || !headerHandler[authenticationType]) {\n\t\t\tlogger.debug(`Authentication type ${authenticationType} not supported`);\n\t\t\treturn '';\n\t\t} else {\n\t\t\tconst handler = headerHandler[authenticationType];\n\n\t\t\tconst { host } = url.parse(appSyncGraphqlEndpoint ?? '');\n\n\t\t\tlogger.debug(`Authenticating with ${authenticationType}`);\n\n\t\t\tconst result = await handler({\n\t\t\t\tpayload,\n\t\t\t\tcanonicalUri,\n\t\t\t\tappSyncGraphqlEndpoint,\n\t\t\t\tapiKey,\n\t\t\t\tregion,\n\t\t\t\thost,\n\t\t\t\tadditionalHeaders,\n\t\t\t});\n\n\t\t\treturn result;\n\t\t}\n\t}\n\n\tprivate async _awsRealTimeCUPHeader({ host }: AWSAppSyncRealTimeAuthInput) {\n\t\tconst session = await Auth.currentSession();\n\t\treturn {\n\t\t\tAuthorization: session.getAccessToken().getJwtToken(),\n\t\t\thost,\n\t\t};\n\t}\n\n\tprivate async _awsRealTimeOPENIDHeader({\n\t\thost,\n\t}: AWSAppSyncRealTimeAuthInput) {\n\t\tlet token;\n\t\t// backwards compatibility\n\t\tconst federatedInfo = await Cache.getItem('federatedInfo');\n\t\tif (federatedInfo) {\n\t\t\ttoken = federatedInfo.token;\n\t\t} else {\n\t\t\tconst currentUser = await Auth.currentAuthenticatedUser();\n\t\t\tif (currentUser) {\n\t\t\t\ttoken = currentUser.token;\n\t\t\t}\n\t\t}\n\t\tif (!token) {\n\t\t\tthrow new Error('No federated jwt');\n\t\t}\n\t\treturn {\n\t\t\tAuthorization: token,\n\t\t\thost,\n\t\t};\n\t}\n\n\tprivate async _awsRealTimeApiKeyHeader({\n\t\tapiKey,\n\t\thost,\n\t}: AWSAppSyncRealTimeAuthInput) {\n\t\tconst dt = new Date();\n\t\tconst dtStr = dt.toISOString().replace(/[:\\-]|\\.\\d{3}/g, '');\n\n\t\treturn {\n\t\t\thost,\n\t\t\t'x-amz-date': dtStr,\n\t\t\t'x-api-key': apiKey,\n\t\t};\n\t}\n\n\tprivate async _awsRealTimeIAMHeader({\n\t\tpayload,\n\t\tcanonicalUri,\n\t\tappSyncGraphqlEndpoint,\n\t\tregion,\n\t}: AWSAppSyncRealTimeAuthInput) {\n\t\tconst endpointInfo = {\n\t\t\tregion,\n\t\t\tservice: 'appsync',\n\t\t};\n\n\t\tconst credentialsOK = await this._ensureCredentials();\n\t\tif (!credentialsOK) {\n\t\t\tthrow new Error('No credentials');\n\t\t}\n\t\tconst creds = await Credentials.get().then((credentials: any) => {\n\t\t\tconst { secretAccessKey, accessKeyId, sessionToken } =\n\t\t\t\tcredentials as ICredentials;\n\n\t\t\treturn {\n\t\t\t\tsecret_key: secretAccessKey,\n\t\t\t\taccess_key: accessKeyId,\n\t\t\t\tsession_token: sessionToken,\n\t\t\t};\n\t\t});\n\n\t\tconst request = {\n\t\t\turl: `${appSyncGraphqlEndpoint}${canonicalUri}`,\n\t\t\tdata: payload,\n\t\t\tmethod: 'POST',\n\t\t\theaders: { ...AWS_APPSYNC_REALTIME_HEADERS },\n\t\t};\n\n\t\tconst signed_params = Signer.sign(request, creds, endpointInfo);\n\t\treturn signed_params.headers;\n\t}\n\n\tprivate _customAuthHeader({\n\t\thost,\n\t\tadditionalHeaders,\n\t}: AWSAppSyncRealTimeAuthInput) {\n\t\tif (!additionalHeaders || !additionalHeaders['Authorization']) {\n\t\t\tthrow new Error('No auth token specified');\n\t\t}\n\n\t\treturn {\n\t\t\tAuthorization: additionalHeaders.Authorization,\n\t\t\thost,\n\t\t};\n\t}\n\n\t/**\n\t * @private\n\t */\n\t_ensureCredentials() {\n\t\treturn Credentials.get()\n\t\t\t.then((credentials: any) => {\n\t\t\t\tif (!credentials) return false;\n\t\t\t\tconst cred = Credentials.shear(credentials);\n\t\t\t\tlogger.debug('set credentials for AWSAppSyncRealTimeProvider', cred);\n\n\t\t\t\treturn true;\n\t\t\t})\n\t\t\t.catch((err: any) => {\n\t\t\t\tlogger.warn('ensure credentials error', err);\n\t\t\t\treturn false;\n\t\t\t});\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}