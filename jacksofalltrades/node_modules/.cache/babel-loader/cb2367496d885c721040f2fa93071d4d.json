{"ast":null,"code":"import _slicedToArray from \"C:/Users/lmore/OneDrive/Documents/GitHub/JacksOfAllTrades/jacksofalltrades/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { observeElementRect as t } from \"@radix-ui/rect\";\nimport * as r from \"react\";\nexport function useRect(e) {\n  var _r$useState = r.useState(),\n      _r$useState2 = _slicedToArray(_r$useState, 2),\n      o = _r$useState2[0],\n      c = _r$useState2[1];\n\n  return r.useEffect(function () {\n    if (e) {\n      var _r = t(e, c);\n\n      return function () {\n        c(void 0), _r();\n      };\n    }\n  }, [e]), o;\n}","map":{"version":3,"mappings":";;;OASA,SAASA,OAAT,CAAiBC,CAAjB,EAAiBA;EACf,kBAAwBC,EAAMC,QAAND,EAAxB;EAAA;EAAA,IAAOE,CAAP;EAAA,IAAaC,CAAb;;EAWA,OAVAH,EAAMI,SAANJ,CAAgB;IACd,IAAID,CAAJ,EAAgB;MACd,IAAMM,KAAYC,EAAmBP,CAAnBO,EAA+BH,CAA/BG,CAAlB;;MACA,OAAO;QACLH,OAAQI,CAARJ,GACAE,IADAF;MACAE,CAFF;IAEEA;EAAAA,CALNL,EASG,CAACD,CAAD,CATHC,GAUOE,CAAP;AAAOA","names":["useRect","measurable","React","useState","rect","setRect","useEffect","unobserve","observeElementRect","undefined"],"sources":["C:\\Users\\lmore\\OneDrive\\Documents\\GitHub\\JacksOfAllTrades\\jacksofalltrades\\node_modules\\@aws-amplify\\ui-react\\node_modules\\@radix-ui\\react-dropdown-menu\\node_modules\\@radix-ui\\react-menu\\node_modules\\@radix-ui\\react-popper\\node_modules\\@radix-ui\\react-use-rect\\dist\\packages\\react\\use-rect\\src\\useRect.tsx"],"sourcesContent":["import * as React from 'react';\nimport { observeElementRect } from '@radix-ui/rect';\n\nimport type { Measurable } from '@radix-ui/rect';\n\n/**\n * Use this custom hook to get access to an element's rect (getBoundingClientRect)\n * and observe it along time.\n */\nfunction useRect(measurable: Measurable | null) {\n  const [rect, setRect] = React.useState<ClientRect>();\n  React.useEffect(() => {\n    if (measurable) {\n      const unobserve = observeElementRect(measurable, setRect);\n      return () => {\n        setRect(undefined);\n        unobserve();\n      };\n    }\n    return;\n  }, [measurable]);\n  return rect;\n}\n\nexport { useRect };\n"]},"metadata":{},"sourceType":"module"}