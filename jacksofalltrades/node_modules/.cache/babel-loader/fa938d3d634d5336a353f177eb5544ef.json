{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { HttpRequest as __HttpRequest } from \"@aws-sdk/protocol-http\";\nimport { extendedEncodeURIComponent as __extendedEncodeURIComponent } from \"@aws-sdk/smithy-client\";\nexport var serializeAws_restJson1DeleteLexiconCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, body, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = {};\n          resolvedPath = \"/v1/lexicons/{Name}\";\n\n          if (input.Name !== undefined) {\n            labelValue = input.Name;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Name.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Name}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Name.\");\n          }\n\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"DELETE\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1DescribeVoicesCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, query, body, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = {};\n          resolvedPath = \"/v1/voices\";\n          query = __assign(__assign(__assign(__assign({}, input.Engine !== undefined && {\n            Engine: input.Engine\n          }), input.LanguageCode !== undefined && {\n            LanguageCode: input.LanguageCode\n          }), input.IncludeAdditionalLanguageCodes !== undefined && {\n            IncludeAdditionalLanguageCodes: input.IncludeAdditionalLanguageCodes.toString()\n          }), input.NextToken !== undefined && {\n            NextToken: input.NextToken\n          });\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1GetLexiconCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, body, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = {};\n          resolvedPath = \"/v1/lexicons/{Name}\";\n\n          if (input.Name !== undefined) {\n            labelValue = input.Name;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Name.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Name}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Name.\");\n          }\n\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1GetSpeechSynthesisTaskCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, body, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = {};\n          resolvedPath = \"/v1/synthesisTasks/{TaskId}\";\n\n          if (input.TaskId !== undefined) {\n            labelValue = input.TaskId;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: TaskId.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{TaskId}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: TaskId.\");\n          }\n\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1ListLexiconsCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, query, body, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = {};\n          resolvedPath = \"/v1/lexicons\";\n          query = __assign({}, input.NextToken !== undefined && {\n            NextToken: input.NextToken\n          });\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1ListSpeechSynthesisTasksCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, query, body, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = {};\n          resolvedPath = \"/v1/synthesisTasks\";\n          query = __assign(__assign(__assign({}, input.MaxResults !== undefined && {\n            MaxResults: input.MaxResults.toString()\n          }), input.NextToken !== undefined && {\n            NextToken: input.NextToken\n          }), input.Status !== undefined && {\n            Status: input.Status\n          });\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1PutLexiconCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, body, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = {\n            \"content-type\": \"application/json\"\n          };\n          resolvedPath = \"/v1/lexicons/{Name}\";\n\n          if (input.Name !== undefined) {\n            labelValue = input.Name;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Name.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Name}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Name.\");\n          }\n\n          body = JSON.stringify(__assign({}, input.Content !== undefined && input.Content !== null && {\n            Content: input.Content\n          }));\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"PUT\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1StartSpeechSynthesisTaskCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, body, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = {\n            \"content-type\": \"application/json\"\n          };\n          resolvedPath = \"/v1/synthesisTasks\";\n          body = JSON.stringify(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({}, input.Engine !== undefined && input.Engine !== null && {\n            Engine: input.Engine\n          }), input.LanguageCode !== undefined && input.LanguageCode !== null && {\n            LanguageCode: input.LanguageCode\n          }), input.LexiconNames !== undefined && input.LexiconNames !== null && {\n            LexiconNames: serializeAws_restJson1LexiconNameList(input.LexiconNames, context)\n          }), input.OutputFormat !== undefined && input.OutputFormat !== null && {\n            OutputFormat: input.OutputFormat\n          }), input.OutputS3BucketName !== undefined && input.OutputS3BucketName !== null && {\n            OutputS3BucketName: input.OutputS3BucketName\n          }), input.OutputS3KeyPrefix !== undefined && input.OutputS3KeyPrefix !== null && {\n            OutputS3KeyPrefix: input.OutputS3KeyPrefix\n          }), input.SampleRate !== undefined && input.SampleRate !== null && {\n            SampleRate: input.SampleRate\n          }), input.SnsTopicArn !== undefined && input.SnsTopicArn !== null && {\n            SnsTopicArn: input.SnsTopicArn\n          }), input.SpeechMarkTypes !== undefined && input.SpeechMarkTypes !== null && {\n            SpeechMarkTypes: serializeAws_restJson1SpeechMarkTypeList(input.SpeechMarkTypes, context)\n          }), input.Text !== undefined && input.Text !== null && {\n            Text: input.Text\n          }), input.TextType !== undefined && input.TextType !== null && {\n            TextType: input.TextType\n          }), input.VoiceId !== undefined && input.VoiceId !== null && {\n            VoiceId: input.VoiceId\n          }));\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"POST\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1SynthesizeSpeechCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, body, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = {\n            \"content-type\": \"application/json\"\n          };\n          resolvedPath = \"/v1/speech\";\n          body = JSON.stringify(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({}, input.Engine !== undefined && input.Engine !== null && {\n            Engine: input.Engine\n          }), input.LanguageCode !== undefined && input.LanguageCode !== null && {\n            LanguageCode: input.LanguageCode\n          }), input.LexiconNames !== undefined && input.LexiconNames !== null && {\n            LexiconNames: serializeAws_restJson1LexiconNameList(input.LexiconNames, context)\n          }), input.OutputFormat !== undefined && input.OutputFormat !== null && {\n            OutputFormat: input.OutputFormat\n          }), input.SampleRate !== undefined && input.SampleRate !== null && {\n            SampleRate: input.SampleRate\n          }), input.SpeechMarkTypes !== undefined && input.SpeechMarkTypes !== null && {\n            SpeechMarkTypes: serializeAws_restJson1SpeechMarkTypeList(input.SpeechMarkTypes, context)\n          }), input.Text !== undefined && input.Text !== null && {\n            Text: input.Text\n          }), input.TextType !== undefined && input.TextType !== null && {\n            TextType: input.TextType\n          }), input.VoiceId !== undefined && input.VoiceId !== null && {\n            VoiceId: input.VoiceId\n          }));\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"POST\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var deserializeAws_restJson1DeleteLexiconCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restJson1DeleteLexiconCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output)\n          };\n          return [4\n          /*yield*/\n          , collectBody(output.body, context)];\n\n        case 1:\n          _a.sent();\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restJson1DeleteLexiconCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;\n\n    var _e;\n\n    return __generator(this, function (_f) {\n      switch (_f.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _e = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n\n          switch (_b) {\n            case \"LexiconNotFoundException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"com.amazonaws.polly#LexiconNotFoundException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"ServiceFailureException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"com.amazonaws.polly#ServiceFailureException\":\n              return [3\n              /*break*/\n              , 4];\n          }\n\n          return [3\n          /*break*/\n          , 6];\n\n        case 2:\n          _c = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1LexiconNotFoundExceptionResponse(parsedOutput, context)];\n\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_f.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 7];\n\n        case 4:\n          _d = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)];\n\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_f.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 7];\n\n        case 6:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _f.label = 7;\n\n        case 7:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restJson1DescribeVoicesCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restJson1DescribeVoicesCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            NextToken: undefined,\n            Voices: undefined\n          };\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          data = _a.sent();\n\n          if (data.NextToken !== undefined && data.NextToken !== null) {\n            contents.NextToken = data.NextToken;\n          }\n\n          if (data.Voices !== undefined && data.Voices !== null) {\n            contents.Voices = deserializeAws_restJson1VoiceList(data.Voices, context);\n          }\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restJson1DescribeVoicesCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;\n\n    var _e;\n\n    return __generator(this, function (_f) {\n      switch (_f.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _e = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n\n          switch (_b) {\n            case \"InvalidNextTokenException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"com.amazonaws.polly#InvalidNextTokenException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"ServiceFailureException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"com.amazonaws.polly#ServiceFailureException\":\n              return [3\n              /*break*/\n              , 4];\n          }\n\n          return [3\n          /*break*/\n          , 6];\n\n        case 2:\n          _c = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1InvalidNextTokenExceptionResponse(parsedOutput, context)];\n\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_f.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 7];\n\n        case 4:\n          _d = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)];\n\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_f.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 7];\n\n        case 6:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _f.label = 7;\n\n        case 7:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restJson1GetLexiconCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restJson1GetLexiconCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            Lexicon: undefined,\n            LexiconAttributes: undefined\n          };\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          data = _a.sent();\n\n          if (data.Lexicon !== undefined && data.Lexicon !== null) {\n            contents.Lexicon = deserializeAws_restJson1Lexicon(data.Lexicon, context);\n          }\n\n          if (data.LexiconAttributes !== undefined && data.LexiconAttributes !== null) {\n            contents.LexiconAttributes = deserializeAws_restJson1LexiconAttributes(data.LexiconAttributes, context);\n          }\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restJson1GetLexiconCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;\n\n    var _e;\n\n    return __generator(this, function (_f) {\n      switch (_f.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _e = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n\n          switch (_b) {\n            case \"LexiconNotFoundException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"com.amazonaws.polly#LexiconNotFoundException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"ServiceFailureException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"com.amazonaws.polly#ServiceFailureException\":\n              return [3\n              /*break*/\n              , 4];\n          }\n\n          return [3\n          /*break*/\n          , 6];\n\n        case 2:\n          _c = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1LexiconNotFoundExceptionResponse(parsedOutput, context)];\n\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_f.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 7];\n\n        case 4:\n          _d = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)];\n\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_f.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 7];\n\n        case 6:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _f.label = 7;\n\n        case 7:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restJson1GetSpeechSynthesisTaskCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restJson1GetSpeechSynthesisTaskCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            SynthesisTask: undefined\n          };\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          data = _a.sent();\n\n          if (data.SynthesisTask !== undefined && data.SynthesisTask !== null) {\n            contents.SynthesisTask = deserializeAws_restJson1SynthesisTask(data.SynthesisTask, context);\n          }\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restJson1GetSpeechSynthesisTaskCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;\n\n    var _f;\n\n    return __generator(this, function (_g) {\n      switch (_g.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _f = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n\n          switch (_b) {\n            case \"InvalidTaskIdException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"com.amazonaws.polly#InvalidTaskIdException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"ServiceFailureException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"com.amazonaws.polly#ServiceFailureException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"SynthesisTaskNotFoundException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"com.amazonaws.polly#SynthesisTaskNotFoundException\":\n              return [3\n              /*break*/\n              , 6];\n          }\n\n          return [3\n          /*break*/\n          , 8];\n\n        case 2:\n          _c = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1InvalidTaskIdExceptionResponse(parsedOutput, context)];\n\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_g.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 9];\n\n        case 4:\n          _d = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)];\n\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_g.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 9];\n\n        case 6:\n          _e = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1SynthesisTaskNotFoundExceptionResponse(parsedOutput, context)];\n\n        case 7:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_g.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 9];\n\n        case 8:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _g.label = 9;\n\n        case 9:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restJson1ListLexiconsCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restJson1ListLexiconsCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            Lexicons: undefined,\n            NextToken: undefined\n          };\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          data = _a.sent();\n\n          if (data.Lexicons !== undefined && data.Lexicons !== null) {\n            contents.Lexicons = deserializeAws_restJson1LexiconDescriptionList(data.Lexicons, context);\n          }\n\n          if (data.NextToken !== undefined && data.NextToken !== null) {\n            contents.NextToken = data.NextToken;\n          }\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restJson1ListLexiconsCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;\n\n    var _e;\n\n    return __generator(this, function (_f) {\n      switch (_f.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _e = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n\n          switch (_b) {\n            case \"InvalidNextTokenException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"com.amazonaws.polly#InvalidNextTokenException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"ServiceFailureException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"com.amazonaws.polly#ServiceFailureException\":\n              return [3\n              /*break*/\n              , 4];\n          }\n\n          return [3\n          /*break*/\n          , 6];\n\n        case 2:\n          _c = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1InvalidNextTokenExceptionResponse(parsedOutput, context)];\n\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_f.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 7];\n\n        case 4:\n          _d = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)];\n\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_f.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 7];\n\n        case 6:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _f.label = 7;\n\n        case 7:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restJson1ListSpeechSynthesisTasksCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restJson1ListSpeechSynthesisTasksCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            NextToken: undefined,\n            SynthesisTasks: undefined\n          };\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          data = _a.sent();\n\n          if (data.NextToken !== undefined && data.NextToken !== null) {\n            contents.NextToken = data.NextToken;\n          }\n\n          if (data.SynthesisTasks !== undefined && data.SynthesisTasks !== null) {\n            contents.SynthesisTasks = deserializeAws_restJson1SynthesisTasks(data.SynthesisTasks, context);\n          }\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restJson1ListSpeechSynthesisTasksCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;\n\n    var _e;\n\n    return __generator(this, function (_f) {\n      switch (_f.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _e = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n\n          switch (_b) {\n            case \"InvalidNextTokenException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"com.amazonaws.polly#InvalidNextTokenException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"ServiceFailureException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"com.amazonaws.polly#ServiceFailureException\":\n              return [3\n              /*break*/\n              , 4];\n          }\n\n          return [3\n          /*break*/\n          , 6];\n\n        case 2:\n          _c = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1InvalidNextTokenExceptionResponse(parsedOutput, context)];\n\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_f.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 7];\n\n        case 4:\n          _d = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)];\n\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_f.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 7];\n\n        case 6:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _f.label = 7;\n\n        case 7:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restJson1PutLexiconCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restJson1PutLexiconCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output)\n          };\n          return [4\n          /*yield*/\n          , collectBody(output.body, context)];\n\n        case 1:\n          _a.sent();\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restJson1PutLexiconCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;\n\n    var _k;\n\n    return __generator(this, function (_l) {\n      switch (_l.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _k = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_k.body = _l.sent(), _k)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n\n          switch (_b) {\n            case \"InvalidLexiconException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"com.amazonaws.polly#InvalidLexiconException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"LexiconSizeExceededException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"com.amazonaws.polly#LexiconSizeExceededException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"MaxLexemeLengthExceededException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"com.amazonaws.polly#MaxLexemeLengthExceededException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"MaxLexiconsNumberExceededException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"com.amazonaws.polly#MaxLexiconsNumberExceededException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"ServiceFailureException\":\n              return [3\n              /*break*/\n              , 10];\n\n            case \"com.amazonaws.polly#ServiceFailureException\":\n              return [3\n              /*break*/\n              , 10];\n\n            case \"UnsupportedPlsAlphabetException\":\n              return [3\n              /*break*/\n              , 12];\n\n            case \"com.amazonaws.polly#UnsupportedPlsAlphabetException\":\n              return [3\n              /*break*/\n              , 12];\n\n            case \"UnsupportedPlsLanguageException\":\n              return [3\n              /*break*/\n              , 14];\n\n            case \"com.amazonaws.polly#UnsupportedPlsLanguageException\":\n              return [3\n              /*break*/\n              , 14];\n          }\n\n          return [3\n          /*break*/\n          , 16];\n\n        case 2:\n          _c = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1InvalidLexiconExceptionResponse(parsedOutput, context)];\n\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_l.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 17];\n\n        case 4:\n          _d = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1LexiconSizeExceededExceptionResponse(parsedOutput, context)];\n\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_l.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 17];\n\n        case 6:\n          _e = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1MaxLexemeLengthExceededExceptionResponse(parsedOutput, context)];\n\n        case 7:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_l.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 17];\n\n        case 8:\n          _f = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1MaxLexiconsNumberExceededExceptionResponse(parsedOutput, context)];\n\n        case 9:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_l.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 17];\n\n        case 10:\n          _g = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)];\n\n        case 11:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_l.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 17];\n\n        case 12:\n          _h = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1UnsupportedPlsAlphabetExceptionResponse(parsedOutput, context)];\n\n        case 13:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([_l.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 17];\n\n        case 14:\n          _j = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1UnsupportedPlsLanguageExceptionResponse(parsedOutput, context)];\n\n        case 15:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([_l.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 17];\n\n        case 16:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _l.label = 17;\n\n        case 17:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restJson1StartSpeechSynthesisTaskCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restJson1StartSpeechSynthesisTaskCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            SynthesisTask: undefined\n          };\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          data = _a.sent();\n\n          if (data.SynthesisTask !== undefined && data.SynthesisTask !== null) {\n            contents.SynthesisTask = deserializeAws_restJson1SynthesisTask(data.SynthesisTask, context);\n          }\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restJson1StartSpeechSynthesisTaskCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, parsedBody, message;\n\n    var _q;\n\n    return __generator(this, function (_r) {\n      switch (_r.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _q = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_q.body = _r.sent(), _q)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n\n          switch (_b) {\n            case \"EngineNotSupportedException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"com.amazonaws.polly#EngineNotSupportedException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"InvalidS3BucketException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"com.amazonaws.polly#InvalidS3BucketException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"InvalidS3KeyException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"com.amazonaws.polly#InvalidS3KeyException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"InvalidSampleRateException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"com.amazonaws.polly#InvalidSampleRateException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"InvalidSnsTopicArnException\":\n              return [3\n              /*break*/\n              , 10];\n\n            case \"com.amazonaws.polly#InvalidSnsTopicArnException\":\n              return [3\n              /*break*/\n              , 10];\n\n            case \"InvalidSsmlException\":\n              return [3\n              /*break*/\n              , 12];\n\n            case \"com.amazonaws.polly#InvalidSsmlException\":\n              return [3\n              /*break*/\n              , 12];\n\n            case \"LanguageNotSupportedException\":\n              return [3\n              /*break*/\n              , 14];\n\n            case \"com.amazonaws.polly#LanguageNotSupportedException\":\n              return [3\n              /*break*/\n              , 14];\n\n            case \"LexiconNotFoundException\":\n              return [3\n              /*break*/\n              , 16];\n\n            case \"com.amazonaws.polly#LexiconNotFoundException\":\n              return [3\n              /*break*/\n              , 16];\n\n            case \"MarksNotSupportedForFormatException\":\n              return [3\n              /*break*/\n              , 18];\n\n            case \"com.amazonaws.polly#MarksNotSupportedForFormatException\":\n              return [3\n              /*break*/\n              , 18];\n\n            case \"ServiceFailureException\":\n              return [3\n              /*break*/\n              , 20];\n\n            case \"com.amazonaws.polly#ServiceFailureException\":\n              return [3\n              /*break*/\n              , 20];\n\n            case \"SsmlMarksNotSupportedForTextTypeException\":\n              return [3\n              /*break*/\n              , 22];\n\n            case \"com.amazonaws.polly#SsmlMarksNotSupportedForTextTypeException\":\n              return [3\n              /*break*/\n              , 22];\n\n            case \"TextLengthExceededException\":\n              return [3\n              /*break*/\n              , 24];\n\n            case \"com.amazonaws.polly#TextLengthExceededException\":\n              return [3\n              /*break*/\n              , 24];\n          }\n\n          return [3\n          /*break*/\n          , 26];\n\n        case 2:\n          _c = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1EngineNotSupportedExceptionResponse(parsedOutput, context)];\n\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_r.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 27];\n\n        case 4:\n          _d = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1InvalidS3BucketExceptionResponse(parsedOutput, context)];\n\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_r.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 27];\n\n        case 6:\n          _e = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1InvalidS3KeyExceptionResponse(parsedOutput, context)];\n\n        case 7:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_r.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 27];\n\n        case 8:\n          _f = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1InvalidSampleRateExceptionResponse(parsedOutput, context)];\n\n        case 9:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_r.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 27];\n\n        case 10:\n          _g = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1InvalidSnsTopicArnExceptionResponse(parsedOutput, context)];\n\n        case 11:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_r.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 27];\n\n        case 12:\n          _h = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1InvalidSsmlExceptionResponse(parsedOutput, context)];\n\n        case 13:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([_r.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 27];\n\n        case 14:\n          _j = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1LanguageNotSupportedExceptionResponse(parsedOutput, context)];\n\n        case 15:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([_r.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 27];\n\n        case 16:\n          _k = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1LexiconNotFoundExceptionResponse(parsedOutput, context)];\n\n        case 17:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([_r.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 27];\n\n        case 18:\n          _l = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1MarksNotSupportedForFormatExceptionResponse(parsedOutput, context)];\n\n        case 19:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([_r.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 27];\n\n        case 20:\n          _m = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)];\n\n        case 21:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _m.concat([_r.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 27];\n\n        case 22:\n          _o = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1SsmlMarksNotSupportedForTextTypeExceptionResponse(parsedOutput, context)];\n\n        case 23:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _o.concat([_r.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 27];\n\n        case 24:\n          _p = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1TextLengthExceededExceptionResponse(parsedOutput, context)];\n\n        case 25:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _p.concat([_r.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 27];\n\n        case 26:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _r.label = 27;\n\n        case 27:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restJson1SynthesizeSpeechCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return [2\n        /*return*/\n        , deserializeAws_restJson1SynthesizeSpeechCommandError(output, context)];\n      }\n\n      contents = {\n        $metadata: deserializeMetadata(output),\n        AudioStream: undefined,\n        ContentType: undefined,\n        RequestCharacters: undefined\n      };\n\n      if (output.headers[\"content-type\"] !== undefined) {\n        contents.ContentType = output.headers[\"content-type\"];\n      }\n\n      if (output.headers[\"x-amzn-requestcharacters\"] !== undefined) {\n        contents.RequestCharacters = parseInt(output.headers[\"x-amzn-requestcharacters\"], 10);\n      }\n\n      data = output.body;\n      contents.AudioStream = data;\n      return [2\n      /*return*/\n      , Promise.resolve(contents)];\n    });\n  });\n};\n\nvar deserializeAws_restJson1SynthesizeSpeechCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, parsedBody, message;\n\n    var _m;\n\n    return __generator(this, function (_o) {\n      switch (_o.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _m = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_m.body = _o.sent(), _m)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n\n          switch (_b) {\n            case \"EngineNotSupportedException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"com.amazonaws.polly#EngineNotSupportedException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"InvalidSampleRateException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"com.amazonaws.polly#InvalidSampleRateException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"InvalidSsmlException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"com.amazonaws.polly#InvalidSsmlException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"LanguageNotSupportedException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"com.amazonaws.polly#LanguageNotSupportedException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"LexiconNotFoundException\":\n              return [3\n              /*break*/\n              , 10];\n\n            case \"com.amazonaws.polly#LexiconNotFoundException\":\n              return [3\n              /*break*/\n              , 10];\n\n            case \"MarksNotSupportedForFormatException\":\n              return [3\n              /*break*/\n              , 12];\n\n            case \"com.amazonaws.polly#MarksNotSupportedForFormatException\":\n              return [3\n              /*break*/\n              , 12];\n\n            case \"ServiceFailureException\":\n              return [3\n              /*break*/\n              , 14];\n\n            case \"com.amazonaws.polly#ServiceFailureException\":\n              return [3\n              /*break*/\n              , 14];\n\n            case \"SsmlMarksNotSupportedForTextTypeException\":\n              return [3\n              /*break*/\n              , 16];\n\n            case \"com.amazonaws.polly#SsmlMarksNotSupportedForTextTypeException\":\n              return [3\n              /*break*/\n              , 16];\n\n            case \"TextLengthExceededException\":\n              return [3\n              /*break*/\n              , 18];\n\n            case \"com.amazonaws.polly#TextLengthExceededException\":\n              return [3\n              /*break*/\n              , 18];\n          }\n\n          return [3\n          /*break*/\n          , 20];\n\n        case 2:\n          _c = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1EngineNotSupportedExceptionResponse(parsedOutput, context)];\n\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_o.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 21];\n\n        case 4:\n          _d = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1InvalidSampleRateExceptionResponse(parsedOutput, context)];\n\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_o.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 21];\n\n        case 6:\n          _e = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1InvalidSsmlExceptionResponse(parsedOutput, context)];\n\n        case 7:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_o.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 21];\n\n        case 8:\n          _f = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1LanguageNotSupportedExceptionResponse(parsedOutput, context)];\n\n        case 9:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_o.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 21];\n\n        case 10:\n          _g = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1LexiconNotFoundExceptionResponse(parsedOutput, context)];\n\n        case 11:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_o.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 21];\n\n        case 12:\n          _h = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1MarksNotSupportedForFormatExceptionResponse(parsedOutput, context)];\n\n        case 13:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([_o.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 21];\n\n        case 14:\n          _j = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)];\n\n        case 15:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([_o.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 21];\n\n        case 16:\n          _k = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1SsmlMarksNotSupportedForTextTypeExceptionResponse(parsedOutput, context)];\n\n        case 17:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([_o.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 21];\n\n        case 18:\n          _l = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1TextLengthExceededExceptionResponse(parsedOutput, context)];\n\n        case 19:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([_o.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 21];\n\n        case 20:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _o.label = 21;\n\n        case 21:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restJson1EngineNotSupportedExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"EngineNotSupportedException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar deserializeAws_restJson1InvalidLexiconExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"InvalidLexiconException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar deserializeAws_restJson1InvalidNextTokenExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"InvalidNextTokenException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar deserializeAws_restJson1InvalidS3BucketExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"InvalidS3BucketException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar deserializeAws_restJson1InvalidS3KeyExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"InvalidS3KeyException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar deserializeAws_restJson1InvalidSampleRateExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"InvalidSampleRateException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar deserializeAws_restJson1InvalidSnsTopicArnExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"InvalidSnsTopicArnException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar deserializeAws_restJson1InvalidSsmlExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"InvalidSsmlException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar deserializeAws_restJson1InvalidTaskIdExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"InvalidTaskIdException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar deserializeAws_restJson1LanguageNotSupportedExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"LanguageNotSupportedException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar deserializeAws_restJson1LexiconNotFoundExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"LexiconNotFoundException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar deserializeAws_restJson1LexiconSizeExceededExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"LexiconSizeExceededException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar deserializeAws_restJson1MarksNotSupportedForFormatExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"MarksNotSupportedForFormatException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar deserializeAws_restJson1MaxLexemeLengthExceededExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"MaxLexemeLengthExceededException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar deserializeAws_restJson1MaxLexiconsNumberExceededExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"MaxLexiconsNumberExceededException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar deserializeAws_restJson1ServiceFailureExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"ServiceFailureException\",\n        $fault: \"server\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar deserializeAws_restJson1SsmlMarksNotSupportedForTextTypeExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"SsmlMarksNotSupportedForTextTypeException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar deserializeAws_restJson1SynthesisTaskNotFoundExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"SynthesisTaskNotFoundException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar deserializeAws_restJson1TextLengthExceededExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"TextLengthExceededException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar deserializeAws_restJson1UnsupportedPlsAlphabetExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"UnsupportedPlsAlphabetException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar deserializeAws_restJson1UnsupportedPlsLanguageExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"UnsupportedPlsLanguageException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar serializeAws_restJson1LexiconNameList = function (input, context) {\n  return input.filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    return entry;\n  });\n};\n\nvar serializeAws_restJson1SpeechMarkTypeList = function (input, context) {\n  return input.filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    return entry;\n  });\n};\n\nvar deserializeAws_restJson1EngineList = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    return entry;\n  });\n};\n\nvar deserializeAws_restJson1LanguageCodeList = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    return entry;\n  });\n};\n\nvar deserializeAws_restJson1Lexicon = function (output, context) {\n  return {\n    Content: output.Content !== undefined && output.Content !== null ? output.Content : undefined,\n    Name: output.Name !== undefined && output.Name !== null ? output.Name : undefined\n  };\n};\n\nvar deserializeAws_restJson1LexiconAttributes = function (output, context) {\n  return {\n    Alphabet: output.Alphabet !== undefined && output.Alphabet !== null ? output.Alphabet : undefined,\n    LanguageCode: output.LanguageCode !== undefined && output.LanguageCode !== null ? output.LanguageCode : undefined,\n    LastModified: output.LastModified !== undefined && output.LastModified !== null ? new Date(Math.round(output.LastModified * 1000)) : undefined,\n    LexemesCount: output.LexemesCount !== undefined && output.LexemesCount !== null ? output.LexemesCount : undefined,\n    LexiconArn: output.LexiconArn !== undefined && output.LexiconArn !== null ? output.LexiconArn : undefined,\n    Size: output.Size !== undefined && output.Size !== null ? output.Size : undefined\n  };\n};\n\nvar deserializeAws_restJson1LexiconDescription = function (output, context) {\n  return {\n    Attributes: output.Attributes !== undefined && output.Attributes !== null ? deserializeAws_restJson1LexiconAttributes(output.Attributes, context) : undefined,\n    Name: output.Name !== undefined && output.Name !== null ? output.Name : undefined\n  };\n};\n\nvar deserializeAws_restJson1LexiconDescriptionList = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    return deserializeAws_restJson1LexiconDescription(entry, context);\n  });\n};\n\nvar deserializeAws_restJson1LexiconNameList = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    return entry;\n  });\n};\n\nvar deserializeAws_restJson1SpeechMarkTypeList = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    return entry;\n  });\n};\n\nvar deserializeAws_restJson1SynthesisTask = function (output, context) {\n  return {\n    CreationTime: output.CreationTime !== undefined && output.CreationTime !== null ? new Date(Math.round(output.CreationTime * 1000)) : undefined,\n    Engine: output.Engine !== undefined && output.Engine !== null ? output.Engine : undefined,\n    LanguageCode: output.LanguageCode !== undefined && output.LanguageCode !== null ? output.LanguageCode : undefined,\n    LexiconNames: output.LexiconNames !== undefined && output.LexiconNames !== null ? deserializeAws_restJson1LexiconNameList(output.LexiconNames, context) : undefined,\n    OutputFormat: output.OutputFormat !== undefined && output.OutputFormat !== null ? output.OutputFormat : undefined,\n    OutputUri: output.OutputUri !== undefined && output.OutputUri !== null ? output.OutputUri : undefined,\n    RequestCharacters: output.RequestCharacters !== undefined && output.RequestCharacters !== null ? output.RequestCharacters : undefined,\n    SampleRate: output.SampleRate !== undefined && output.SampleRate !== null ? output.SampleRate : undefined,\n    SnsTopicArn: output.SnsTopicArn !== undefined && output.SnsTopicArn !== null ? output.SnsTopicArn : undefined,\n    SpeechMarkTypes: output.SpeechMarkTypes !== undefined && output.SpeechMarkTypes !== null ? deserializeAws_restJson1SpeechMarkTypeList(output.SpeechMarkTypes, context) : undefined,\n    TaskId: output.TaskId !== undefined && output.TaskId !== null ? output.TaskId : undefined,\n    TaskStatus: output.TaskStatus !== undefined && output.TaskStatus !== null ? output.TaskStatus : undefined,\n    TaskStatusReason: output.TaskStatusReason !== undefined && output.TaskStatusReason !== null ? output.TaskStatusReason : undefined,\n    TextType: output.TextType !== undefined && output.TextType !== null ? output.TextType : undefined,\n    VoiceId: output.VoiceId !== undefined && output.VoiceId !== null ? output.VoiceId : undefined\n  };\n};\n\nvar deserializeAws_restJson1SynthesisTasks = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    return deserializeAws_restJson1SynthesisTask(entry, context);\n  });\n};\n\nvar deserializeAws_restJson1Voice = function (output, context) {\n  return {\n    AdditionalLanguageCodes: output.AdditionalLanguageCodes !== undefined && output.AdditionalLanguageCodes !== null ? deserializeAws_restJson1LanguageCodeList(output.AdditionalLanguageCodes, context) : undefined,\n    Gender: output.Gender !== undefined && output.Gender !== null ? output.Gender : undefined,\n    Id: output.Id !== undefined && output.Id !== null ? output.Id : undefined,\n    LanguageCode: output.LanguageCode !== undefined && output.LanguageCode !== null ? output.LanguageCode : undefined,\n    LanguageName: output.LanguageName !== undefined && output.LanguageName !== null ? output.LanguageName : undefined,\n    Name: output.Name !== undefined && output.Name !== null ? output.Name : undefined,\n    SupportedEngines: output.SupportedEngines !== undefined && output.SupportedEngines !== null ? deserializeAws_restJson1EngineList(output.SupportedEngines, context) : undefined\n  };\n};\n\nvar deserializeAws_restJson1VoiceList = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    return deserializeAws_restJson1Voice(entry, context);\n  });\n};\n\nvar deserializeMetadata = function (output) {\n  var _a;\n\n  return {\n    httpStatusCode: output.statusCode,\n    requestId: (_a = output.headers[\"x-amzn-requestid\"]) !== null && _a !== void 0 ? _a : output.headers[\"x-amzn-request-id\"],\n    extendedRequestId: output.headers[\"x-amz-id-2\"],\n    cfId: output.headers[\"x-amz-cf-id\"]\n  };\n}; // Collect low-level response body stream to Uint8Array.\n\n\nvar collectBody = function (streamBody, context) {\n  if (streamBody === void 0) {\n    streamBody = new Uint8Array();\n  }\n\n  if (streamBody instanceof Uint8Array) {\n    return Promise.resolve(streamBody);\n  }\n\n  return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());\n}; // Encode Uint8Array data into string with utf-8.\n\n\nvar collectBodyString = function (streamBody, context) {\n  return collectBody(streamBody, context).then(function (body) {\n    return context.utf8Encoder(body);\n  });\n};\n\nvar isSerializableHeaderValue = function (value) {\n  return value !== undefined && value !== null && value !== \"\" && (!Object.getOwnPropertyNames(value).includes(\"length\") || value.length != 0) && (!Object.getOwnPropertyNames(value).includes(\"size\") || value.size != 0);\n};\n\nvar parseBody = function (streamBody, context) {\n  return collectBodyString(streamBody, context).then(function (encoded) {\n    if (encoded.length) {\n      return JSON.parse(encoded);\n    }\n\n    return {};\n  });\n};\n/**\n * Load an error code for the aws.rest-json-1.1 protocol.\n */\n\n\nvar loadRestJsonErrorCode = function (output, data) {\n  var findKey = function (object, key) {\n    return Object.keys(object).find(function (k) {\n      return k.toLowerCase() === key.toLowerCase();\n    });\n  };\n\n  var sanitizeErrorCode = function (rawValue) {\n    var cleanValue = rawValue;\n\n    if (cleanValue.indexOf(\":\") >= 0) {\n      cleanValue = cleanValue.split(\":\")[0];\n    }\n\n    if (cleanValue.indexOf(\"#\") >= 0) {\n      cleanValue = cleanValue.split(\"#\")[1];\n    }\n\n    return cleanValue;\n  };\n\n  var headerKey = findKey(output.headers, \"x-amzn-errortype\");\n\n  if (headerKey !== undefined) {\n    return sanitizeErrorCode(output.headers[headerKey]);\n  }\n\n  if (data.code !== undefined) {\n    return sanitizeErrorCode(data.code);\n  }\n\n  if (data[\"__type\"] !== undefined) {\n    return sanitizeErrorCode(data[\"__type\"]);\n  }\n\n  return \"\";\n};","map":{"version":3,"mappings":"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","names":["HttpRequest","__HttpRequest","extendedEncodeURIComponent","__extendedEncodeURIComponent","serializeAws_restJson1DeleteLexiconCommand","input","context","headers","resolvedPath","Name","undefined","labelValue","length","Error","replace","endpoint","_a","_c","hostname","_b","protocol","port","method","path","body","serializeAws_restJson1DescribeVoicesCommand","query","Engine","LanguageCode","IncludeAdditionalLanguageCodes","toString","NextToken","serializeAws_restJson1GetLexiconCommand","serializeAws_restJson1GetSpeechSynthesisTaskCommand","TaskId","serializeAws_restJson1ListLexiconsCommand","serializeAws_restJson1ListSpeechSynthesisTasksCommand","MaxResults","Status","serializeAws_restJson1PutLexiconCommand","JSON","stringify","__assign","Content","serializeAws_restJson1StartSpeechSynthesisTaskCommand","LexiconNames","serializeAws_restJson1LexiconNameList","OutputFormat","OutputS3BucketName","OutputS3KeyPrefix","SampleRate","SnsTopicArn","SpeechMarkTypes","serializeAws_restJson1SpeechMarkTypeList","Text","TextType","VoiceId","serializeAws_restJson1SynthesizeSpeechCommand","deserializeAws_restJson1DeleteLexiconCommand","output","statusCode","deserializeAws_restJson1DeleteLexiconCommandError","contents","$metadata","deserializeMetadata","collectBody","Promise","resolve","parseBody","parsedOutput","_e","_f","errorCode","loadRestJsonErrorCode","deserializeAws_restJson1LexiconNotFoundExceptionResponse","response","name","deserializeAws_restJson1ServiceFailureExceptionResponse","parsedBody","code","Code","message","Message","$fault","reject","Object","assign","deserializeAws_restJson1DescribeVoicesCommand","deserializeAws_restJson1DescribeVoicesCommandError","Voices","data","deserializeAws_restJson1VoiceList","deserializeAws_restJson1InvalidNextTokenExceptionResponse","deserializeAws_restJson1GetLexiconCommand","deserializeAws_restJson1GetLexiconCommandError","Lexicon","LexiconAttributes","deserializeAws_restJson1Lexicon","deserializeAws_restJson1LexiconAttributes","deserializeAws_restJson1GetSpeechSynthesisTaskCommand","deserializeAws_restJson1GetSpeechSynthesisTaskCommandError","SynthesisTask","deserializeAws_restJson1SynthesisTask","_g","deserializeAws_restJson1InvalidTaskIdExceptionResponse","deserializeAws_restJson1SynthesisTaskNotFoundExceptionResponse","deserializeAws_restJson1ListLexiconsCommand","deserializeAws_restJson1ListLexiconsCommandError","Lexicons","deserializeAws_restJson1LexiconDescriptionList","deserializeAws_restJson1ListSpeechSynthesisTasksCommand","deserializeAws_restJson1ListSpeechSynthesisTasksCommandError","SynthesisTasks","deserializeAws_restJson1SynthesisTasks","deserializeAws_restJson1PutLexiconCommand","deserializeAws_restJson1PutLexiconCommandError","_k","_l","deserializeAws_restJson1InvalidLexiconExceptionResponse","deserializeAws_restJson1LexiconSizeExceededExceptionResponse","deserializeAws_restJson1MaxLexemeLengthExceededExceptionResponse","deserializeAws_restJson1MaxLexiconsNumberExceededExceptionResponse","deserializeAws_restJson1UnsupportedPlsAlphabetExceptionResponse","deserializeAws_restJson1UnsupportedPlsLanguageExceptionResponse","deserializeAws_restJson1StartSpeechSynthesisTaskCommand","deserializeAws_restJson1StartSpeechSynthesisTaskCommandError","_q","_r","deserializeAws_restJson1EngineNotSupportedExceptionResponse","deserializeAws_restJson1InvalidS3BucketExceptionResponse","deserializeAws_restJson1InvalidS3KeyExceptionResponse","deserializeAws_restJson1InvalidSampleRateExceptionResponse","deserializeAws_restJson1InvalidSnsTopicArnExceptionResponse","deserializeAws_restJson1InvalidSsmlExceptionResponse","deserializeAws_restJson1LanguageNotSupportedExceptionResponse","deserializeAws_restJson1MarksNotSupportedForFormatExceptionResponse","deserializeAws_restJson1SsmlMarksNotSupportedForTextTypeExceptionResponse","deserializeAws_restJson1TextLengthExceededExceptionResponse","deserializeAws_restJson1SynthesizeSpeechCommand","deserializeAws_restJson1SynthesizeSpeechCommandError","AudioStream","ContentType","RequestCharacters","parseInt","_m","_o","filter","e","map","entry","deserializeAws_restJson1EngineList","deserializeAws_restJson1LanguageCodeList","Alphabet","LastModified","Date","Math","round","LexemesCount","LexiconArn","Size","deserializeAws_restJson1LexiconDescription","Attributes","deserializeAws_restJson1LexiconNameList","deserializeAws_restJson1SpeechMarkTypeList","CreationTime","OutputUri","TaskStatus","TaskStatusReason","deserializeAws_restJson1Voice","AdditionalLanguageCodes","Gender","Id","LanguageName","SupportedEngines","httpStatusCode","requestId","extendedRequestId","cfId","streamBody","Uint8Array","streamCollector","collectBodyString","then","utf8Encoder","isSerializableHeaderValue","value","getOwnPropertyNames","includes","size","encoded","parse","findKey","object","key","keys","find","k","toLowerCase","sanitizeErrorCode","rawValue","cleanValue","indexOf","split","headerKey"],"sources":["C:\\Users\\lmore\\OneDrive\\Documents\\GitHub\\JacksOfAllTrades\\jacksofalltrades\\node_modules\\@aws-sdk\\client-polly\\protocols\\Aws_restJson1.ts"],"sourcesContent":["import { DeleteLexiconCommandInput, DeleteLexiconCommandOutput } from \"../commands/DeleteLexiconCommand\";\nimport { DescribeVoicesCommandInput, DescribeVoicesCommandOutput } from \"../commands/DescribeVoicesCommand\";\nimport { GetLexiconCommandInput, GetLexiconCommandOutput } from \"../commands/GetLexiconCommand\";\nimport {\n  GetSpeechSynthesisTaskCommandInput,\n  GetSpeechSynthesisTaskCommandOutput,\n} from \"../commands/GetSpeechSynthesisTaskCommand\";\nimport { ListLexiconsCommandInput, ListLexiconsCommandOutput } from \"../commands/ListLexiconsCommand\";\nimport {\n  ListSpeechSynthesisTasksCommandInput,\n  ListSpeechSynthesisTasksCommandOutput,\n} from \"../commands/ListSpeechSynthesisTasksCommand\";\nimport { PutLexiconCommandInput, PutLexiconCommandOutput } from \"../commands/PutLexiconCommand\";\nimport {\n  StartSpeechSynthesisTaskCommandInput,\n  StartSpeechSynthesisTaskCommandOutput,\n} from \"../commands/StartSpeechSynthesisTaskCommand\";\nimport { SynthesizeSpeechCommandInput, SynthesizeSpeechCommandOutput } from \"../commands/SynthesizeSpeechCommand\";\nimport {\n  Engine,\n  EngineNotSupportedException,\n  InvalidLexiconException,\n  InvalidNextTokenException,\n  InvalidS3BucketException,\n  InvalidS3KeyException,\n  InvalidSampleRateException,\n  InvalidSnsTopicArnException,\n  InvalidSsmlException,\n  InvalidTaskIdException,\n  LanguageCode,\n  LanguageNotSupportedException,\n  Lexicon,\n  LexiconAttributes,\n  LexiconDescription,\n  LexiconNotFoundException,\n  LexiconSizeExceededException,\n  MarksNotSupportedForFormatException,\n  MaxLexemeLengthExceededException,\n  MaxLexiconsNumberExceededException,\n  ServiceFailureException,\n  SpeechMarkType,\n  SsmlMarksNotSupportedForTextTypeException,\n  SynthesisTask,\n  SynthesisTaskNotFoundException,\n  TextLengthExceededException,\n  UnsupportedPlsAlphabetException,\n  UnsupportedPlsLanguageException,\n  Voice,\n} from \"../models/models_0\";\nimport { HttpRequest as __HttpRequest, HttpResponse as __HttpResponse } from \"@aws-sdk/protocol-http\";\nimport {\n  SmithyException as __SmithyException,\n  extendedEncodeURIComponent as __extendedEncodeURIComponent,\n} from \"@aws-sdk/smithy-client\";\nimport {\n  Endpoint as __Endpoint,\n  MetadataBearer as __MetadataBearer,\n  ResponseMetadata as __ResponseMetadata,\n  SerdeContext as __SerdeContext,\n} from \"@aws-sdk/types\";\n\nexport const serializeAws_restJson1DeleteLexiconCommand = async (\n  input: DeleteLexiconCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {};\n  let resolvedPath = \"/v1/lexicons/{Name}\";\n  if (input.Name !== undefined) {\n    const labelValue: string = input.Name;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Name.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Name}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Name.\");\n  }\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"DELETE\",\n    headers,\n    path: resolvedPath,\n    body,\n  });\n};\n\nexport const serializeAws_restJson1DescribeVoicesCommand = async (\n  input: DescribeVoicesCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {};\n  let resolvedPath = \"/v1/voices\";\n  const query: any = {\n    ...(input.Engine !== undefined && { Engine: input.Engine }),\n    ...(input.LanguageCode !== undefined && { LanguageCode: input.LanguageCode }),\n    ...(input.IncludeAdditionalLanguageCodes !== undefined && {\n      IncludeAdditionalLanguageCodes: input.IncludeAdditionalLanguageCodes.toString(),\n    }),\n    ...(input.NextToken !== undefined && { NextToken: input.NextToken }),\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restJson1GetLexiconCommand = async (\n  input: GetLexiconCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {};\n  let resolvedPath = \"/v1/lexicons/{Name}\";\n  if (input.Name !== undefined) {\n    const labelValue: string = input.Name;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Name.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Name}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Name.\");\n  }\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    body,\n  });\n};\n\nexport const serializeAws_restJson1GetSpeechSynthesisTaskCommand = async (\n  input: GetSpeechSynthesisTaskCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {};\n  let resolvedPath = \"/v1/synthesisTasks/{TaskId}\";\n  if (input.TaskId !== undefined) {\n    const labelValue: string = input.TaskId;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: TaskId.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{TaskId}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: TaskId.\");\n  }\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    body,\n  });\n};\n\nexport const serializeAws_restJson1ListLexiconsCommand = async (\n  input: ListLexiconsCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {};\n  let resolvedPath = \"/v1/lexicons\";\n  const query: any = {\n    ...(input.NextToken !== undefined && { NextToken: input.NextToken }),\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restJson1ListSpeechSynthesisTasksCommand = async (\n  input: ListSpeechSynthesisTasksCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {};\n  let resolvedPath = \"/v1/synthesisTasks\";\n  const query: any = {\n    ...(input.MaxResults !== undefined && { MaxResults: input.MaxResults.toString() }),\n    ...(input.NextToken !== undefined && { NextToken: input.NextToken }),\n    ...(input.Status !== undefined && { Status: input.Status }),\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restJson1PutLexiconCommand = async (\n  input: PutLexiconCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/json\",\n  };\n  let resolvedPath = \"/v1/lexicons/{Name}\";\n  if (input.Name !== undefined) {\n    const labelValue: string = input.Name;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Name.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Name}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Name.\");\n  }\n  let body: any;\n  body = JSON.stringify({\n    ...(input.Content !== undefined && input.Content !== null && { Content: input.Content }),\n  });\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    body,\n  });\n};\n\nexport const serializeAws_restJson1StartSpeechSynthesisTaskCommand = async (\n  input: StartSpeechSynthesisTaskCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/json\",\n  };\n  let resolvedPath = \"/v1/synthesisTasks\";\n  let body: any;\n  body = JSON.stringify({\n    ...(input.Engine !== undefined && input.Engine !== null && { Engine: input.Engine }),\n    ...(input.LanguageCode !== undefined && input.LanguageCode !== null && { LanguageCode: input.LanguageCode }),\n    ...(input.LexiconNames !== undefined &&\n      input.LexiconNames !== null && {\n        LexiconNames: serializeAws_restJson1LexiconNameList(input.LexiconNames, context),\n      }),\n    ...(input.OutputFormat !== undefined && input.OutputFormat !== null && { OutputFormat: input.OutputFormat }),\n    ...(input.OutputS3BucketName !== undefined &&\n      input.OutputS3BucketName !== null && { OutputS3BucketName: input.OutputS3BucketName }),\n    ...(input.OutputS3KeyPrefix !== undefined &&\n      input.OutputS3KeyPrefix !== null && { OutputS3KeyPrefix: input.OutputS3KeyPrefix }),\n    ...(input.SampleRate !== undefined && input.SampleRate !== null && { SampleRate: input.SampleRate }),\n    ...(input.SnsTopicArn !== undefined && input.SnsTopicArn !== null && { SnsTopicArn: input.SnsTopicArn }),\n    ...(input.SpeechMarkTypes !== undefined &&\n      input.SpeechMarkTypes !== null && {\n        SpeechMarkTypes: serializeAws_restJson1SpeechMarkTypeList(input.SpeechMarkTypes, context),\n      }),\n    ...(input.Text !== undefined && input.Text !== null && { Text: input.Text }),\n    ...(input.TextType !== undefined && input.TextType !== null && { TextType: input.TextType }),\n    ...(input.VoiceId !== undefined && input.VoiceId !== null && { VoiceId: input.VoiceId }),\n  });\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"POST\",\n    headers,\n    path: resolvedPath,\n    body,\n  });\n};\n\nexport const serializeAws_restJson1SynthesizeSpeechCommand = async (\n  input: SynthesizeSpeechCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/json\",\n  };\n  let resolvedPath = \"/v1/speech\";\n  let body: any;\n  body = JSON.stringify({\n    ...(input.Engine !== undefined && input.Engine !== null && { Engine: input.Engine }),\n    ...(input.LanguageCode !== undefined && input.LanguageCode !== null && { LanguageCode: input.LanguageCode }),\n    ...(input.LexiconNames !== undefined &&\n      input.LexiconNames !== null && {\n        LexiconNames: serializeAws_restJson1LexiconNameList(input.LexiconNames, context),\n      }),\n    ...(input.OutputFormat !== undefined && input.OutputFormat !== null && { OutputFormat: input.OutputFormat }),\n    ...(input.SampleRate !== undefined && input.SampleRate !== null && { SampleRate: input.SampleRate }),\n    ...(input.SpeechMarkTypes !== undefined &&\n      input.SpeechMarkTypes !== null && {\n        SpeechMarkTypes: serializeAws_restJson1SpeechMarkTypeList(input.SpeechMarkTypes, context),\n      }),\n    ...(input.Text !== undefined && input.Text !== null && { Text: input.Text }),\n    ...(input.TextType !== undefined && input.TextType !== null && { TextType: input.TextType }),\n    ...(input.VoiceId !== undefined && input.VoiceId !== null && { VoiceId: input.VoiceId }),\n  });\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"POST\",\n    headers,\n    path: resolvedPath,\n    body,\n  });\n};\n\nexport const deserializeAws_restJson1DeleteLexiconCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteLexiconCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restJson1DeleteLexiconCommandError(output, context);\n  }\n  const contents: DeleteLexiconCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restJson1DeleteLexiconCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteLexiconCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"LexiconNotFoundException\":\n    case \"com.amazonaws.polly#LexiconNotFoundException\":\n      response = {\n        ...(await deserializeAws_restJson1LexiconNotFoundExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"ServiceFailureException\":\n    case \"com.amazonaws.polly#ServiceFailureException\":\n      response = {\n        ...(await deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restJson1DescribeVoicesCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DescribeVoicesCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restJson1DescribeVoicesCommandError(output, context);\n  }\n  const contents: DescribeVoicesCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    NextToken: undefined,\n    Voices: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  if (data.NextToken !== undefined && data.NextToken !== null) {\n    contents.NextToken = data.NextToken;\n  }\n  if (data.Voices !== undefined && data.Voices !== null) {\n    contents.Voices = deserializeAws_restJson1VoiceList(data.Voices, context);\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restJson1DescribeVoicesCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DescribeVoicesCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"InvalidNextTokenException\":\n    case \"com.amazonaws.polly#InvalidNextTokenException\":\n      response = {\n        ...(await deserializeAws_restJson1InvalidNextTokenExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"ServiceFailureException\":\n    case \"com.amazonaws.polly#ServiceFailureException\":\n      response = {\n        ...(await deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restJson1GetLexiconCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetLexiconCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restJson1GetLexiconCommandError(output, context);\n  }\n  const contents: GetLexiconCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    Lexicon: undefined,\n    LexiconAttributes: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  if (data.Lexicon !== undefined && data.Lexicon !== null) {\n    contents.Lexicon = deserializeAws_restJson1Lexicon(data.Lexicon, context);\n  }\n  if (data.LexiconAttributes !== undefined && data.LexiconAttributes !== null) {\n    contents.LexiconAttributes = deserializeAws_restJson1LexiconAttributes(data.LexiconAttributes, context);\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restJson1GetLexiconCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetLexiconCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"LexiconNotFoundException\":\n    case \"com.amazonaws.polly#LexiconNotFoundException\":\n      response = {\n        ...(await deserializeAws_restJson1LexiconNotFoundExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"ServiceFailureException\":\n    case \"com.amazonaws.polly#ServiceFailureException\":\n      response = {\n        ...(await deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restJson1GetSpeechSynthesisTaskCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetSpeechSynthesisTaskCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restJson1GetSpeechSynthesisTaskCommandError(output, context);\n  }\n  const contents: GetSpeechSynthesisTaskCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    SynthesisTask: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  if (data.SynthesisTask !== undefined && data.SynthesisTask !== null) {\n    contents.SynthesisTask = deserializeAws_restJson1SynthesisTask(data.SynthesisTask, context);\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restJson1GetSpeechSynthesisTaskCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetSpeechSynthesisTaskCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"InvalidTaskIdException\":\n    case \"com.amazonaws.polly#InvalidTaskIdException\":\n      response = {\n        ...(await deserializeAws_restJson1InvalidTaskIdExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"ServiceFailureException\":\n    case \"com.amazonaws.polly#ServiceFailureException\":\n      response = {\n        ...(await deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"SynthesisTaskNotFoundException\":\n    case \"com.amazonaws.polly#SynthesisTaskNotFoundException\":\n      response = {\n        ...(await deserializeAws_restJson1SynthesisTaskNotFoundExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restJson1ListLexiconsCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<ListLexiconsCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restJson1ListLexiconsCommandError(output, context);\n  }\n  const contents: ListLexiconsCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    Lexicons: undefined,\n    NextToken: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  if (data.Lexicons !== undefined && data.Lexicons !== null) {\n    contents.Lexicons = deserializeAws_restJson1LexiconDescriptionList(data.Lexicons, context);\n  }\n  if (data.NextToken !== undefined && data.NextToken !== null) {\n    contents.NextToken = data.NextToken;\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restJson1ListLexiconsCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<ListLexiconsCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"InvalidNextTokenException\":\n    case \"com.amazonaws.polly#InvalidNextTokenException\":\n      response = {\n        ...(await deserializeAws_restJson1InvalidNextTokenExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"ServiceFailureException\":\n    case \"com.amazonaws.polly#ServiceFailureException\":\n      response = {\n        ...(await deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restJson1ListSpeechSynthesisTasksCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<ListSpeechSynthesisTasksCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restJson1ListSpeechSynthesisTasksCommandError(output, context);\n  }\n  const contents: ListSpeechSynthesisTasksCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    NextToken: undefined,\n    SynthesisTasks: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  if (data.NextToken !== undefined && data.NextToken !== null) {\n    contents.NextToken = data.NextToken;\n  }\n  if (data.SynthesisTasks !== undefined && data.SynthesisTasks !== null) {\n    contents.SynthesisTasks = deserializeAws_restJson1SynthesisTasks(data.SynthesisTasks, context);\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restJson1ListSpeechSynthesisTasksCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<ListSpeechSynthesisTasksCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"InvalidNextTokenException\":\n    case \"com.amazonaws.polly#InvalidNextTokenException\":\n      response = {\n        ...(await deserializeAws_restJson1InvalidNextTokenExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"ServiceFailureException\":\n    case \"com.amazonaws.polly#ServiceFailureException\":\n      response = {\n        ...(await deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restJson1PutLexiconCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutLexiconCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restJson1PutLexiconCommandError(output, context);\n  }\n  const contents: PutLexiconCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restJson1PutLexiconCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutLexiconCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"InvalidLexiconException\":\n    case \"com.amazonaws.polly#InvalidLexiconException\":\n      response = {\n        ...(await deserializeAws_restJson1InvalidLexiconExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"LexiconSizeExceededException\":\n    case \"com.amazonaws.polly#LexiconSizeExceededException\":\n      response = {\n        ...(await deserializeAws_restJson1LexiconSizeExceededExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"MaxLexemeLengthExceededException\":\n    case \"com.amazonaws.polly#MaxLexemeLengthExceededException\":\n      response = {\n        ...(await deserializeAws_restJson1MaxLexemeLengthExceededExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"MaxLexiconsNumberExceededException\":\n    case \"com.amazonaws.polly#MaxLexiconsNumberExceededException\":\n      response = {\n        ...(await deserializeAws_restJson1MaxLexiconsNumberExceededExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"ServiceFailureException\":\n    case \"com.amazonaws.polly#ServiceFailureException\":\n      response = {\n        ...(await deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"UnsupportedPlsAlphabetException\":\n    case \"com.amazonaws.polly#UnsupportedPlsAlphabetException\":\n      response = {\n        ...(await deserializeAws_restJson1UnsupportedPlsAlphabetExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"UnsupportedPlsLanguageException\":\n    case \"com.amazonaws.polly#UnsupportedPlsLanguageException\":\n      response = {\n        ...(await deserializeAws_restJson1UnsupportedPlsLanguageExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restJson1StartSpeechSynthesisTaskCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<StartSpeechSynthesisTaskCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restJson1StartSpeechSynthesisTaskCommandError(output, context);\n  }\n  const contents: StartSpeechSynthesisTaskCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    SynthesisTask: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  if (data.SynthesisTask !== undefined && data.SynthesisTask !== null) {\n    contents.SynthesisTask = deserializeAws_restJson1SynthesisTask(data.SynthesisTask, context);\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restJson1StartSpeechSynthesisTaskCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<StartSpeechSynthesisTaskCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"EngineNotSupportedException\":\n    case \"com.amazonaws.polly#EngineNotSupportedException\":\n      response = {\n        ...(await deserializeAws_restJson1EngineNotSupportedExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"InvalidS3BucketException\":\n    case \"com.amazonaws.polly#InvalidS3BucketException\":\n      response = {\n        ...(await deserializeAws_restJson1InvalidS3BucketExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"InvalidS3KeyException\":\n    case \"com.amazonaws.polly#InvalidS3KeyException\":\n      response = {\n        ...(await deserializeAws_restJson1InvalidS3KeyExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"InvalidSampleRateException\":\n    case \"com.amazonaws.polly#InvalidSampleRateException\":\n      response = {\n        ...(await deserializeAws_restJson1InvalidSampleRateExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"InvalidSnsTopicArnException\":\n    case \"com.amazonaws.polly#InvalidSnsTopicArnException\":\n      response = {\n        ...(await deserializeAws_restJson1InvalidSnsTopicArnExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"InvalidSsmlException\":\n    case \"com.amazonaws.polly#InvalidSsmlException\":\n      response = {\n        ...(await deserializeAws_restJson1InvalidSsmlExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"LanguageNotSupportedException\":\n    case \"com.amazonaws.polly#LanguageNotSupportedException\":\n      response = {\n        ...(await deserializeAws_restJson1LanguageNotSupportedExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"LexiconNotFoundException\":\n    case \"com.amazonaws.polly#LexiconNotFoundException\":\n      response = {\n        ...(await deserializeAws_restJson1LexiconNotFoundExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"MarksNotSupportedForFormatException\":\n    case \"com.amazonaws.polly#MarksNotSupportedForFormatException\":\n      response = {\n        ...(await deserializeAws_restJson1MarksNotSupportedForFormatExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"ServiceFailureException\":\n    case \"com.amazonaws.polly#ServiceFailureException\":\n      response = {\n        ...(await deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"SsmlMarksNotSupportedForTextTypeException\":\n    case \"com.amazonaws.polly#SsmlMarksNotSupportedForTextTypeException\":\n      response = {\n        ...(await deserializeAws_restJson1SsmlMarksNotSupportedForTextTypeExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"TextLengthExceededException\":\n    case \"com.amazonaws.polly#TextLengthExceededException\":\n      response = {\n        ...(await deserializeAws_restJson1TextLengthExceededExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restJson1SynthesizeSpeechCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<SynthesizeSpeechCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restJson1SynthesizeSpeechCommandError(output, context);\n  }\n  const contents: SynthesizeSpeechCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    AudioStream: undefined,\n    ContentType: undefined,\n    RequestCharacters: undefined,\n  };\n  if (output.headers[\"content-type\"] !== undefined) {\n    contents.ContentType = output.headers[\"content-type\"];\n  }\n  if (output.headers[\"x-amzn-requestcharacters\"] !== undefined) {\n    contents.RequestCharacters = parseInt(output.headers[\"x-amzn-requestcharacters\"], 10);\n  }\n  const data: any = output.body;\n  contents.AudioStream = data;\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restJson1SynthesizeSpeechCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<SynthesizeSpeechCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"EngineNotSupportedException\":\n    case \"com.amazonaws.polly#EngineNotSupportedException\":\n      response = {\n        ...(await deserializeAws_restJson1EngineNotSupportedExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"InvalidSampleRateException\":\n    case \"com.amazonaws.polly#InvalidSampleRateException\":\n      response = {\n        ...(await deserializeAws_restJson1InvalidSampleRateExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"InvalidSsmlException\":\n    case \"com.amazonaws.polly#InvalidSsmlException\":\n      response = {\n        ...(await deserializeAws_restJson1InvalidSsmlExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"LanguageNotSupportedException\":\n    case \"com.amazonaws.polly#LanguageNotSupportedException\":\n      response = {\n        ...(await deserializeAws_restJson1LanguageNotSupportedExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"LexiconNotFoundException\":\n    case \"com.amazonaws.polly#LexiconNotFoundException\":\n      response = {\n        ...(await deserializeAws_restJson1LexiconNotFoundExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"MarksNotSupportedForFormatException\":\n    case \"com.amazonaws.polly#MarksNotSupportedForFormatException\":\n      response = {\n        ...(await deserializeAws_restJson1MarksNotSupportedForFormatExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"ServiceFailureException\":\n    case \"com.amazonaws.polly#ServiceFailureException\":\n      response = {\n        ...(await deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"SsmlMarksNotSupportedForTextTypeException\":\n    case \"com.amazonaws.polly#SsmlMarksNotSupportedForTextTypeException\":\n      response = {\n        ...(await deserializeAws_restJson1SsmlMarksNotSupportedForTextTypeExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"TextLengthExceededException\":\n    case \"com.amazonaws.polly#TextLengthExceededException\":\n      response = {\n        ...(await deserializeAws_restJson1TextLengthExceededExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nconst deserializeAws_restJson1EngineNotSupportedExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<EngineNotSupportedException> => {\n  const contents: EngineNotSupportedException = {\n    name: \"EngineNotSupportedException\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1InvalidLexiconExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<InvalidLexiconException> => {\n  const contents: InvalidLexiconException = {\n    name: \"InvalidLexiconException\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1InvalidNextTokenExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<InvalidNextTokenException> => {\n  const contents: InvalidNextTokenException = {\n    name: \"InvalidNextTokenException\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1InvalidS3BucketExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<InvalidS3BucketException> => {\n  const contents: InvalidS3BucketException = {\n    name: \"InvalidS3BucketException\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1InvalidS3KeyExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<InvalidS3KeyException> => {\n  const contents: InvalidS3KeyException = {\n    name: \"InvalidS3KeyException\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1InvalidSampleRateExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<InvalidSampleRateException> => {\n  const contents: InvalidSampleRateException = {\n    name: \"InvalidSampleRateException\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1InvalidSnsTopicArnExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<InvalidSnsTopicArnException> => {\n  const contents: InvalidSnsTopicArnException = {\n    name: \"InvalidSnsTopicArnException\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1InvalidSsmlExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<InvalidSsmlException> => {\n  const contents: InvalidSsmlException = {\n    name: \"InvalidSsmlException\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1InvalidTaskIdExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<InvalidTaskIdException> => {\n  const contents: InvalidTaskIdException = {\n    name: \"InvalidTaskIdException\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1LanguageNotSupportedExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<LanguageNotSupportedException> => {\n  const contents: LanguageNotSupportedException = {\n    name: \"LanguageNotSupportedException\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1LexiconNotFoundExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<LexiconNotFoundException> => {\n  const contents: LexiconNotFoundException = {\n    name: \"LexiconNotFoundException\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1LexiconSizeExceededExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<LexiconSizeExceededException> => {\n  const contents: LexiconSizeExceededException = {\n    name: \"LexiconSizeExceededException\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1MarksNotSupportedForFormatExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<MarksNotSupportedForFormatException> => {\n  const contents: MarksNotSupportedForFormatException = {\n    name: \"MarksNotSupportedForFormatException\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1MaxLexemeLengthExceededExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<MaxLexemeLengthExceededException> => {\n  const contents: MaxLexemeLengthExceededException = {\n    name: \"MaxLexemeLengthExceededException\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1MaxLexiconsNumberExceededExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<MaxLexiconsNumberExceededException> => {\n  const contents: MaxLexiconsNumberExceededException = {\n    name: \"MaxLexiconsNumberExceededException\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1ServiceFailureExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<ServiceFailureException> => {\n  const contents: ServiceFailureException = {\n    name: \"ServiceFailureException\",\n    $fault: \"server\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1SsmlMarksNotSupportedForTextTypeExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<SsmlMarksNotSupportedForTextTypeException> => {\n  const contents: SsmlMarksNotSupportedForTextTypeException = {\n    name: \"SsmlMarksNotSupportedForTextTypeException\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1SynthesisTaskNotFoundExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<SynthesisTaskNotFoundException> => {\n  const contents: SynthesisTaskNotFoundException = {\n    name: \"SynthesisTaskNotFoundException\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1TextLengthExceededExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<TextLengthExceededException> => {\n  const contents: TextLengthExceededException = {\n    name: \"TextLengthExceededException\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1UnsupportedPlsAlphabetExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<UnsupportedPlsAlphabetException> => {\n  const contents: UnsupportedPlsAlphabetException = {\n    name: \"UnsupportedPlsAlphabetException\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1UnsupportedPlsLanguageExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<UnsupportedPlsLanguageException> => {\n  const contents: UnsupportedPlsLanguageException = {\n    name: \"UnsupportedPlsLanguageException\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst serializeAws_restJson1LexiconNameList = (input: string[], context: __SerdeContext): any => {\n  return input\n    .filter((e: any) => e != null)\n    .map((entry) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return entry;\n    });\n};\n\nconst serializeAws_restJson1SpeechMarkTypeList = (input: (SpeechMarkType | string)[], context: __SerdeContext): any => {\n  return input\n    .filter((e: any) => e != null)\n    .map((entry) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return entry;\n    });\n};\n\nconst deserializeAws_restJson1EngineList = (output: any, context: __SerdeContext): (Engine | string)[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return entry;\n    });\n};\n\nconst deserializeAws_restJson1LanguageCodeList = (output: any, context: __SerdeContext): (LanguageCode | string)[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return entry;\n    });\n};\n\nconst deserializeAws_restJson1Lexicon = (output: any, context: __SerdeContext): Lexicon => {\n  return {\n    Content: output.Content !== undefined && output.Content !== null ? output.Content : undefined,\n    Name: output.Name !== undefined && output.Name !== null ? output.Name : undefined,\n  } as any;\n};\n\nconst deserializeAws_restJson1LexiconAttributes = (output: any, context: __SerdeContext): LexiconAttributes => {\n  return {\n    Alphabet: output.Alphabet !== undefined && output.Alphabet !== null ? output.Alphabet : undefined,\n    LanguageCode: output.LanguageCode !== undefined && output.LanguageCode !== null ? output.LanguageCode : undefined,\n    LastModified:\n      output.LastModified !== undefined && output.LastModified !== null\n        ? new Date(Math.round(output.LastModified * 1000))\n        : undefined,\n    LexemesCount: output.LexemesCount !== undefined && output.LexemesCount !== null ? output.LexemesCount : undefined,\n    LexiconArn: output.LexiconArn !== undefined && output.LexiconArn !== null ? output.LexiconArn : undefined,\n    Size: output.Size !== undefined && output.Size !== null ? output.Size : undefined,\n  } as any;\n};\n\nconst deserializeAws_restJson1LexiconDescription = (output: any, context: __SerdeContext): LexiconDescription => {\n  return {\n    Attributes:\n      output.Attributes !== undefined && output.Attributes !== null\n        ? deserializeAws_restJson1LexiconAttributes(output.Attributes, context)\n        : undefined,\n    Name: output.Name !== undefined && output.Name !== null ? output.Name : undefined,\n  } as any;\n};\n\nconst deserializeAws_restJson1LexiconDescriptionList = (output: any, context: __SerdeContext): LexiconDescription[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restJson1LexiconDescription(entry, context);\n    });\n};\n\nconst deserializeAws_restJson1LexiconNameList = (output: any, context: __SerdeContext): string[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return entry;\n    });\n};\n\nconst deserializeAws_restJson1SpeechMarkTypeList = (\n  output: any,\n  context: __SerdeContext\n): (SpeechMarkType | string)[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return entry;\n    });\n};\n\nconst deserializeAws_restJson1SynthesisTask = (output: any, context: __SerdeContext): SynthesisTask => {\n  return {\n    CreationTime:\n      output.CreationTime !== undefined && output.CreationTime !== null\n        ? new Date(Math.round(output.CreationTime * 1000))\n        : undefined,\n    Engine: output.Engine !== undefined && output.Engine !== null ? output.Engine : undefined,\n    LanguageCode: output.LanguageCode !== undefined && output.LanguageCode !== null ? output.LanguageCode : undefined,\n    LexiconNames:\n      output.LexiconNames !== undefined && output.LexiconNames !== null\n        ? deserializeAws_restJson1LexiconNameList(output.LexiconNames, context)\n        : undefined,\n    OutputFormat: output.OutputFormat !== undefined && output.OutputFormat !== null ? output.OutputFormat : undefined,\n    OutputUri: output.OutputUri !== undefined && output.OutputUri !== null ? output.OutputUri : undefined,\n    RequestCharacters:\n      output.RequestCharacters !== undefined && output.RequestCharacters !== null\n        ? output.RequestCharacters\n        : undefined,\n    SampleRate: output.SampleRate !== undefined && output.SampleRate !== null ? output.SampleRate : undefined,\n    SnsTopicArn: output.SnsTopicArn !== undefined && output.SnsTopicArn !== null ? output.SnsTopicArn : undefined,\n    SpeechMarkTypes:\n      output.SpeechMarkTypes !== undefined && output.SpeechMarkTypes !== null\n        ? deserializeAws_restJson1SpeechMarkTypeList(output.SpeechMarkTypes, context)\n        : undefined,\n    TaskId: output.TaskId !== undefined && output.TaskId !== null ? output.TaskId : undefined,\n    TaskStatus: output.TaskStatus !== undefined && output.TaskStatus !== null ? output.TaskStatus : undefined,\n    TaskStatusReason:\n      output.TaskStatusReason !== undefined && output.TaskStatusReason !== null ? output.TaskStatusReason : undefined,\n    TextType: output.TextType !== undefined && output.TextType !== null ? output.TextType : undefined,\n    VoiceId: output.VoiceId !== undefined && output.VoiceId !== null ? output.VoiceId : undefined,\n  } as any;\n};\n\nconst deserializeAws_restJson1SynthesisTasks = (output: any, context: __SerdeContext): SynthesisTask[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restJson1SynthesisTask(entry, context);\n    });\n};\n\nconst deserializeAws_restJson1Voice = (output: any, context: __SerdeContext): Voice => {\n  return {\n    AdditionalLanguageCodes:\n      output.AdditionalLanguageCodes !== undefined && output.AdditionalLanguageCodes !== null\n        ? deserializeAws_restJson1LanguageCodeList(output.AdditionalLanguageCodes, context)\n        : undefined,\n    Gender: output.Gender !== undefined && output.Gender !== null ? output.Gender : undefined,\n    Id: output.Id !== undefined && output.Id !== null ? output.Id : undefined,\n    LanguageCode: output.LanguageCode !== undefined && output.LanguageCode !== null ? output.LanguageCode : undefined,\n    LanguageName: output.LanguageName !== undefined && output.LanguageName !== null ? output.LanguageName : undefined,\n    Name: output.Name !== undefined && output.Name !== null ? output.Name : undefined,\n    SupportedEngines:\n      output.SupportedEngines !== undefined && output.SupportedEngines !== null\n        ? deserializeAws_restJson1EngineList(output.SupportedEngines, context)\n        : undefined,\n  } as any;\n};\n\nconst deserializeAws_restJson1VoiceList = (output: any, context: __SerdeContext): Voice[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restJson1Voice(entry, context);\n    });\n};\n\nconst deserializeMetadata = (output: __HttpResponse): __ResponseMetadata => ({\n  httpStatusCode: output.statusCode,\n  requestId: output.headers[\"x-amzn-requestid\"] ?? output.headers[\"x-amzn-request-id\"],\n  extendedRequestId: output.headers[\"x-amz-id-2\"],\n  cfId: output.headers[\"x-amz-cf-id\"],\n});\n\n// Collect low-level response body stream to Uint8Array.\nconst collectBody = (streamBody: any = new Uint8Array(), context: __SerdeContext): Promise<Uint8Array> => {\n  if (streamBody instanceof Uint8Array) {\n    return Promise.resolve(streamBody);\n  }\n  return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());\n};\n\n// Encode Uint8Array data into string with utf-8.\nconst collectBodyString = (streamBody: any, context: __SerdeContext): Promise<string> =>\n  collectBody(streamBody, context).then((body) => context.utf8Encoder(body));\n\nconst isSerializableHeaderValue = (value: any): boolean =>\n  value !== undefined &&\n  value !== null &&\n  value !== \"\" &&\n  (!Object.getOwnPropertyNames(value).includes(\"length\") || value.length != 0) &&\n  (!Object.getOwnPropertyNames(value).includes(\"size\") || value.size != 0);\n\nconst parseBody = (streamBody: any, context: __SerdeContext): any =>\n  collectBodyString(streamBody, context).then((encoded) => {\n    if (encoded.length) {\n      return JSON.parse(encoded);\n    }\n    return {};\n  });\n\n/**\n * Load an error code for the aws.rest-json-1.1 protocol.\n */\nconst loadRestJsonErrorCode = (output: __HttpResponse, data: any): string => {\n  const findKey = (object: any, key: string) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());\n\n  const sanitizeErrorCode = (rawValue: string): string => {\n    let cleanValue = rawValue;\n    if (cleanValue.indexOf(\":\") >= 0) {\n      cleanValue = cleanValue.split(\":\")[0];\n    }\n    if (cleanValue.indexOf(\"#\") >= 0) {\n      cleanValue = cleanValue.split(\"#\")[1];\n    }\n    return cleanValue;\n  };\n\n  const headerKey = findKey(output.headers, \"x-amzn-errortype\");\n  if (headerKey !== undefined) {\n    return sanitizeErrorCode(output.headers[headerKey]);\n  }\n\n  if (data.code !== undefined) {\n    return sanitizeErrorCode(data.code);\n  }\n\n  if (data[\"__type\"] !== undefined) {\n    return sanitizeErrorCode(data[\"__type\"]);\n  }\n\n  return \"\";\n};\n"]},"metadata":{},"sourceType":"module"}