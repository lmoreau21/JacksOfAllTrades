{"ast":null,"code":"/**\n * Note: This file was copied from mapbox-gl-draw@1.1.1 because it is no longer accessible in later versions of mapbox-gl-draw which are required for security benefits.\n *\n * If this PR gets merged https://github.com/mapbox/mapbox-gl-draw/pull/1100 or mapbox-gl-draw is forked to maplibre-gl-draw we should investigate removing these files and getting the dependencies from mapbox-gl-draw\n */\nconst extent = require(\"@mapbox/geojson-extent\");\n\nconst Constants = require(\"./constants\");\n\nconst {\n  LAT_MIN,\n  LAT_MAX,\n  LAT_RENDERED_MIN,\n  LAT_RENDERED_MAX,\n  LNG_MIN,\n  LNG_MAX\n} = Constants; // Ensure that we do not drag north-south far enough for\n// - any part of any feature to exceed the poles\n// - any feature to be completely lost in the space between the projection's\n//   edge and the poles, such that it couldn't be re-selected and moved back\n\nmodule.exports = function (geojsonFeatures, delta) {\n  // \"inner edge\" = a feature's latitude closest to the equator\n  let northInnerEdge = LAT_MIN;\n  let southInnerEdge = LAT_MAX; // \"outer edge\" = a feature's latitude furthest from the equator\n\n  let northOuterEdge = LAT_MIN;\n  let southOuterEdge = LAT_MAX;\n  let westEdge = LNG_MAX;\n  let eastEdge = LNG_MIN;\n  geojsonFeatures.forEach(feature => {\n    const bounds = extent(feature);\n    const featureSouthEdge = bounds[1];\n    const featureNorthEdge = bounds[3];\n    const featureWestEdge = bounds[0];\n    const featureEastEdge = bounds[2];\n    if (featureSouthEdge > northInnerEdge) northInnerEdge = featureSouthEdge;\n    if (featureNorthEdge < southInnerEdge) southInnerEdge = featureNorthEdge;\n    if (featureNorthEdge > northOuterEdge) northOuterEdge = featureNorthEdge;\n    if (featureSouthEdge < southOuterEdge) southOuterEdge = featureSouthEdge;\n    if (featureWestEdge < westEdge) westEdge = featureWestEdge;\n    if (featureEastEdge > eastEdge) eastEdge = featureEastEdge;\n  }); // These changes are not mutually exclusive: we might hit the inner\n  // edge but also have hit the outer edge and therefore need\n  // another readjustment\n\n  const constrainedDelta = delta;\n\n  if (northInnerEdge + constrainedDelta.lat > LAT_RENDERED_MAX) {\n    constrainedDelta.lat = LAT_RENDERED_MAX - northInnerEdge;\n  }\n\n  if (northOuterEdge + constrainedDelta.lat > LAT_MAX) {\n    constrainedDelta.lat = LAT_MAX - northOuterEdge;\n  }\n\n  if (southInnerEdge + constrainedDelta.lat < LAT_RENDERED_MIN) {\n    constrainedDelta.lat = LAT_RENDERED_MIN - southInnerEdge;\n  }\n\n  if (southOuterEdge + constrainedDelta.lat < LAT_MIN) {\n    constrainedDelta.lat = LAT_MIN - southOuterEdge;\n  }\n\n  if (westEdge + constrainedDelta.lng <= LNG_MIN) {\n    constrainedDelta.lng += Math.ceil(Math.abs(constrainedDelta.lng) / 360) * 360;\n  }\n\n  if (eastEdge + constrainedDelta.lng >= LNG_MAX) {\n    constrainedDelta.lng -= Math.ceil(Math.abs(constrainedDelta.lng) / 360) * 360;\n  }\n\n  return constrainedDelta;\n};","map":{"version":3,"names":["extent","require","Constants","LAT_MIN","LAT_MAX","LAT_RENDERED_MIN","LAT_RENDERED_MAX","LNG_MIN","LNG_MAX","module","exports","geojsonFeatures","delta","northInnerEdge","southInnerEdge","northOuterEdge","southOuterEdge","westEdge","eastEdge","forEach","feature","bounds","featureSouthEdge","featureNorthEdge","featureWestEdge","featureEastEdge","constrainedDelta","lat","lng","Math","ceil","abs"],"sources":["C:/Users/lmore/OneDrive/Documents/GitHub/JacksOfAllTrades/jacksofalltrades/node_modules/maplibre-gl-draw-circle/lib/utils/constrain_feature_movement.js"],"sourcesContent":["/**\n * Note: This file was copied from mapbox-gl-draw@1.1.1 because it is no longer accessible in later versions of mapbox-gl-draw which are required for security benefits.\n *\n * If this PR gets merged https://github.com/mapbox/mapbox-gl-draw/pull/1100 or mapbox-gl-draw is forked to maplibre-gl-draw we should investigate removing these files and getting the dependencies from mapbox-gl-draw\n */\n\nconst extent = require(\"@mapbox/geojson-extent\");\nconst Constants = require(\"./constants\");\n\nconst { LAT_MIN, LAT_MAX, LAT_RENDERED_MIN, LAT_RENDERED_MAX, LNG_MIN, LNG_MAX } = Constants;\n\n// Ensure that we do not drag north-south far enough for\n// - any part of any feature to exceed the poles\n// - any feature to be completely lost in the space between the projection's\n//   edge and the poles, such that it couldn't be re-selected and moved back\nmodule.exports = function (geojsonFeatures, delta) {\n  // \"inner edge\" = a feature's latitude closest to the equator\n  let northInnerEdge = LAT_MIN;\n  let southInnerEdge = LAT_MAX;\n  // \"outer edge\" = a feature's latitude furthest from the equator\n  let northOuterEdge = LAT_MIN;\n  let southOuterEdge = LAT_MAX;\n\n  let westEdge = LNG_MAX;\n  let eastEdge = LNG_MIN;\n\n  geojsonFeatures.forEach((feature) => {\n    const bounds = extent(feature);\n    const featureSouthEdge = bounds[1];\n    const featureNorthEdge = bounds[3];\n    const featureWestEdge = bounds[0];\n    const featureEastEdge = bounds[2];\n    if (featureSouthEdge > northInnerEdge) northInnerEdge = featureSouthEdge;\n    if (featureNorthEdge < southInnerEdge) southInnerEdge = featureNorthEdge;\n    if (featureNorthEdge > northOuterEdge) northOuterEdge = featureNorthEdge;\n    if (featureSouthEdge < southOuterEdge) southOuterEdge = featureSouthEdge;\n    if (featureWestEdge < westEdge) westEdge = featureWestEdge;\n    if (featureEastEdge > eastEdge) eastEdge = featureEastEdge;\n  });\n\n  // These changes are not mutually exclusive: we might hit the inner\n  // edge but also have hit the outer edge and therefore need\n  // another readjustment\n  const constrainedDelta = delta;\n  if (northInnerEdge + constrainedDelta.lat > LAT_RENDERED_MAX) {\n    constrainedDelta.lat = LAT_RENDERED_MAX - northInnerEdge;\n  }\n  if (northOuterEdge + constrainedDelta.lat > LAT_MAX) {\n    constrainedDelta.lat = LAT_MAX - northOuterEdge;\n  }\n  if (southInnerEdge + constrainedDelta.lat < LAT_RENDERED_MIN) {\n    constrainedDelta.lat = LAT_RENDERED_MIN - southInnerEdge;\n  }\n  if (southOuterEdge + constrainedDelta.lat < LAT_MIN) {\n    constrainedDelta.lat = LAT_MIN - southOuterEdge;\n  }\n  if (westEdge + constrainedDelta.lng <= LNG_MIN) {\n    constrainedDelta.lng += Math.ceil(Math.abs(constrainedDelta.lng) / 360) * 360;\n  }\n  if (eastEdge + constrainedDelta.lng >= LNG_MAX) {\n    constrainedDelta.lng -= Math.ceil(Math.abs(constrainedDelta.lng) / 360) * 360;\n  }\n\n  return constrainedDelta;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}