{"ast":null,"code":"import { __asyncGenerator, __await, __generator } from \"tslib\";\nexport function getChunkedStream(source) {\n  var _a;\n\n  var currentMessageTotalLength = 0;\n  var currentMessagePendingLength = 0;\n  var currentMessage = null;\n  var messageLengthBuffer = null;\n\n  var allocateMessage = function allocateMessage(size) {\n    if (typeof size !== \"number\") {\n      throw new Error(\"Attempted to allocate an event message where size was not a number: \" + size);\n    }\n\n    currentMessageTotalLength = size;\n    currentMessagePendingLength = 4;\n    currentMessage = new Uint8Array(size);\n    var currentMessageView = new DataView(currentMessage.buffer);\n    currentMessageView.setUint32(0, size, false); //set big-endian Uint32 to 0~3 bytes\n  };\n\n  var iterator = function iterator() {\n    return __asyncGenerator(this, arguments, function () {\n      var sourceIterator, _a, value, done, chunkLength, currentOffset, bytesRemaining, numBytesForTotal, numBytesToWrite;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            sourceIterator = source[Symbol.asyncIterator]();\n            _b.label = 1;\n\n          case 1:\n            if (!true) return [3\n            /*break*/\n            , 16];\n            return [4\n            /*yield*/\n            , __await(sourceIterator.next())];\n\n          case 2:\n            _a = _b.sent(), value = _a.value, done = _a.done;\n            if (!done) return [3\n            /*break*/\n            , 10];\n            if (!!currentMessageTotalLength) return [3\n            /*break*/\n            , 4];\n            return [4\n            /*yield*/\n            , __await(void 0)];\n\n          case 3:\n            return [2\n            /*return*/\n            , _b.sent()];\n\n          case 4:\n            if (!(currentMessageTotalLength === currentMessagePendingLength)) return [3\n            /*break*/\n            , 7];\n            return [4\n            /*yield*/\n            , __await(currentMessage)];\n\n          case 5:\n            return [4\n            /*yield*/\n            , _b.sent()];\n\n          case 6:\n            _b.sent();\n\n            return [3\n            /*break*/\n            , 8];\n\n          case 7:\n            throw new Error(\"Truncated event message received.\");\n\n          case 8:\n            return [4\n            /*yield*/\n            , __await(void 0)];\n\n          case 9:\n            return [2\n            /*return*/\n            , _b.sent()];\n\n          case 10:\n            chunkLength = value.length;\n            currentOffset = 0;\n            _b.label = 11;\n\n          case 11:\n            if (!(currentOffset < chunkLength)) return [3\n            /*break*/\n            , 15]; // create new message if necessary\n\n            if (!currentMessage) {\n              bytesRemaining = chunkLength - currentOffset; // prevent edge case where total length spans 2 chunks\n\n              if (!messageLengthBuffer) {\n                messageLengthBuffer = new Uint8Array(4);\n              }\n\n              numBytesForTotal = Math.min(4 - currentMessagePendingLength, // remaining bytes to fill the messageLengthBuffer\n              bytesRemaining // bytes left in chunk\n              );\n              messageLengthBuffer.set( // @ts-ignore error TS2532: Object is possibly 'undefined' for value\n              value.slice(currentOffset, currentOffset + numBytesForTotal), currentMessagePendingLength);\n              currentMessagePendingLength += numBytesForTotal;\n              currentOffset += numBytesForTotal;\n\n              if (currentMessagePendingLength < 4) {\n                // not enough information to create the current message\n                return [3\n                /*break*/\n                , 15];\n              }\n\n              allocateMessage(new DataView(messageLengthBuffer.buffer).getUint32(0, false));\n              messageLengthBuffer = null;\n            }\n\n            numBytesToWrite = Math.min(currentMessageTotalLength - currentMessagePendingLength, // number of bytes left to complete message\n            chunkLength - currentOffset // number of bytes left in the original chunk\n            );\n            currentMessage.set( // @ts-ignore error TS2532: Object is possibly 'undefined' for value\n            value.slice(currentOffset, currentOffset + numBytesToWrite), currentMessagePendingLength);\n            currentMessagePendingLength += numBytesToWrite;\n            currentOffset += numBytesToWrite;\n            if (!(currentMessageTotalLength && currentMessageTotalLength === currentMessagePendingLength)) return [3\n            /*break*/\n            , 14];\n            return [4\n            /*yield*/\n            , __await(currentMessage)];\n\n          case 12:\n            // push out the message\n            return [4\n            /*yield*/\n            , _b.sent()];\n\n          case 13:\n            // push out the message\n            _b.sent(); // cleanup\n\n\n            currentMessage = null;\n            currentMessageTotalLength = 0;\n            currentMessagePendingLength = 0;\n            _b.label = 14;\n\n          case 14:\n            return [3\n            /*break*/\n            , 11];\n\n          case 15:\n            return [3\n            /*break*/\n            , 1];\n\n          case 16:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  return _a = {}, _a[Symbol.asyncIterator] = iterator, _a;\n}","map":{"version":3,"mappings":"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","names":["getChunkedStream","source","currentMessageTotalLength","currentMessagePendingLength","currentMessage","messageLengthBuffer","allocateMessage","size","Error","Uint8Array","currentMessageView","DataView","buffer","setUint32","iterator","sourceIterator","Symbol","asyncIterator","next","_a","_b","value","done","chunkLength","length","currentOffset","bytesRemaining","numBytesForTotal","Math","min","set","slice","getUint32","numBytesToWrite"],"sources":["C:\\Users\\lmore\\OneDrive\\Documents\\GitHub\\JacksOfAllTrades\\jacksofalltrades\\node_modules\\@aws-sdk\\eventstream-serde-universal\\src\\getChunkedStream.ts"],"sourcesContent":["export function getChunkedStream(source: AsyncIterable<Uint8Array>): AsyncIterable<Uint8Array> {\n  let currentMessageTotalLength = 0;\n  let currentMessagePendingLength = 0;\n  let currentMessage: Uint8Array | null = null;\n  let messageLengthBuffer: Uint8Array | null = null;\n  const allocateMessage = (size: number) => {\n    if (typeof size !== \"number\") {\n      throw new Error(\"Attempted to allocate an event message where size was not a number: \" + size);\n    }\n    currentMessageTotalLength = size;\n    currentMessagePendingLength = 4;\n    currentMessage = new Uint8Array(size);\n    const currentMessageView = new DataView(currentMessage.buffer);\n    currentMessageView.setUint32(0, size, false); //set big-endian Uint32 to 0~3 bytes\n  };\n\n  const iterator = async function* () {\n    const sourceIterator = source[Symbol.asyncIterator]();\n    while (true) {\n      const { value, done } = await sourceIterator.next();\n      if (done) {\n        if (!currentMessageTotalLength) {\n          return;\n        } else if (currentMessageTotalLength === currentMessagePendingLength) {\n          yield currentMessage as Uint8Array;\n        } else {\n          throw new Error(\"Truncated event message received.\");\n        }\n        return;\n      }\n\n      const chunkLength = value.length;\n      let currentOffset = 0;\n\n      while (currentOffset < chunkLength) {\n        // create new message if necessary\n        if (!currentMessage) {\n          // working on a new message, determine total length\n          const bytesRemaining = chunkLength - currentOffset;\n          // prevent edge case where total length spans 2 chunks\n          if (!messageLengthBuffer) {\n            messageLengthBuffer = new Uint8Array(4);\n          }\n          const numBytesForTotal = Math.min(\n            4 - currentMessagePendingLength, // remaining bytes to fill the messageLengthBuffer\n            bytesRemaining // bytes left in chunk\n          );\n\n          messageLengthBuffer.set(\n            // @ts-ignore error TS2532: Object is possibly 'undefined' for value\n            value.slice(currentOffset, currentOffset + numBytesForTotal),\n            currentMessagePendingLength\n          );\n\n          currentMessagePendingLength += numBytesForTotal;\n          currentOffset += numBytesForTotal;\n\n          if (currentMessagePendingLength < 4) {\n            // not enough information to create the current message\n            break;\n          }\n          allocateMessage(new DataView(messageLengthBuffer.buffer).getUint32(0, false));\n          messageLengthBuffer = null;\n        }\n\n        // write data into current message\n        const numBytesToWrite = Math.min(\n          currentMessageTotalLength - currentMessagePendingLength, // number of bytes left to complete message\n          chunkLength - currentOffset // number of bytes left in the original chunk\n        );\n        currentMessage!.set(\n          // @ts-ignore error TS2532: Object is possibly 'undefined' for value\n          value.slice(currentOffset, currentOffset + numBytesToWrite),\n          currentMessagePendingLength\n        );\n        currentMessagePendingLength += numBytesToWrite;\n        currentOffset += numBytesToWrite;\n\n        // check if a message is ready to be pushed\n        if (currentMessageTotalLength && currentMessageTotalLength === currentMessagePendingLength) {\n          // push out the message\n          yield currentMessage as Uint8Array;\n          // cleanup\n          currentMessage = null;\n          currentMessageTotalLength = 0;\n          currentMessagePendingLength = 0;\n        }\n      }\n    }\n  };\n\n  return {\n    [Symbol.asyncIterator]: iterator,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}