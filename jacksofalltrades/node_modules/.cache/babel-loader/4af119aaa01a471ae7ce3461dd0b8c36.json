{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spread = this && this.__spread || function () {\n  for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n\n  return ar;\n};\n\nimport API, { GRAPHQL_AUTH_MODE } from '@aws-amplify/api';\nimport { Auth } from '@aws-amplify/auth';\nimport Cache from '@aws-amplify/cache';\nimport { ConsoleLogger as Logger, Hub } from '@aws-amplify/core';\nimport { CONTROL_MSG as PUBSUB_CONTROL_MSG } from '@aws-amplify/pubsub';\nimport Observable from 'zen-observable-ts';\nimport { ProcessName } from '../../types';\nimport { buildSubscriptionGraphQLOperation, getAuthorizationRules, getModelAuthModes, getUserGroupsFromToken, TransformerMutationType, getTokenForCustomAuth } from '../utils';\nimport { ModelPredicateCreator } from '../../predicates';\nimport { validatePredicate, USER_AGENT_SUFFIX_DATASTORE } from '../../util';\nimport { getSubscriptionErrorType } from './errorMaps';\nvar logger = new Logger('DataStore');\nexport var CONTROL_MSG;\n\n(function (CONTROL_MSG) {\n  CONTROL_MSG[\"CONNECTED\"] = \"CONNECTED\";\n})(CONTROL_MSG || (CONTROL_MSG = {}));\n\nexport var USER_CREDENTIALS;\n\n(function (USER_CREDENTIALS) {\n  USER_CREDENTIALS[USER_CREDENTIALS[\"none\"] = 0] = \"none\";\n  USER_CREDENTIALS[USER_CREDENTIALS[\"unauth\"] = 1] = \"unauth\";\n  USER_CREDENTIALS[USER_CREDENTIALS[\"auth\"] = 2] = \"auth\";\n})(USER_CREDENTIALS || (USER_CREDENTIALS = {}));\n\nvar SubscriptionProcessor =\n/** @class */\nfunction () {\n  function SubscriptionProcessor(schema, syncPredicates, amplifyConfig, authModeStrategy, errorHandler, amplifyContext) {\n    if (amplifyConfig === void 0) {\n      amplifyConfig = {};\n    }\n\n    if (amplifyContext === void 0) {\n      amplifyContext = {\n        Auth: Auth,\n        API: API,\n        Cache: Cache\n      };\n    }\n\n    this.schema = schema;\n    this.syncPredicates = syncPredicates;\n    this.amplifyConfig = amplifyConfig;\n    this.authModeStrategy = authModeStrategy;\n    this.errorHandler = errorHandler;\n    this.amplifyContext = amplifyContext;\n    this.typeQuery = new WeakMap();\n    this.buffer = [];\n  }\n\n  SubscriptionProcessor.prototype.buildSubscription = function (namespace, model, transformerMutationType, userCredentials, cognitoTokenPayload, oidcTokenPayload, authMode) {\n    var aws_appsync_authenticationType = this.amplifyConfig.aws_appsync_authenticationType;\n\n    var _a = this.getAuthorizationInfo(model, userCredentials, aws_appsync_authenticationType, cognitoTokenPayload, oidcTokenPayload, authMode) || {},\n        isOwner = _a.isOwner,\n        ownerField = _a.ownerField,\n        ownerValue = _a.ownerValue;\n\n    var _b = __read(buildSubscriptionGraphQLOperation(namespace, model, transformerMutationType, isOwner, ownerField), 3),\n        opType = _b[0],\n        opName = _b[1],\n        query = _b[2];\n\n    return {\n      authMode: authMode,\n      opType: opType,\n      opName: opName,\n      query: query,\n      isOwner: isOwner,\n      ownerField: ownerField,\n      ownerValue: ownerValue\n    };\n  };\n\n  SubscriptionProcessor.prototype.getAuthorizationInfo = function (model, userCredentials, defaultAuthType, cognitoTokenPayload, oidcTokenPayload, authMode) {\n    if (cognitoTokenPayload === void 0) {\n      cognitoTokenPayload = {};\n    }\n\n    if (oidcTokenPayload === void 0) {\n      oidcTokenPayload = {};\n    }\n\n    var rules = getAuthorizationRules(model); // Return null if user doesn't have proper credentials for private API with IAM auth\n\n    var iamPrivateAuth = authMode === GRAPHQL_AUTH_MODE.AWS_IAM && rules.find(function (rule) {\n      return rule.authStrategy === 'private' && rule.provider === 'iam';\n    });\n\n    if (iamPrivateAuth && userCredentials === USER_CREDENTIALS.unauth) {\n      return null;\n    } // Group auth should take precedence over owner auth, so we are checking\n    // if rule(s) have group authorization as well as if either the Cognito or\n    // OIDC token has a groupClaim. If so, we are returning auth info before\n    // any further owner-based auth checks.\n\n\n    var groupAuthRules = rules.filter(function (rule) {\n      return rule.authStrategy === 'groups' && ['userPools', 'oidc'].includes(rule.provider);\n    });\n    var validGroup = (authMode === GRAPHQL_AUTH_MODE.AMAZON_COGNITO_USER_POOLS || authMode === GRAPHQL_AUTH_MODE.OPENID_CONNECT) && groupAuthRules.find(function (groupAuthRule) {\n      // validate token against groupClaim\n      var cognitoUserGroups = getUserGroupsFromToken(cognitoTokenPayload, groupAuthRule);\n      var oidcUserGroups = getUserGroupsFromToken(oidcTokenPayload, groupAuthRule);\n      return __spread(cognitoUserGroups, oidcUserGroups).find(function (userGroup) {\n        return groupAuthRule.groups.find(function (group) {\n          return group === userGroup;\n        });\n      });\n    });\n\n    if (validGroup) {\n      return {\n        authMode: authMode,\n        isOwner: false\n      };\n    } // Owner auth needs additional values to be returned in order to create the subscription with\n    // the correct parameters so we are getting the owner value from the Cognito token via the\n    // identityClaim from the auth rule.\n\n\n    var cognitoOwnerAuthRules = authMode === GRAPHQL_AUTH_MODE.AMAZON_COGNITO_USER_POOLS ? rules.filter(function (rule) {\n      return rule.authStrategy === 'owner' && rule.provider === 'userPools';\n    }) : [];\n    var ownerAuthInfo;\n    cognitoOwnerAuthRules.forEach(function (ownerAuthRule) {\n      var ownerValue = cognitoTokenPayload[ownerAuthRule.identityClaim];\n\n      if (ownerValue) {\n        ownerAuthInfo = {\n          authMode: GRAPHQL_AUTH_MODE.AMAZON_COGNITO_USER_POOLS,\n          isOwner: ownerAuthRule.areSubscriptionsPublic ? false : true,\n          ownerField: ownerAuthRule.ownerField,\n          ownerValue: ownerValue\n        };\n      }\n    });\n\n    if (ownerAuthInfo) {\n      return ownerAuthInfo;\n    } // Owner auth needs additional values to be returned in order to create the subscription with\n    // the correct parameters so we are getting the owner value from the OIDC token via the\n    // identityClaim from the auth rule.\n\n\n    var oidcOwnerAuthRules = authMode === GRAPHQL_AUTH_MODE.OPENID_CONNECT ? rules.filter(function (rule) {\n      return rule.authStrategy === 'owner' && rule.provider === 'oidc';\n    }) : [];\n    oidcOwnerAuthRules.forEach(function (ownerAuthRule) {\n      var ownerValue = oidcTokenPayload[ownerAuthRule.identityClaim];\n\n      if (ownerValue) {\n        ownerAuthInfo = {\n          authMode: GRAPHQL_AUTH_MODE.OPENID_CONNECT,\n          isOwner: ownerAuthRule.areSubscriptionsPublic ? false : true,\n          ownerField: ownerAuthRule.ownerField,\n          ownerValue: ownerValue\n        };\n      }\n    });\n\n    if (ownerAuthInfo) {\n      return ownerAuthInfo;\n    } // Fallback: return authMode or default auth type\n\n\n    return {\n      authMode: authMode || defaultAuthType,\n      isOwner: false\n    };\n  };\n\n  SubscriptionProcessor.prototype.hubQueryCompletionListener = function (completed, capsule) {\n    var event = capsule.payload.event;\n\n    if (event === PUBSUB_CONTROL_MSG.SUBSCRIPTION_ACK) {\n      completed();\n    }\n  };\n\n  SubscriptionProcessor.prototype.start = function () {\n    var _this = this;\n\n    var ctlObservable = new Observable(function (observer) {\n      var promises = []; // Creating subs for each model/operation combo so they can be unsubscribed\n      // independently, since the auth retry behavior is asynchronous.\n\n      var subscriptions = {};\n      var cognitoTokenPayload, oidcTokenPayload;\n      var userCredentials = USER_CREDENTIALS.none;\n\n      (function () {\n        return __awaiter(_this, void 0, void 0, function () {\n          var credentials, err_1, session, err_2, _a, aws_cognito_region, AuthConfig, token, federatedInfo, currentUser, payload, err_3;\n\n          var _this = this;\n\n          return __generator(this, function (_b) {\n            switch (_b.label) {\n              case 0:\n                _b.trys.push([0, 2,, 3]);\n\n                return [4\n                /*yield*/\n                , this.amplifyContext.Auth.currentCredentials()];\n\n              case 1:\n                credentials = _b.sent();\n                userCredentials = credentials.authenticated ? USER_CREDENTIALS.auth : USER_CREDENTIALS.unauth;\n                return [3\n                /*break*/\n                , 3];\n\n              case 2:\n                err_1 = _b.sent();\n                return [3\n                /*break*/\n                , 3];\n\n              case 3:\n                _b.trys.push([3, 5,, 6]);\n\n                return [4\n                /*yield*/\n                , this.amplifyContext.Auth.currentSession()];\n\n              case 4:\n                session = _b.sent();\n                cognitoTokenPayload = session.getIdToken().decodePayload();\n                return [3\n                /*break*/\n                , 6];\n\n              case 5:\n                err_2 = _b.sent();\n                return [3\n                /*break*/\n                , 6];\n\n              case 6:\n                _b.trys.push([6, 11,, 12]);\n\n                _a = this.amplifyConfig, aws_cognito_region = _a.aws_cognito_region, AuthConfig = _a.Auth;\n\n                if (!aws_cognito_region || AuthConfig && !AuthConfig.region) {\n                  throw 'Auth is not configured';\n                }\n\n                token = void 0;\n                return [4\n                /*yield*/\n                , this.amplifyContext.Cache.getItem('federatedInfo')];\n\n              case 7:\n                federatedInfo = _b.sent();\n                if (!federatedInfo) return [3\n                /*break*/\n                , 8];\n                token = federatedInfo.token;\n                return [3\n                /*break*/\n                , 10];\n\n              case 8:\n                return [4\n                /*yield*/\n                , this.amplifyContext.Auth.currentAuthenticatedUser()];\n\n              case 9:\n                currentUser = _b.sent();\n\n                if (currentUser) {\n                  token = currentUser.token;\n                }\n\n                _b.label = 10;\n\n              case 10:\n                if (token) {\n                  payload = token.split('.')[1];\n                  oidcTokenPayload = JSON.parse(Buffer.from(payload, 'base64').toString('utf8'));\n                }\n\n                return [3\n                /*break*/\n                , 12];\n\n              case 11:\n                err_3 = _b.sent();\n                logger.debug('error getting OIDC JWT', err_3);\n                return [3\n                /*break*/\n                , 12];\n\n              case 12:\n                Object.values(this.schema.namespaces).forEach(function (namespace) {\n                  Object.values(namespace.models).filter(function (_a) {\n                    var syncable = _a.syncable;\n                    return syncable;\n                  }).forEach(function (modelDefinition) {\n                    return __awaiter(_this, void 0, void 0, function () {\n                      var modelAuthModes, readAuthModes, operations, operationAuthModeAttempts, authModeRetry;\n\n                      var _a, _b, _c;\n\n                      var _this = this;\n\n                      return __generator(this, function (_d) {\n                        switch (_d.label) {\n                          case 0:\n                            return [4\n                            /*yield*/\n                            , getModelAuthModes({\n                              authModeStrategy: this.authModeStrategy,\n                              defaultAuthMode: this.amplifyConfig.aws_appsync_authenticationType,\n                              modelName: modelDefinition.name,\n                              schema: this.schema\n                            })];\n\n                          case 1:\n                            modelAuthModes = _d.sent();\n                            readAuthModes = modelAuthModes.READ;\n                            subscriptions = __assign(__assign({}, subscriptions), (_a = {}, _a[modelDefinition.name] = (_b = {}, _b[TransformerMutationType.CREATE] = [], _b[TransformerMutationType.UPDATE] = [], _b[TransformerMutationType.DELETE] = [], _b), _a));\n                            operations = [TransformerMutationType.CREATE, TransformerMutationType.UPDATE, TransformerMutationType.DELETE];\n                            operationAuthModeAttempts = (_c = {}, _c[TransformerMutationType.CREATE] = 0, _c[TransformerMutationType.UPDATE] = 0, _c[TransformerMutationType.DELETE] = 0, _c);\n\n                            authModeRetry = function (operation) {\n                              return __awaiter(_this, void 0, void 0, function () {\n                                var _a, transformerMutationType, opName, query, isOwner, ownerField, ownerValue, authMode, authToken, variables, userAgentSuffix, queryObservable, subscriptionReadyCallback;\n\n                                var _this = this;\n\n                                return __generator(this, function (_b) {\n                                  switch (_b.label) {\n                                    case 0:\n                                      _a = this.buildSubscription(namespace, modelDefinition, operation, userCredentials, cognitoTokenPayload, oidcTokenPayload, readAuthModes[operationAuthModeAttempts[operation]]), transformerMutationType = _a.opType, opName = _a.opName, query = _a.query, isOwner = _a.isOwner, ownerField = _a.ownerField, ownerValue = _a.ownerValue, authMode = _a.authMode;\n                                      return [4\n                                      /*yield*/\n                                      , getTokenForCustomAuth(authMode, this.amplifyConfig)];\n\n                                    case 1:\n                                      authToken = _b.sent();\n                                      variables = {};\n\n                                      if (isOwner) {\n                                        if (!ownerValue) {\n                                          observer.error('Owner field required, sign in is needed in order to perform this operation');\n                                          return [2\n                                          /*return*/\n                                          ];\n                                        }\n\n                                        variables[ownerField] = ownerValue;\n                                      }\n\n                                      logger.debug(\"Attempting \" + operation + \" subscription with authMode: \" + readAuthModes[operationAuthModeAttempts[operation]]);\n                                      userAgentSuffix = USER_AGENT_SUFFIX_DATASTORE;\n                                      queryObservable = this.amplifyContext.API.graphql(__assign(__assign({\n                                        query: query,\n                                        variables: variables\n                                      }, {\n                                        authMode: authMode\n                                      }), {\n                                        authToken: authToken,\n                                        userAgentSuffix: userAgentSuffix\n                                      }));\n                                      subscriptions[modelDefinition.name][transformerMutationType].push(queryObservable.map(function (_a) {\n                                        var value = _a.value;\n                                        return value;\n                                      }).subscribe({\n                                        next: function (_a) {\n                                          var data = _a.data,\n                                              errors = _a.errors;\n\n                                          if (Array.isArray(errors) && errors.length > 0) {\n                                            var messages = errors.map(function (_a) {\n                                              var message = _a.message;\n                                              return message;\n                                            });\n                                            logger.warn(\"Skipping incoming subscription. Messages: \" + messages.join('\\n'));\n\n                                            _this.drainBuffer();\n\n                                            return;\n                                          }\n\n                                          var predicatesGroup = ModelPredicateCreator.getPredicates(_this.syncPredicates.get(modelDefinition), false);\n                                          var _b = data,\n                                              _c = opName,\n                                              record = _b[_c]; // checking incoming subscription against syncPredicate.\n                                          // once AppSync implements filters on subscriptions, we'll be\n                                          // able to set these when establishing the subscription instead.\n                                          // Until then, we'll need to filter inbound\n\n                                          if (_this.passesPredicateValidation(record, predicatesGroup)) {\n                                            _this.pushToBuffer(transformerMutationType, modelDefinition, record);\n                                          }\n\n                                          _this.drainBuffer();\n                                        },\n                                        error: function (subscriptionError) {\n                                          return __awaiter(_this, void 0, void 0, function () {\n                                            var _a, _b, _c, _d, message, e_1;\n\n                                            return __generator(this, function (_e) {\n                                              switch (_e.label) {\n                                                case 0:\n                                                  _a = subscriptionError.error, _b = __read((_a === void 0 ? {\n                                                    errors: []\n                                                  } : _a).errors, 1), _c = _b[0], _d = (_c === void 0 ? {} : _c).message, message = _d === void 0 ? '' : _d;\n\n                                                  if (message.includes(PUBSUB_CONTROL_MSG.REALTIME_SUBSCRIPTION_INIT_ERROR) || message.includes(PUBSUB_CONTROL_MSG.CONNECTION_FAILED)) {\n                                                    // Unsubscribe and clear subscription array for model/operation\n                                                    subscriptions[modelDefinition.name][transformerMutationType].forEach(function (subscription) {\n                                                      return subscription.unsubscribe();\n                                                    });\n                                                    subscriptions[modelDefinition.name][transformerMutationType] = [];\n                                                    operationAuthModeAttempts[operation]++;\n\n                                                    if (operationAuthModeAttempts[operation] >= readAuthModes.length) {\n                                                      // last auth mode retry. Continue with error\n                                                      logger.debug(operation + \" subscription failed with authMode: \" + readAuthModes[operationAuthModeAttempts[operation] - 1]);\n                                                    } else {\n                                                      // retry with different auth mode. Do not trigger\n                                                      // observer error or error handler\n                                                      logger.debug(operation + \" subscription failed with authMode: \" + readAuthModes[operationAuthModeAttempts[operation] - 1] + \". Retrying with authMode: \" + readAuthModes[operationAuthModeAttempts[operation]]);\n                                                      authModeRetry(operation);\n                                                      return [2\n                                                      /*return*/\n                                                      ];\n                                                    }\n                                                  }\n\n                                                  logger.warn('subscriptionError', message);\n                                                  _e.label = 1;\n\n                                                case 1:\n                                                  _e.trys.push([1, 3,, 4]);\n\n                                                  return [4\n                                                  /*yield*/\n                                                  , this.errorHandler({\n                                                    recoverySuggestion: 'Ensure app code is up to date, auth directives exist and are correct on each model, and that server-side data has not been invalidated by a schema change. If the problem persists, search for or create an issue: https://github.com/aws-amplify/amplify-js/issues',\n                                                    localModel: null,\n                                                    message: message,\n                                                    model: modelDefinition.name,\n                                                    operation: operation,\n                                                    errorType: getSubscriptionErrorType(subscriptionError),\n                                                    process: ProcessName.subscribe,\n                                                    remoteModel: null,\n                                                    cause: subscriptionError\n                                                  })];\n\n                                                case 2:\n                                                  _e.sent();\n\n                                                  return [3\n                                                  /*break*/\n                                                  , 4];\n\n                                                case 3:\n                                                  e_1 = _e.sent();\n                                                  logger.error('Subscription error handler failed with:', e_1);\n                                                  return [3\n                                                  /*break*/\n                                                  , 4];\n\n                                                case 4:\n                                                  if (typeof subscriptionReadyCallback === 'function') {\n                                                    subscriptionReadyCallback();\n                                                  }\n\n                                                  if (message.includes('\"errorType\":\"Unauthorized\"') || message.includes('\"errorType\":\"OperationDisabled\"')) {\n                                                    return [2\n                                                    /*return*/\n                                                    ];\n                                                  }\n\n                                                  observer.error(message);\n                                                  return [2\n                                                  /*return*/\n                                                  ];\n                                              }\n                                            });\n                                          });\n                                        }\n                                      }));\n                                      promises.push(function () {\n                                        return __awaiter(_this, void 0, void 0, function () {\n                                          var boundFunction;\n\n                                          var _this = this;\n\n                                          return __generator(this, function (_a) {\n                                            switch (_a.label) {\n                                              case 0:\n                                                return [4\n                                                /*yield*/\n                                                , new Promise(function (res) {\n                                                  subscriptionReadyCallback = res;\n                                                  boundFunction = _this.hubQueryCompletionListener.bind(_this, res);\n                                                  Hub.listen('api', boundFunction);\n                                                })];\n\n                                              case 1:\n                                                _a.sent();\n\n                                                Hub.remove('api', boundFunction);\n                                                return [2\n                                                /*return*/\n                                                ];\n                                            }\n                                          });\n                                        });\n                                      }());\n                                      return [2\n                                      /*return*/\n                                      ];\n                                  }\n                                });\n                              });\n                            };\n\n                            operations.forEach(function (op) {\n                              return authModeRetry(op);\n                            });\n                            return [2\n                            /*return*/\n                            ];\n                        }\n                      });\n                    });\n                  });\n                });\n                Promise.all(promises).then(function () {\n                  return observer.next(CONTROL_MSG.CONNECTED);\n                });\n                return [2\n                /*return*/\n                ];\n            }\n          });\n        });\n      })();\n\n      return function () {\n        Object.keys(subscriptions).forEach(function (modelName) {\n          subscriptions[modelName][TransformerMutationType.CREATE].forEach(function (subscription) {\n            return subscription.unsubscribe();\n          });\n          subscriptions[modelName][TransformerMutationType.UPDATE].forEach(function (subscription) {\n            return subscription.unsubscribe();\n          });\n          subscriptions[modelName][TransformerMutationType.DELETE].forEach(function (subscription) {\n            return subscription.unsubscribe();\n          });\n        });\n      };\n    });\n    var dataObservable = new Observable(function (observer) {\n      _this.dataObserver = observer;\n\n      _this.drainBuffer();\n\n      return function () {\n        _this.dataObserver = null;\n      };\n    });\n    return [ctlObservable, dataObservable];\n  };\n\n  SubscriptionProcessor.prototype.passesPredicateValidation = function (record, predicatesGroup) {\n    if (!predicatesGroup) {\n      return true;\n    }\n\n    var predicates = predicatesGroup.predicates,\n        type = predicatesGroup.type;\n    return validatePredicate(record, type, predicates);\n  };\n\n  SubscriptionProcessor.prototype.pushToBuffer = function (transformerMutationType, modelDefinition, data) {\n    this.buffer.push([transformerMutationType, modelDefinition, data]);\n  };\n\n  SubscriptionProcessor.prototype.drainBuffer = function () {\n    var _this = this;\n\n    if (this.dataObserver) {\n      this.buffer.forEach(function (data) {\n        return _this.dataObserver.next(data);\n      });\n      this.buffer = [];\n    }\n  };\n\n  return SubscriptionProcessor;\n}();\n\nexport { SubscriptionProcessor };","map":{"version":3,"mappings":"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","names":["API","GRAPHQL_AUTH_MODE","Auth","Cache","ConsoleLogger","Logger","Hub","CONTROL_MSG","PUBSUB_CONTROL_MSG","Observable","ProcessName","buildSubscriptionGraphQLOperation","getAuthorizationRules","getModelAuthModes","getUserGroupsFromToken","TransformerMutationType","getTokenForCustomAuth","ModelPredicateCreator","validatePredicate","USER_AGENT_SUFFIX_DATASTORE","getSubscriptionErrorType","logger","USER_CREDENTIALS","schema","syncPredicates","amplifyConfig","authModeStrategy","errorHandler","amplifyContext","WeakMap","SubscriptionProcessor","namespace","model","transformerMutationType","userCredentials","cognitoTokenPayload","oidcTokenPayload","authMode","isOwner","ownerField","ownerValue","opType","opName","query","defaultAuthType","rules","iamPrivateAuth","AWS_IAM","find","authStrategy","rule","provider","unauth","groupAuthRules","filter","includes","validGroup","AMAZON_COGNITO_USER_POOLS","OPENID_CONNECT","cognitoUserGroups","groupAuthRule","oidcUserGroups","__spread","groups","userGroup","cognitoOwnerAuthRules","ownerAuthInfo","forEach","ownerAuthRule","identityClaim","areSubscriptionsPublic","oidcOwnerAuthRules","completed","capsule","event","SUBSCRIPTION_ACK","ctlObservable","promises","subscriptions","none","currentCredentials","credentials","_b","authenticated","auth","currentSession","session","getIdToken","decodePayload","_a","aws_cognito_region","AuthConfig","region","token","getItem","federatedInfo","currentAuthenticatedUser","currentUser","payload","split","JSON","parse","Buffer","from","toString","debug","err_3","Object","values","namespaces","models","syncable","modelDefinition","defaultAuthMode","aws_appsync_authenticationType","modelName","name","modelAuthModes","_d","readAuthModes","READ","CREATE","UPDATE","DELETE","operations","operationAuthModeAttempts","_c","authModeRetry","operation","buildSubscription","authToken","variables","observer","error","userAgentSuffix","queryObservable","graphql","__assign","push","map","value","subscribe","next","data","errors","Array","isArray","length","messages","message","warn","join","_this","drainBuffer","predicatesGroup","getPredicates","get","passesPredicateValidation","record","pushToBuffer","subscriptionError","REALTIME_SUBSCRIPTION_INIT_ERROR","CONNECTION_FAILED","unsubscribe","recoverySuggestion","localModel","errorType","process","remoteModel","cause","_e","e_1","subscriptionReadyCallback","Promise","res","boundFunction","hubQueryCompletionListener","bind","listen","remove","op","all","then","CONNECTED","keys","dataObservable","dataObserver","type","predicates","buffer"],"sources":["C:\\Users\\lmore\\OneDrive\\Documents\\GitHub\\JacksOfAllTrades\\jacksofalltrades\\node_modules\\@aws-amplify\\datastore\\src\\sync\\processors\\subscription.ts"],"sourcesContent":["import API, { GraphQLResult, GRAPHQL_AUTH_MODE } from '@aws-amplify/api';\nimport { Auth } from '@aws-amplify/auth';\nimport Cache from '@aws-amplify/cache';\nimport { ConsoleLogger as Logger, Hub, HubCapsule } from '@aws-amplify/core';\nimport { CONTROL_MSG as PUBSUB_CONTROL_MSG } from '@aws-amplify/pubsub';\nimport Observable, { ZenObservable } from 'zen-observable-ts';\nimport {\n\tInternalSchema,\n\tPersistentModel,\n\tSchemaModel,\n\tSchemaNamespace,\n\tPredicatesGroup,\n\tModelPredicate,\n\tAuthModeStrategy,\n\tErrorHandler,\n\tProcessName,\n\tAmplifyContext,\n} from '../../types';\nimport {\n\tbuildSubscriptionGraphQLOperation,\n\tgetAuthorizationRules,\n\tgetModelAuthModes,\n\tgetUserGroupsFromToken,\n\tTransformerMutationType,\n\tgetTokenForCustomAuth,\n} from '../utils';\nimport { ModelPredicateCreator } from '../../predicates';\nimport { validatePredicate, USER_AGENT_SUFFIX_DATASTORE } from '../../util';\nimport { getSubscriptionErrorType } from './errorMaps';\n\nconst logger = new Logger('DataStore');\n\nexport enum CONTROL_MSG {\n\tCONNECTED = 'CONNECTED',\n}\n\nexport enum USER_CREDENTIALS {\n\t'none',\n\t'unauth',\n\t'auth',\n}\n\ntype AuthorizationInfo = {\n\tauthMode: GRAPHQL_AUTH_MODE;\n\tisOwner: boolean;\n\townerField?: string;\n\townerValue?: string;\n};\n\nclass SubscriptionProcessor {\n\tprivate readonly typeQuery = new WeakMap<\n\t\tSchemaModel,\n\t\t[TransformerMutationType, string, string][]\n\t>();\n\tprivate buffer: [TransformerMutationType, SchemaModel, PersistentModel][] =\n\t\t[];\n\tprivate dataObserver: ZenObservable.Observer<any>;\n\n\tconstructor(\n\t\tprivate readonly schema: InternalSchema,\n\t\tprivate readonly syncPredicates: WeakMap<SchemaModel, ModelPredicate<any>>,\n\t\tprivate readonly amplifyConfig: Record<string, any> = {},\n\t\tprivate readonly authModeStrategy: AuthModeStrategy,\n\t\tprivate readonly errorHandler: ErrorHandler,\n\t\tprivate readonly amplifyContext: AmplifyContext = { Auth, API, Cache }\n\t) {}\n\n\tprivate buildSubscription(\n\t\tnamespace: SchemaNamespace,\n\t\tmodel: SchemaModel,\n\t\ttransformerMutationType: TransformerMutationType,\n\t\tuserCredentials: USER_CREDENTIALS,\n\t\tcognitoTokenPayload: { [field: string]: any } | undefined,\n\t\toidcTokenPayload: { [field: string]: any } | undefined,\n\t\tauthMode: GRAPHQL_AUTH_MODE\n\t): {\n\t\topType: TransformerMutationType;\n\t\topName: string;\n\t\tquery: string;\n\t\tauthMode: GRAPHQL_AUTH_MODE;\n\t\tisOwner: boolean;\n\t\townerField?: string;\n\t\townerValue?: string;\n\t} {\n\t\tconst { aws_appsync_authenticationType } = this.amplifyConfig;\n\t\tconst { isOwner, ownerField, ownerValue } =\n\t\t\tthis.getAuthorizationInfo(\n\t\t\t\tmodel,\n\t\t\t\tuserCredentials,\n\t\t\t\taws_appsync_authenticationType,\n\t\t\t\tcognitoTokenPayload,\n\t\t\t\toidcTokenPayload,\n\t\t\t\tauthMode\n\t\t\t) || {};\n\n\t\tconst [opType, opName, query] = buildSubscriptionGraphQLOperation(\n\t\t\tnamespace,\n\t\t\tmodel,\n\t\t\ttransformerMutationType,\n\t\t\tisOwner,\n\t\t\townerField\n\t\t);\n\t\treturn { authMode, opType, opName, query, isOwner, ownerField, ownerValue };\n\t}\n\n\tprivate getAuthorizationInfo(\n\t\tmodel: SchemaModel,\n\t\tuserCredentials: USER_CREDENTIALS,\n\t\tdefaultAuthType: GRAPHQL_AUTH_MODE,\n\t\tcognitoTokenPayload: { [field: string]: any } = {},\n\t\toidcTokenPayload: { [field: string]: any } = {},\n\t\tauthMode: GRAPHQL_AUTH_MODE\n\t): AuthorizationInfo {\n\t\tconst rules = getAuthorizationRules(model);\n\n\t\t// Return null if user doesn't have proper credentials for private API with IAM auth\n\t\tconst iamPrivateAuth =\n\t\t\tauthMode === GRAPHQL_AUTH_MODE.AWS_IAM &&\n\t\t\trules.find(\n\t\t\t\trule => rule.authStrategy === 'private' && rule.provider === 'iam'\n\t\t\t);\n\n\t\tif (iamPrivateAuth && userCredentials === USER_CREDENTIALS.unauth) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// Group auth should take precedence over owner auth, so we are checking\n\t\t// if rule(s) have group authorization as well as if either the Cognito or\n\t\t// OIDC token has a groupClaim. If so, we are returning auth info before\n\t\t// any further owner-based auth checks.\n\t\tconst groupAuthRules = rules.filter(\n\t\t\trule =>\n\t\t\t\trule.authStrategy === 'groups' &&\n\t\t\t\t['userPools', 'oidc'].includes(rule.provider)\n\t\t);\n\n\t\tconst validGroup =\n\t\t\t(authMode === GRAPHQL_AUTH_MODE.AMAZON_COGNITO_USER_POOLS ||\n\t\t\t\tauthMode === GRAPHQL_AUTH_MODE.OPENID_CONNECT) &&\n\t\t\tgroupAuthRules.find(groupAuthRule => {\n\t\t\t\t// validate token against groupClaim\n\t\t\t\tconst cognitoUserGroups = getUserGroupsFromToken(\n\t\t\t\t\tcognitoTokenPayload,\n\t\t\t\t\tgroupAuthRule\n\t\t\t\t);\n\t\t\t\tconst oidcUserGroups = getUserGroupsFromToken(\n\t\t\t\t\toidcTokenPayload,\n\t\t\t\t\tgroupAuthRule\n\t\t\t\t);\n\n\t\t\t\treturn [...cognitoUserGroups, ...oidcUserGroups].find(userGroup => {\n\t\t\t\t\treturn groupAuthRule.groups.find(group => group === userGroup);\n\t\t\t\t});\n\t\t\t});\n\n\t\tif (validGroup) {\n\t\t\treturn {\n\t\t\t\tauthMode,\n\t\t\t\tisOwner: false,\n\t\t\t};\n\t\t}\n\n\t\t// Owner auth needs additional values to be returned in order to create the subscription with\n\t\t// the correct parameters so we are getting the owner value from the Cognito token via the\n\t\t// identityClaim from the auth rule.\n\t\tconst cognitoOwnerAuthRules =\n\t\t\tauthMode === GRAPHQL_AUTH_MODE.AMAZON_COGNITO_USER_POOLS\n\t\t\t\t? rules.filter(\n\t\t\t\t\t\trule =>\n\t\t\t\t\t\t\trule.authStrategy === 'owner' && rule.provider === 'userPools'\n\t\t\t\t  )\n\t\t\t\t: [];\n\n\t\tlet ownerAuthInfo: AuthorizationInfo;\n\t\tcognitoOwnerAuthRules.forEach(ownerAuthRule => {\n\t\t\tconst ownerValue = cognitoTokenPayload[ownerAuthRule.identityClaim];\n\n\t\t\tif (ownerValue) {\n\t\t\t\townerAuthInfo = {\n\t\t\t\t\tauthMode: GRAPHQL_AUTH_MODE.AMAZON_COGNITO_USER_POOLS,\n\t\t\t\t\tisOwner: ownerAuthRule.areSubscriptionsPublic ? false : true,\n\t\t\t\t\townerField: ownerAuthRule.ownerField,\n\t\t\t\t\townerValue,\n\t\t\t\t};\n\t\t\t}\n\t\t});\n\n\t\tif (ownerAuthInfo) {\n\t\t\treturn ownerAuthInfo;\n\t\t}\n\n\t\t// Owner auth needs additional values to be returned in order to create the subscription with\n\t\t// the correct parameters so we are getting the owner value from the OIDC token via the\n\t\t// identityClaim from the auth rule.\n\t\tconst oidcOwnerAuthRules =\n\t\t\tauthMode === GRAPHQL_AUTH_MODE.OPENID_CONNECT\n\t\t\t\t? rules.filter(\n\t\t\t\t\t\trule => rule.authStrategy === 'owner' && rule.provider === 'oidc'\n\t\t\t\t  )\n\t\t\t\t: [];\n\n\t\toidcOwnerAuthRules.forEach(ownerAuthRule => {\n\t\t\tconst ownerValue = oidcTokenPayload[ownerAuthRule.identityClaim];\n\n\t\t\tif (ownerValue) {\n\t\t\t\townerAuthInfo = {\n\t\t\t\t\tauthMode: GRAPHQL_AUTH_MODE.OPENID_CONNECT,\n\t\t\t\t\tisOwner: ownerAuthRule.areSubscriptionsPublic ? false : true,\n\t\t\t\t\townerField: ownerAuthRule.ownerField,\n\t\t\t\t\townerValue,\n\t\t\t\t};\n\t\t\t}\n\t\t});\n\n\t\tif (ownerAuthInfo) {\n\t\t\treturn ownerAuthInfo;\n\t\t}\n\n\t\t// Fallback: return authMode or default auth type\n\t\treturn {\n\t\t\tauthMode: authMode || defaultAuthType,\n\t\t\tisOwner: false,\n\t\t};\n\t}\n\n\tprivate hubQueryCompletionListener(completed: Function, capsule: HubCapsule) {\n\t\tconst {\n\t\t\tpayload: { event },\n\t\t} = capsule;\n\n\t\tif (event === PUBSUB_CONTROL_MSG.SUBSCRIPTION_ACK) {\n\t\t\tcompleted();\n\t\t}\n\t}\n\n\tstart(): [\n\t\tObservable<CONTROL_MSG>,\n\t\tObservable<[TransformerMutationType, SchemaModel, PersistentModel]>\n\t] {\n\t\tconst ctlObservable = new Observable<CONTROL_MSG>(observer => {\n\t\t\tconst promises: Promise<void>[] = [];\n\n\t\t\t// Creating subs for each model/operation combo so they can be unsubscribed\n\t\t\t// independently, since the auth retry behavior is asynchronous.\n\t\t\tlet subscriptions: {\n\t\t\t\t[modelName: string]: {\n\t\t\t\t\t[TransformerMutationType.CREATE]: ZenObservable.Subscription[];\n\t\t\t\t\t[TransformerMutationType.UPDATE]: ZenObservable.Subscription[];\n\t\t\t\t\t[TransformerMutationType.DELETE]: ZenObservable.Subscription[];\n\t\t\t\t};\n\t\t\t} = {};\n\t\t\tlet cognitoTokenPayload: { [field: string]: any },\n\t\t\t\toidcTokenPayload: { [field: string]: any };\n\t\t\tlet userCredentials = USER_CREDENTIALS.none;\n\t\t\t(async () => {\n\t\t\t\ttry {\n\t\t\t\t\t// retrieving current AWS Credentials\n\t\t\t\t\tconst credentials =\n\t\t\t\t\t\tawait this.amplifyContext.Auth.currentCredentials();\n\t\t\t\t\tuserCredentials = credentials.authenticated\n\t\t\t\t\t\t? USER_CREDENTIALS.auth\n\t\t\t\t\t\t: USER_CREDENTIALS.unauth;\n\t\t\t\t} catch (err) {\n\t\t\t\t\t// best effort to get AWS credentials\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\t// retrieving current token info from Cognito UserPools\n\t\t\t\t\tconst session = await this.amplifyContext.Auth.currentSession();\n\t\t\t\t\tcognitoTokenPayload = session.getIdToken().decodePayload();\n\t\t\t\t} catch (err) {\n\t\t\t\t\t// best effort to get jwt from Cognito\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\t// Checking for the Cognito region in config to see if Auth is configured\n\t\t\t\t\t// before attempting to get federated token. We're using the Cognito region\n\t\t\t\t\t// because it will be there regardless of user/identity pool being present.\n\t\t\t\t\tconst { aws_cognito_region, Auth: AuthConfig } = this.amplifyConfig;\n\t\t\t\t\tif (!aws_cognito_region || (AuthConfig && !AuthConfig.region)) {\n\t\t\t\t\t\tthrow 'Auth is not configured';\n\t\t\t\t\t}\n\n\t\t\t\t\tlet token;\n\t\t\t\t\t// backwards compatibility\n\t\t\t\t\tconst federatedInfo = await this.amplifyContext.Cache.getItem(\n\t\t\t\t\t\t'federatedInfo'\n\t\t\t\t\t);\n\t\t\t\t\tif (federatedInfo) {\n\t\t\t\t\t\ttoken = federatedInfo.token;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst currentUser =\n\t\t\t\t\t\t\tawait this.amplifyContext.Auth.currentAuthenticatedUser();\n\t\t\t\t\t\tif (currentUser) {\n\t\t\t\t\t\t\ttoken = currentUser.token;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (token) {\n\t\t\t\t\t\tconst payload = token.split('.')[1];\n\t\t\t\t\t\toidcTokenPayload = JSON.parse(\n\t\t\t\t\t\t\tBuffer.from(payload, 'base64').toString('utf8')\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t} catch (err) {\n\t\t\t\t\tlogger.debug('error getting OIDC JWT', err);\n\t\t\t\t\t// best effort to get oidc jwt\n\t\t\t\t}\n\n\t\t\t\tObject.values(this.schema.namespaces).forEach(namespace => {\n\t\t\t\t\tObject.values(namespace.models)\n\t\t\t\t\t\t.filter(({ syncable }) => syncable)\n\t\t\t\t\t\t.forEach(async modelDefinition => {\n\t\t\t\t\t\t\tconst modelAuthModes = await getModelAuthModes({\n\t\t\t\t\t\t\t\tauthModeStrategy: this.authModeStrategy,\n\t\t\t\t\t\t\t\tdefaultAuthMode:\n\t\t\t\t\t\t\t\t\tthis.amplifyConfig.aws_appsync_authenticationType,\n\t\t\t\t\t\t\t\tmodelName: modelDefinition.name,\n\t\t\t\t\t\t\t\tschema: this.schema,\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t// subscriptions are created only based on the READ auth mode(s)\n\t\t\t\t\t\t\tconst readAuthModes = modelAuthModes.READ;\n\n\t\t\t\t\t\t\tsubscriptions = {\n\t\t\t\t\t\t\t\t...subscriptions,\n\t\t\t\t\t\t\t\t[modelDefinition.name]: {\n\t\t\t\t\t\t\t\t\t[TransformerMutationType.CREATE]: [],\n\t\t\t\t\t\t\t\t\t[TransformerMutationType.UPDATE]: [],\n\t\t\t\t\t\t\t\t\t[TransformerMutationType.DELETE]: [],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\tconst operations = [\n\t\t\t\t\t\t\t\tTransformerMutationType.CREATE,\n\t\t\t\t\t\t\t\tTransformerMutationType.UPDATE,\n\t\t\t\t\t\t\t\tTransformerMutationType.DELETE,\n\t\t\t\t\t\t\t];\n\n\t\t\t\t\t\t\tconst operationAuthModeAttempts = {\n\t\t\t\t\t\t\t\t[TransformerMutationType.CREATE]: 0,\n\t\t\t\t\t\t\t\t[TransformerMutationType.UPDATE]: 0,\n\t\t\t\t\t\t\t\t[TransformerMutationType.DELETE]: 0,\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t// Retry failed subscriptions with next auth mode (if available)\n\t\t\t\t\t\t\tconst authModeRetry = async operation => {\n\t\t\t\t\t\t\t\tconst {\n\t\t\t\t\t\t\t\t\topType: transformerMutationType,\n\t\t\t\t\t\t\t\t\topName,\n\t\t\t\t\t\t\t\t\tquery,\n\t\t\t\t\t\t\t\t\tisOwner,\n\t\t\t\t\t\t\t\t\townerField,\n\t\t\t\t\t\t\t\t\townerValue,\n\t\t\t\t\t\t\t\t\tauthMode,\n\t\t\t\t\t\t\t\t} = this.buildSubscription(\n\t\t\t\t\t\t\t\t\tnamespace,\n\t\t\t\t\t\t\t\t\tmodelDefinition,\n\t\t\t\t\t\t\t\t\toperation,\n\t\t\t\t\t\t\t\t\tuserCredentials,\n\t\t\t\t\t\t\t\t\tcognitoTokenPayload,\n\t\t\t\t\t\t\t\t\toidcTokenPayload,\n\t\t\t\t\t\t\t\t\treadAuthModes[operationAuthModeAttempts[operation]]\n\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\tconst authToken = await getTokenForCustomAuth(\n\t\t\t\t\t\t\t\t\tauthMode,\n\t\t\t\t\t\t\t\t\tthis.amplifyConfig\n\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\tconst variables = {};\n\n\t\t\t\t\t\t\t\tif (isOwner) {\n\t\t\t\t\t\t\t\t\tif (!ownerValue) {\n\t\t\t\t\t\t\t\t\t\tobserver.error(\n\t\t\t\t\t\t\t\t\t\t\t'Owner field required, sign in is needed in order to perform this operation'\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tvariables[ownerField] = ownerValue;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tlogger.debug(\n\t\t\t\t\t\t\t\t\t`Attempting ${operation} subscription with authMode: ${\n\t\t\t\t\t\t\t\t\t\treadAuthModes[operationAuthModeAttempts[operation]]\n\t\t\t\t\t\t\t\t\t}`\n\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\tconst userAgentSuffix = USER_AGENT_SUFFIX_DATASTORE;\n\n\t\t\t\t\t\t\t\tconst queryObservable = <\n\t\t\t\t\t\t\t\t\tObservable<{\n\t\t\t\t\t\t\t\t\t\tvalue: GraphQLResult<Record<string, PersistentModel>>;\n\t\t\t\t\t\t\t\t\t}>\n\n\t\t\t\t\t\t\t\t>(<unknown>this.amplifyContext.API.graphql({ query, variables, ...{ authMode }, authToken, userAgentSuffix }));\n\n\t\t\t\t\t\t\t\tlet subscriptionReadyCallback: () => void;\n\n\t\t\t\t\t\t\t\tsubscriptions[modelDefinition.name][\n\t\t\t\t\t\t\t\t\ttransformerMutationType\n\t\t\t\t\t\t\t\t].push(\n\t\t\t\t\t\t\t\t\tqueryObservable\n\t\t\t\t\t\t\t\t\t\t.map(({ value }) => {\n\t\t\t\t\t\t\t\t\t\t\treturn value;\n\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t.subscribe({\n\t\t\t\t\t\t\t\t\t\t\tnext: ({ data, errors }) => {\n\t\t\t\t\t\t\t\t\t\t\t\tif (Array.isArray(errors) && errors.length > 0) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tconst messages = (<\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmessage: string;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}[]\n\t\t\t\t\t\t\t\t\t\t\t\t\t>errors).map(({ message }) => message);\n\n\t\t\t\t\t\t\t\t\t\t\t\t\tlogger.warn(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t`Skipping incoming subscription. Messages: ${messages.join(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'\\n'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t)}`\n\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\t\t\t\tthis.drainBuffer();\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t\tconst predicatesGroup =\n\t\t\t\t\t\t\t\t\t\t\t\t\tModelPredicateCreator.getPredicates(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.syncPredicates.get(modelDefinition),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfalse\n\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\t\t\tconst { [opName]: record } = data;\n\n\t\t\t\t\t\t\t\t\t\t\t\t// checking incoming subscription against syncPredicate.\n\t\t\t\t\t\t\t\t\t\t\t\t// once AppSync implements filters on subscriptions, we'll be\n\t\t\t\t\t\t\t\t\t\t\t\t// able to set these when establishing the subscription instead.\n\t\t\t\t\t\t\t\t\t\t\t\t// Until then, we'll need to filter inbound\n\t\t\t\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\t\t\t\tthis.passesPredicateValidation(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\trecord,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tpredicatesGroup\n\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tthis.pushToBuffer(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttransformerMutationType,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tmodelDefinition,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\trecord\n\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tthis.drainBuffer();\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\terror: async subscriptionError => {\n\t\t\t\t\t\t\t\t\t\t\t\tconst {\n\t\t\t\t\t\t\t\t\t\t\t\t\terror: { errors: [{ message = '' } = {}] } = {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\terrors: [],\n\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t} = subscriptionError;\n\n\t\t\t\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\t\t\t\tmessage.includes(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tPUBSUB_CONTROL_MSG.REALTIME_SUBSCRIPTION_INIT_ERROR\n\t\t\t\t\t\t\t\t\t\t\t\t\t) ||\n\t\t\t\t\t\t\t\t\t\t\t\t\tmessage.includes(PUBSUB_CONTROL_MSG.CONNECTION_FAILED)\n\t\t\t\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t// Unsubscribe and clear subscription array for model/operation\n\t\t\t\t\t\t\t\t\t\t\t\t\tsubscriptions[modelDefinition.name][\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttransformerMutationType\n\t\t\t\t\t\t\t\t\t\t\t\t\t].forEach(subscription => subscription.unsubscribe());\n\t\t\t\t\t\t\t\t\t\t\t\t\tsubscriptions[modelDefinition.name][\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttransformerMutationType\n\t\t\t\t\t\t\t\t\t\t\t\t\t] = [];\n\n\t\t\t\t\t\t\t\t\t\t\t\t\toperationAuthModeAttempts[operation]++;\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\toperationAuthModeAttempts[operation] >=\n\t\t\t\t\t\t\t\t\t\t\t\t\t\treadAuthModes.length\n\t\t\t\t\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// last auth mode retry. Continue with error\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tlogger.debug(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`${operation} subscription failed with authMode: ${\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treadAuthModes[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toperationAuthModeAttempts[operation] - 1\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}`\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// retry with different auth mode. Do not trigger\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// observer error or error handler\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tlogger.debug(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`${operation} subscription failed with authMode: ${\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treadAuthModes[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toperationAuthModeAttempts[operation] - 1\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}. Retrying with authMode: ${\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treadAuthModes[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toperationAuthModeAttempts[operation]\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}`\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tauthModeRetry(operation);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tlogger.warn('subscriptionError', message);\n\n\t\t\t\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\t\t\t\tawait this.errorHandler({\n\t\t\t\t\t\t\t\t\t\t\t\t\t\trecoverySuggestion:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'Ensure app code is up to date, auth directives exist and are correct on each model, and that server-side data has not been invalidated by a schema change. If the problem persists, search for or create an issue: https://github.com/aws-amplify/amplify-js/issues',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tlocalModel: null,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tmodel: modelDefinition.name,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\toperation,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\terrorType:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tgetSubscriptionErrorType(subscriptionError),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tprocess: ProcessName.subscribe,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tremoteModel: null,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tcause: subscriptionError,\n\t\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tlogger.error(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t'Subscription error handler failed with:',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\te\n\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t\tif (typeof subscriptionReadyCallback === 'function') {\n\t\t\t\t\t\t\t\t\t\t\t\t\tsubscriptionReadyCallback();\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\t\t\t\tmessage.includes('\"errorType\":\"Unauthorized\"') ||\n\t\t\t\t\t\t\t\t\t\t\t\t\tmessage.includes('\"errorType\":\"OperationDisabled\"')\n\t\t\t\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tobserver.error(message);\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\tpromises.push(\n\t\t\t\t\t\t\t\t\t(async () => {\n\t\t\t\t\t\t\t\t\t\tlet boundFunction: any;\n\n\t\t\t\t\t\t\t\t\t\tawait new Promise(res => {\n\t\t\t\t\t\t\t\t\t\t\tsubscriptionReadyCallback = res;\n\t\t\t\t\t\t\t\t\t\t\tboundFunction = this.hubQueryCompletionListener.bind(\n\t\t\t\t\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t\t\t\t\tres\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\tHub.listen('api', boundFunction);\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\tHub.remove('api', boundFunction);\n\t\t\t\t\t\t\t\t\t})()\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\toperations.forEach(op => authModeRetry(op));\n\t\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\t\tPromise.all(promises).then(() => observer.next(CONTROL_MSG.CONNECTED));\n\t\t\t})();\n\n\t\t\treturn () => {\n\t\t\t\tObject.keys(subscriptions).forEach(modelName => {\n\t\t\t\t\tsubscriptions[modelName][TransformerMutationType.CREATE].forEach(\n\t\t\t\t\t\tsubscription => subscription.unsubscribe()\n\t\t\t\t\t);\n\t\t\t\t\tsubscriptions[modelName][TransformerMutationType.UPDATE].forEach(\n\t\t\t\t\t\tsubscription => subscription.unsubscribe()\n\t\t\t\t\t);\n\t\t\t\t\tsubscriptions[modelName][TransformerMutationType.DELETE].forEach(\n\t\t\t\t\t\tsubscription => subscription.unsubscribe()\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t};\n\t\t});\n\n\t\tconst dataObservable = new Observable<\n\t\t\t[TransformerMutationType, SchemaModel, PersistentModel]\n\t\t>(observer => {\n\t\t\tthis.dataObserver = observer;\n\t\t\tthis.drainBuffer();\n\n\t\t\treturn () => {\n\t\t\t\tthis.dataObserver = null;\n\t\t\t};\n\t\t});\n\n\t\treturn [ctlObservable, dataObservable];\n\t}\n\n\tprivate passesPredicateValidation(\n\t\trecord: PersistentModel,\n\t\tpredicatesGroup: PredicatesGroup<any>\n\t): boolean {\n\t\tif (!predicatesGroup) {\n\t\t\treturn true;\n\t\t}\n\n\t\tconst { predicates, type } = predicatesGroup;\n\n\t\treturn validatePredicate(record, type, predicates);\n\t}\n\n\tprivate pushToBuffer(\n\t\ttransformerMutationType: TransformerMutationType,\n\t\tmodelDefinition: SchemaModel,\n\t\tdata: PersistentModel\n\t) {\n\t\tthis.buffer.push([transformerMutationType, modelDefinition, data]);\n\t}\n\n\tprivate drainBuffer() {\n\t\tif (this.dataObserver) {\n\t\t\tthis.buffer.forEach(data => this.dataObserver.next(data));\n\t\t\tthis.buffer = [];\n\t\t}\n\t}\n}\n\nexport { SubscriptionProcessor };\n"]},"metadata":{},"sourceType":"module"}