{"ast":null,"code":"import isEmpty from 'lodash/isEmpty';\nimport isEqual from 'lodash/isEqual';\nimport { v1 as uuid } from 'uuid';\nimport { ConsoleLogger as Logger, JS } from '@aws-amplify/core';\nimport Cache from '@aws-amplify/cache';\nvar PERSONALIZE_CACHE = '_awsct';\nvar PERSONALIZE_CACHE_USERID = '_awsct_uid';\nvar PERSONALIZE_CACHE_SESSIONID = '_awsct_sid';\nvar DEFAULT_CACHE_PREFIX = 'peronslize';\nvar TIMER_INTERVAL = 30 * 1000;\nvar DELIMITER = '.';\nvar CACHE_EXPIRY_IN_DAYS = 7;\nvar logger = new Logger('AmazonPersonalizeProvider');\n\nvar SessionInfoManager =\n/** @class */\nfunction () {\n  function SessionInfoManager(prefixKey) {\n    if (prefixKey === void 0) {\n      prefixKey = '';\n    }\n\n    this._isBrowser = JS.browserOrNode().isBrowser;\n    this._timerKey = uuid().substr(0, 15);\n\n    this._refreshTimer();\n  }\n\n  SessionInfoManager.prototype._refreshTimer = function () {\n    if (this._timer) {\n      clearInterval(this._timer);\n    }\n\n    var that = this;\n    this._timer = setInterval(function () {\n      that._timerKey = uuid().substr(0, 15);\n    }, TIMER_INTERVAL);\n  };\n\n  SessionInfoManager.prototype.storeValue = function (key, value) {\n    var today = new Date();\n    var expire = new Date();\n    expire.setTime(today.getTime() + 3600000 * 24 * CACHE_EXPIRY_IN_DAYS);\n    Cache.setItem(this._getCachePrefix(key), value, {\n      expires: expire.getTime()\n    });\n  };\n\n  SessionInfoManager.prototype.retrieveValue = function (key) {\n    return Cache.getItem(this._getCachePrefix(key));\n  };\n\n  SessionInfoManager.prototype._getCachePrefix = function (key) {\n    if (this._isBrowser) {\n      return key + DELIMITER + window.location.host;\n    }\n\n    return DEFAULT_CACHE_PREFIX;\n  };\n\n  SessionInfoManager.prototype.getTimerKey = function () {\n    return this._timerKey;\n  };\n\n  SessionInfoManager.prototype.updateSessionInfo = function (userId, sessionInfo) {\n    var existUserId = sessionInfo.userId;\n    var existSessionId = sessionInfo.sessionId;\n\n    if (this._isRequireNewSession(userId, existUserId, existSessionId)) {\n      var newSessionId = uuid();\n      this.storeValue(PERSONALIZE_CACHE_USERID, userId);\n      this.storeValue(PERSONALIZE_CACHE_SESSIONID, newSessionId);\n      sessionInfo.sessionId = newSessionId;\n    } else if (this._isRequireUpdateSessionInfo(userId, existUserId, existSessionId)) {\n      this.storeValue(PERSONALIZE_CACHE_USERID, userId);\n    }\n\n    sessionInfo.userId = userId;\n  };\n\n  SessionInfoManager.prototype._isRequireUpdateSessionInfo = function (userId, cachedSessionUserId, cachedSessionSessionId) {\n    // anonymouse => sign in : hasSession && s_userId == null && curr_userId !=null\n    var isNoCachedSession = isEmpty(cachedSessionSessionId);\n    return !isNoCachedSession && isEmpty(cachedSessionUserId) && !isEmpty(userId);\n  };\n\n  SessionInfoManager.prototype.retrieveSessionInfo = function (trackingId) {\n    var sessionInfo = {};\n    sessionInfo.trackingId = trackingId;\n    sessionInfo.sessionId = this.retrieveValue(PERSONALIZE_CACHE_SESSIONID);\n    sessionInfo.userId = this.retrieveValue(PERSONALIZE_CACHE_USERID);\n\n    if (isEmpty(sessionInfo.sessionId)) {\n      sessionInfo.sessionId = uuid();\n      this.storeValue(PERSONALIZE_CACHE_SESSIONID, sessionInfo.sessionId);\n    }\n\n    this.storeValue(PERSONALIZE_CACHE, trackingId);\n    return sessionInfo;\n  };\n\n  SessionInfoManager.prototype._isRequireNewSession = function (userId, cachedSessionUserId, cachedSessionSessionId) {\n    // new session => 1. no cached session info 2. signOut: s_userId !=null && curr_userId ==null\n    // 3. switch account: s_userId !=null && curr_userId !=null && s_userId != curr_userId\n    var isNoCachedSession = isEmpty(cachedSessionSessionId);\n    var isSignoutCase = isEmpty(userId) && !isEmpty(cachedSessionUserId);\n    var isSwitchUserCase = !isEmpty(userId) && !isEmpty(cachedSessionUserId) && !isEqual(userId, cachedSessionUserId);\n    return isNoCachedSession || isSignoutCase || isSwitchUserCase;\n  };\n\n  return SessionInfoManager;\n}();\n\nexport { SessionInfoManager };","map":{"version":3,"mappings":"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","names":["isEmpty","isEqual","v1","uuid","ConsoleLogger","Logger","JS","Cache","PERSONALIZE_CACHE","PERSONALIZE_CACHE_USERID","PERSONALIZE_CACHE_SESSIONID","DEFAULT_CACHE_PREFIX","TIMER_INTERVAL","DELIMITER","CACHE_EXPIRY_IN_DAYS","logger","prefixKey","_isBrowser","browserOrNode","isBrowser","_timerKey","substr","_refreshTimer","SessionInfoManager","_timer","clearInterval","that","setInterval","key","value","today","Date","expire","setTime","getTime","setItem","_getCachePrefix","expires","getItem","window","location","host","userId","sessionInfo","existUserId","existSessionId","sessionId","_isRequireNewSession","newSessionId","storeValue","_isRequireUpdateSessionInfo","cachedSessionUserId","cachedSessionSessionId","isNoCachedSession","trackingId","retrieveValue","isSignoutCase","isSwitchUserCase"],"sources":["C:\\Users\\lmore\\OneDrive\\Documents\\GitHub\\JacksOfAllTrades\\jacksofalltrades\\node_modules\\@aws-amplify\\analytics\\src\\Providers\\AmazonPersonalizeHelper\\SessionInfoManager.ts"],"sourcesContent":["/*\n * Copyright 2019-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nimport { SessionInfo } from './DataType';\nimport isEmpty from 'lodash/isEmpty';\nimport isEqual from 'lodash/isEqual';\nimport { v1 as uuid } from 'uuid';\nimport { ConsoleLogger as Logger, JS } from '@aws-amplify/core';\n\nimport Cache from '@aws-amplify/cache';\n\nconst PERSONALIZE_CACHE = '_awsct';\nconst PERSONALIZE_CACHE_USERID = '_awsct_uid';\nconst PERSONALIZE_CACHE_SESSIONID = '_awsct_sid';\nconst DEFAULT_CACHE_PREFIX = 'peronslize';\nconst TIMER_INTERVAL = 30 * 1000;\nconst DELIMITER = '.';\nconst CACHE_EXPIRY_IN_DAYS = 7;\nconst logger = new Logger('AmazonPersonalizeProvider');\n\nexport class SessionInfoManager {\n\tprivate _isBrowser;\n\tprivate _cache;\n\tprivate _timer;\n\tprivate _timerKey;\n\n\tconstructor(prefixKey = '') {\n\t\tthis._isBrowser = JS.browserOrNode().isBrowser;\n\t\tthis._timerKey = uuid().substr(0, 15);\n\t\tthis._refreshTimer();\n\t}\n\n\tprivate _refreshTimer() {\n\t\tif (this._timer) {\n\t\t\tclearInterval(this._timer);\n\t\t}\n\t\tconst that = this;\n\t\tthis._timer = setInterval(() => {\n\t\t\tthat._timerKey = uuid().substr(0, 15);\n\t\t}, TIMER_INTERVAL);\n\t}\n\n\tprivate storeValue(key: string, value: any): void {\n\t\tconst today = new Date();\n\t\tconst expire = new Date();\n\t\texpire.setTime(today.getTime() + 3600000 * 24 * CACHE_EXPIRY_IN_DAYS);\n\t\tCache.setItem(this._getCachePrefix(key), value, {\n\t\t\texpires: expire.getTime(),\n\t\t});\n\t}\n\n\tprivate retrieveValue(key: string): any {\n\t\treturn Cache.getItem(this._getCachePrefix(key));\n\t}\n\n\tprivate _getCachePrefix(key): string {\n\t\tif (this._isBrowser) {\n\t\t\treturn key + DELIMITER + window.location.host;\n\t\t}\n\t\treturn DEFAULT_CACHE_PREFIX;\n\t}\n\n\tpublic getTimerKey() {\n\t\treturn this._timerKey;\n\t}\n\n\tpublic updateSessionInfo(userId: string, sessionInfo: SessionInfo) {\n\t\tconst existUserId = sessionInfo.userId;\n\t\tconst existSessionId = sessionInfo.sessionId;\n\t\tif (this._isRequireNewSession(userId, existUserId, existSessionId)) {\n\t\t\tconst newSessionId = uuid();\n\t\t\tthis.storeValue(PERSONALIZE_CACHE_USERID, userId);\n\t\t\tthis.storeValue(PERSONALIZE_CACHE_SESSIONID, newSessionId);\n\t\t\tsessionInfo.sessionId = newSessionId;\n\t\t} else if (\n\t\t\tthis._isRequireUpdateSessionInfo(userId, existUserId, existSessionId)\n\t\t) {\n\t\t\tthis.storeValue(PERSONALIZE_CACHE_USERID, userId);\n\t\t}\n\t\tsessionInfo.userId = userId;\n\t}\n\n\tprivate _isRequireUpdateSessionInfo(\n\t\tuserId: string,\n\t\tcachedSessionUserId: string,\n\t\tcachedSessionSessionId: string\n\t): boolean {\n\t\t// anonymouse => sign in : hasSession && s_userId == null && curr_userId !=null\n\t\tconst isNoCachedSession: boolean = isEmpty(cachedSessionSessionId);\n\t\treturn (\n\t\t\t!isNoCachedSession && isEmpty(cachedSessionUserId) && !isEmpty(userId)\n\t\t);\n\t}\n\n\tpublic retrieveSessionInfo(trackingId: string): SessionInfo {\n\t\tconst sessionInfo = <SessionInfo>{};\n\t\tsessionInfo.trackingId = trackingId;\n\t\tsessionInfo.sessionId = this.retrieveValue(PERSONALIZE_CACHE_SESSIONID);\n\t\tsessionInfo.userId = this.retrieveValue(PERSONALIZE_CACHE_USERID);\n\t\tif (isEmpty(sessionInfo.sessionId)) {\n\t\t\tsessionInfo.sessionId = uuid();\n\t\t\tthis.storeValue(PERSONALIZE_CACHE_SESSIONID, sessionInfo.sessionId);\n\t\t}\n\t\tthis.storeValue(PERSONALIZE_CACHE, trackingId);\n\t\treturn sessionInfo;\n\t}\n\n\tprivate _isRequireNewSession(\n\t\tuserId: string,\n\t\tcachedSessionUserId: string,\n\t\tcachedSessionSessionId: string\n\t): boolean {\n\t\t// new session => 1. no cached session info 2. signOut: s_userId !=null && curr_userId ==null\n\t\t// 3. switch account: s_userId !=null && curr_userId !=null && s_userId != curr_userId\n\t\tconst isNoCachedSession: boolean = isEmpty(cachedSessionSessionId);\n\t\tconst isSignoutCase: boolean =\n\t\t\tisEmpty(userId) && !isEmpty(cachedSessionUserId);\n\t\tconst isSwitchUserCase: boolean =\n\t\t\t!isEmpty(userId) &&\n\t\t\t!isEmpty(cachedSessionUserId) &&\n\t\t\t!isEqual(userId, cachedSessionUserId);\n\t\treturn isNoCachedSession || isSignoutCase || isSwitchUserCase;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}