{"ast":null,"code":"import { __awaiter, __generator, __values } from \"tslib\";\nimport { isArrayBuffer } from \"@aws-sdk/is-array-buffer\";\nimport { toHex } from \"@aws-sdk/util-hex-encoding\";\nimport { SHA256_HEADER, UNSIGNED_PAYLOAD } from \"./constants\";\n/**\n * @internal\n */\n\nexport function getPayloadHash(_a, hashConstructor) {\n  var headers = _a.headers,\n      body = _a.body;\n  return __awaiter(this, void 0, void 0, function () {\n    var _b, _c, headerName, hashCtor, _d;\n\n    var e_1, _e;\n\n    return __generator(this, function (_f) {\n      switch (_f.label) {\n        case 0:\n          try {\n            for (_b = __values(Object.keys(headers)), _c = _b.next(); !_c.done; _c = _b.next()) {\n              headerName = _c.value;\n\n              if (headerName.toLowerCase() === SHA256_HEADER) {\n                return [2\n                /*return*/\n                , headers[headerName]];\n              }\n            }\n          } catch (e_1_1) {\n            e_1 = {\n              error: e_1_1\n            };\n          } finally {\n            try {\n              if (_c && !_c.done && (_e = _b.return)) _e.call(_b);\n            } finally {\n              if (e_1) throw e_1.error;\n            }\n          }\n\n          if (!(body == undefined)) return [3\n          /*break*/\n          , 1];\n          return [2\n          /*return*/\n          , \"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\"];\n\n        case 1:\n          if (!(typeof body === \"string\" || ArrayBuffer.isView(body) || isArrayBuffer(body))) return [3\n          /*break*/\n          , 3];\n          hashCtor = new hashConstructor();\n          hashCtor.update(body);\n          _d = toHex;\n          return [4\n          /*yield*/\n          , hashCtor.digest()];\n\n        case 2:\n          return [2\n          /*return*/\n          , _d.apply(void 0, [_f.sent()])];\n\n        case 3:\n          // As any defined body that is not a string or binary data is a stream, this\n          // body is unsignable. Attempt to send the request with an unsigned payload,\n          // which may or may not be accepted by the service.\n          return [2\n          /*return*/\n          , UNSIGNED_PAYLOAD];\n      }\n    });\n  });\n}","map":{"version":3,"mappings":";AAAA,SAASA,aAAT,QAA8B,0BAA9B;AAEA,SAASC,KAAT,QAAsB,4BAAtB;AAEA,SAASC,aAAT,EAAwBC,gBAAxB,QAAgD,aAAhD;AAEA;;;;AAGA,OAAM,SAAgBC,cAAhB,CACJC,EADI,EAEJC,eAFI,EAE4B;MAD9BC,OAAO;MAAEC,IAAI;;;;;;;;;;YAGf,KAAyBC,oBAAM,CAACC,IAAP,CAAYH,OAAZ,IAAoBI,cAA7C,EAA6C,QAA7C,EAA6CA,cAA7C,EAA+C;cAApCC,UAAU,WAAV;;cACT,IAAIA,UAAU,CAACC,WAAX,OAA6BX,aAAjC,EAAgD;gBAC9C;gBAAA;gBAAA,EAAOK,OAAO,CAACK,UAAD,CAAd;cACD;YACF;;;;;;;;;;;;;gBAEGJ,IAAI,IAAIM,YAAR;UAAA;UAAA;UACF;UAAA;UAAA,EAAO,kEAAP;;;gBACS,OAAON,IAAP,KAAgB,QAAhB,IAA4BO,WAAW,CAACC,MAAZ,CAAmBR,IAAnB,CAA5B,IAAwDR,aAAa,CAACQ,IAAD,IAArE;UAAA;UAAA;UACHS,QAAQ,GAAG,IAAIX,eAAJ,EAAX;UACNW,QAAQ,CAACC,MAAT,CAAgBV,IAAhB;UACOW;UAAM;UAAA;UAAA,EAAMF,QAAQ,CAACG,MAAT,EAAN;;;UAAb;UAAA;UAAA,EAAOD,kBAAME,SAAN,EAAP;;;UAGF;UACA;UACA;UACA;UAAA;UAAA,EAAOlB,gBAAP;;;;AACD","names":["isArrayBuffer","toHex","SHA256_HEADER","UNSIGNED_PAYLOAD","getPayloadHash","_a","hashConstructor","headers","body","_b","keys","_c","headerName","toLowerCase","undefined","ArrayBuffer","isView","hashCtor","update","_d","digest","_f"],"sources":["C:\\Users\\lmore\\OneDrive\\Documents\\GitHub\\JacksOfAllTrades\\jacksofalltrades\\node_modules\\@aws-sdk\\signature-v4\\src\\getPayloadHash.ts"],"sourcesContent":["import { isArrayBuffer } from \"@aws-sdk/is-array-buffer\";\nimport { HashConstructor, HttpRequest } from \"@aws-sdk/types\";\nimport { toHex } from \"@aws-sdk/util-hex-encoding\";\n\nimport { SHA256_HEADER, UNSIGNED_PAYLOAD } from \"./constants\";\n\n/**\n * @internal\n */\nexport async function getPayloadHash(\n  { headers, body }: HttpRequest,\n  hashConstructor: HashConstructor\n): Promise<string> {\n  for (const headerName of Object.keys(headers)) {\n    if (headerName.toLowerCase() === SHA256_HEADER) {\n      return headers[headerName];\n    }\n  }\n\n  if (body == undefined) {\n    return \"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\";\n  } else if (typeof body === \"string\" || ArrayBuffer.isView(body) || isArrayBuffer(body)) {\n    const hashCtor = new hashConstructor();\n    hashCtor.update(body);\n    return toHex(await hashCtor.digest());\n  }\n\n  // As any defined body that is not a string or binary data is a stream, this\n  // body is unsignable. Attempt to send the request with an unsigned payload,\n  // which may or may not be accepted by the service.\n  return UNSIGNED_PAYLOAD;\n}\n"]},"metadata":{},"sourceType":"module"}