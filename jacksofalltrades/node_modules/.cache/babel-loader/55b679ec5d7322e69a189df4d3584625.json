{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { PollyClient } from \"./PollyClient\";\nimport { DeleteLexiconCommand } from \"./commands/DeleteLexiconCommand\";\nimport { DescribeVoicesCommand } from \"./commands/DescribeVoicesCommand\";\nimport { GetLexiconCommand } from \"./commands/GetLexiconCommand\";\nimport { GetSpeechSynthesisTaskCommand } from \"./commands/GetSpeechSynthesisTaskCommand\";\nimport { ListLexiconsCommand } from \"./commands/ListLexiconsCommand\";\nimport { ListSpeechSynthesisTasksCommand } from \"./commands/ListSpeechSynthesisTasksCommand\";\nimport { PutLexiconCommand } from \"./commands/PutLexiconCommand\";\nimport { StartSpeechSynthesisTaskCommand } from \"./commands/StartSpeechSynthesisTaskCommand\";\nimport { SynthesizeSpeechCommand } from \"./commands/SynthesizeSpeechCommand\";\n/**\n * <p>Amazon Polly is a web service that makes it easy to synthesize speech from\n *       text.</p>\n *          <p>The Amazon Polly service provides API operations for synthesizing high-quality speech\n *       from plain text and Speech Synthesis Markup Language (SSML), along with managing\n *       pronunciations lexicons that enable you to get the best results for your application\n *       domain.</p>\n */\n\nvar Polly =\n/** @class */\nfunction (_super) {\n  __extends(Polly, _super);\n\n  function Polly() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Polly.prototype.deleteLexicon = function (args, optionsOrCb, cb) {\n    var command = new DeleteLexiconCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  Polly.prototype.describeVoices = function (args, optionsOrCb, cb) {\n    var command = new DescribeVoicesCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  Polly.prototype.getLexicon = function (args, optionsOrCb, cb) {\n    var command = new GetLexiconCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  Polly.prototype.getSpeechSynthesisTask = function (args, optionsOrCb, cb) {\n    var command = new GetSpeechSynthesisTaskCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  Polly.prototype.listLexicons = function (args, optionsOrCb, cb) {\n    var command = new ListLexiconsCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  Polly.prototype.listSpeechSynthesisTasks = function (args, optionsOrCb, cb) {\n    var command = new ListSpeechSynthesisTasksCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  Polly.prototype.putLexicon = function (args, optionsOrCb, cb) {\n    var command = new PutLexiconCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  Polly.prototype.startSpeechSynthesisTask = function (args, optionsOrCb, cb) {\n    var command = new StartSpeechSynthesisTaskCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  Polly.prototype.synthesizeSpeech = function (args, optionsOrCb, cb) {\n    var command = new SynthesizeSpeechCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  return Polly;\n}(PollyClient);\n\nexport { Polly };","map":{"version":3,"mappings":";AAAA,SAASA,WAAT,QAA4B,eAA5B;AACA,SACEC,oBADF,QAIO,iCAJP;AAKA,SACEC,qBADF,QAIO,kCAJP;AAKA,SAASC,iBAAT,QAAmF,8BAAnF;AACA,SACEC,6BADF,QAIO,0CAJP;AAKA,SACEC,mBADF,QAIO,gCAJP;AAKA,SACEC,+BADF,QAIO,4CAJP;AAKA,SAASC,iBAAT,QAAmF,8BAAnF;AACA,SACEC,+BADF,QAIO,4CAJP;AAKA,SACEC,uBADF,QAIO,oCAJP;AAOA;;;;;;;;;AAQA;AAAA;AAAA;EAA2BC;;EAA3B;;EA2TC;;EAtSQC,gCAAP,UACEC,IADF,EAEEC,WAFF,EAGEC,EAHF,EAG4D;IAE1D,IAAMC,OAAO,GAAG,IAAId,oBAAJ,CAAyBW,IAAzB,CAAhB;;IACA,IAAI,OAAOC,WAAP,KAAuB,UAA3B,EAAuC;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAnB;IACD,CAFD,MAEO,IAAI,OAAOC,EAAP,KAAc,UAAlB,EAA8B;MACnC,IAAI,OAAOD,WAAP,KAAuB,QAA3B,EAAqC,MAAM,IAAII,KAAJ,CAAU,iCAA+B,OAAOJ,WAAhD,CAAN;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAW,IAAI,EAAlC,EAAsCC,EAAtC;IACD,CAHM,MAGA;MACL,OAAO,KAAKE,IAAL,CAAUD,OAAV,EAAmBF,WAAnB,CAAP;IACD;EACF,CAdM;;EAgDAF,iCAAP,UACEC,IADF,EAEEC,WAFF,EAGEC,EAHF,EAG6D;IAE3D,IAAMC,OAAO,GAAG,IAAIb,qBAAJ,CAA0BU,IAA1B,CAAhB;;IACA,IAAI,OAAOC,WAAP,KAAuB,UAA3B,EAAuC;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAnB;IACD,CAFD,MAEO,IAAI,OAAOC,EAAP,KAAc,UAAlB,EAA8B;MACnC,IAAI,OAAOD,WAAP,KAAuB,QAA3B,EAAqC,MAAM,IAAII,KAAJ,CAAU,iCAA+B,OAAOJ,WAAhD,CAAN;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAW,IAAI,EAAlC,EAAsCC,EAAtC;IACD,CAHM,MAGA;MACL,OAAO,KAAKE,IAAL,CAAUD,OAAV,EAAmBF,WAAnB,CAAP;IACD;EACF,CAdM;;EA4BAF,6BAAP,UACEC,IADF,EAEEC,WAFF,EAGEC,EAHF,EAGyD;IAEvD,IAAMC,OAAO,GAAG,IAAIZ,iBAAJ,CAAsBS,IAAtB,CAAhB;;IACA,IAAI,OAAOC,WAAP,KAAuB,UAA3B,EAAuC;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAnB;IACD,CAFD,MAEO,IAAI,OAAOC,EAAP,KAAc,UAAlB,EAA8B;MACnC,IAAI,OAAOD,WAAP,KAAuB,QAA3B,EAAqC,MAAM,IAAII,KAAJ,CAAU,iCAA+B,OAAOJ,WAAhD,CAAN;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAW,IAAI,EAAlC,EAAsCC,EAAtC;IACD,CAHM,MAGA;MACL,OAAO,KAAKE,IAAL,CAAUD,OAAV,EAAmBF,WAAnB,CAAP;IACD;EACF,CAdM;;EAkCAF,yCAAP,UACEC,IADF,EAEEC,WAFF,EAGEC,EAHF,EAGqE;IAEnE,IAAMC,OAAO,GAAG,IAAIX,6BAAJ,CAAkCQ,IAAlC,CAAhB;;IACA,IAAI,OAAOC,WAAP,KAAuB,UAA3B,EAAuC;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAnB;IACD,CAFD,MAEO,IAAI,OAAOC,EAAP,KAAc,UAAlB,EAA8B;MACnC,IAAI,OAAOD,WAAP,KAAuB,QAA3B,EAAqC,MAAM,IAAII,KAAJ,CAAU,iCAA+B,OAAOJ,WAAhD,CAAN;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAW,IAAI,EAAlC,EAAsCC,EAAtC;IACD,CAHM,MAGA;MACL,OAAO,KAAKE,IAAL,CAAUD,OAAV,EAAmBF,WAAnB,CAAP;IACD;EACF,CAdM;;EA+BAF,+BAAP,UACEC,IADF,EAEEC,WAFF,EAGEC,EAHF,EAG2D;IAEzD,IAAMC,OAAO,GAAG,IAAIV,mBAAJ,CAAwBO,IAAxB,CAAhB;;IACA,IAAI,OAAOC,WAAP,KAAuB,UAA3B,EAAuC;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAnB;IACD,CAFD,MAEO,IAAI,OAAOC,EAAP,KAAc,UAAlB,EAA8B;MACnC,IAAI,OAAOD,WAAP,KAAuB,QAA3B,EAAqC,MAAM,IAAII,KAAJ,CAAU,iCAA+B,OAAOJ,WAAhD,CAAN;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAW,IAAI,EAAlC,EAAsCC,EAAtC;IACD,CAHM,MAGA;MACL,OAAO,KAAKE,IAAL,CAAUD,OAAV,EAAmBF,WAAnB,CAAP;IACD;EACF,CAdM;;EAkCAF,2CAAP,UACEC,IADF,EAEEC,WAFF,EAGEC,EAHF,EAGuE;IAErE,IAAMC,OAAO,GAAG,IAAIT,+BAAJ,CAAoCM,IAApC,CAAhB;;IACA,IAAI,OAAOC,WAAP,KAAuB,UAA3B,EAAuC;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAnB;IACD,CAFD,MAEO,IAAI,OAAOC,EAAP,KAAc,UAAlB,EAA8B;MACnC,IAAI,OAAOD,WAAP,KAAuB,QAA3B,EAAqC,MAAM,IAAII,KAAJ,CAAU,iCAA+B,OAAOJ,WAAhD,CAAN;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAW,IAAI,EAAlC,EAAsCC,EAAtC;IACD,CAHM,MAGA;MACL,OAAO,KAAKE,IAAL,CAAUD,OAAV,EAAmBF,WAAnB,CAAP;IACD;EACF,CAdM;;EA+BAF,6BAAP,UACEC,IADF,EAEEC,WAFF,EAGEC,EAHF,EAGyD;IAEvD,IAAMC,OAAO,GAAG,IAAIR,iBAAJ,CAAsBK,IAAtB,CAAhB;;IACA,IAAI,OAAOC,WAAP,KAAuB,UAA3B,EAAuC;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAnB;IACD,CAFD,MAEO,IAAI,OAAOC,EAAP,KAAc,UAAlB,EAA8B;MACnC,IAAI,OAAOD,WAAP,KAAuB,QAA3B,EAAqC,MAAM,IAAII,KAAJ,CAAU,iCAA+B,OAAOJ,WAAhD,CAAN;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAW,IAAI,EAAlC,EAAsCC,EAAtC;IACD,CAHM,MAGA;MACL,OAAO,KAAKE,IAAL,CAAUD,OAAV,EAAmBF,WAAnB,CAAP;IACD;EACF,CAdM;;EAqCAF,2CAAP,UACEC,IADF,EAEEC,WAFF,EAGEC,EAHF,EAGuE;IAErE,IAAMC,OAAO,GAAG,IAAIP,+BAAJ,CAAoCI,IAApC,CAAhB;;IACA,IAAI,OAAOC,WAAP,KAAuB,UAA3B,EAAuC;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAnB;IACD,CAFD,MAEO,IAAI,OAAOC,EAAP,KAAc,UAAlB,EAA8B;MACnC,IAAI,OAAOD,WAAP,KAAuB,QAA3B,EAAqC,MAAM,IAAII,KAAJ,CAAU,iCAA+B,OAAOJ,WAAhD,CAAN;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAW,IAAI,EAAlC,EAAsCC,EAAtC;IACD,CAHM,MAGA;MACL,OAAO,KAAKE,IAAL,CAAUD,OAAV,EAAmBF,WAAnB,CAAP;IACD;EACF,CAdM;;EAoCAF,mCAAP,UACEC,IADF,EAEEC,WAFF,EAGEC,EAHF,EAG+D;IAE7D,IAAMC,OAAO,GAAG,IAAIN,uBAAJ,CAA4BG,IAA5B,CAAhB;;IACA,IAAI,OAAOC,WAAP,KAAuB,UAA3B,EAAuC;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAnB;IACD,CAFD,MAEO,IAAI,OAAOC,EAAP,KAAc,UAAlB,EAA8B;MACnC,IAAI,OAAOD,WAAP,KAAuB,QAA3B,EAAqC,MAAM,IAAII,KAAJ,CAAU,iCAA+B,OAAOJ,WAAhD,CAAN;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAW,IAAI,EAAlC,EAAsCC,EAAtC;IACD,CAHM,MAGA;MACL,OAAO,KAAKE,IAAL,CAAUD,OAAV,EAAmBF,WAAnB,CAAP;IACD;EACF,CAdM;;EAeT;AAAC,CA3TD,CAA2Bb,WAA3B","names":["PollyClient","DeleteLexiconCommand","DescribeVoicesCommand","GetLexiconCommand","GetSpeechSynthesisTaskCommand","ListLexiconsCommand","ListSpeechSynthesisTasksCommand","PutLexiconCommand","StartSpeechSynthesisTaskCommand","SynthesizeSpeechCommand","__extends","Polly","args","optionsOrCb","cb","command","send","Error"],"sources":["C:\\Users\\lmore\\OneDrive\\Documents\\GitHub\\JacksOfAllTrades\\jacksofalltrades\\node_modules\\@aws-sdk\\client-polly\\Polly.ts"],"sourcesContent":["import { PollyClient } from \"./PollyClient\";\nimport {\n  DeleteLexiconCommand,\n  DeleteLexiconCommandInput,\n  DeleteLexiconCommandOutput,\n} from \"./commands/DeleteLexiconCommand\";\nimport {\n  DescribeVoicesCommand,\n  DescribeVoicesCommandInput,\n  DescribeVoicesCommandOutput,\n} from \"./commands/DescribeVoicesCommand\";\nimport { GetLexiconCommand, GetLexiconCommandInput, GetLexiconCommandOutput } from \"./commands/GetLexiconCommand\";\nimport {\n  GetSpeechSynthesisTaskCommand,\n  GetSpeechSynthesisTaskCommandInput,\n  GetSpeechSynthesisTaskCommandOutput,\n} from \"./commands/GetSpeechSynthesisTaskCommand\";\nimport {\n  ListLexiconsCommand,\n  ListLexiconsCommandInput,\n  ListLexiconsCommandOutput,\n} from \"./commands/ListLexiconsCommand\";\nimport {\n  ListSpeechSynthesisTasksCommand,\n  ListSpeechSynthesisTasksCommandInput,\n  ListSpeechSynthesisTasksCommandOutput,\n} from \"./commands/ListSpeechSynthesisTasksCommand\";\nimport { PutLexiconCommand, PutLexiconCommandInput, PutLexiconCommandOutput } from \"./commands/PutLexiconCommand\";\nimport {\n  StartSpeechSynthesisTaskCommand,\n  StartSpeechSynthesisTaskCommandInput,\n  StartSpeechSynthesisTaskCommandOutput,\n} from \"./commands/StartSpeechSynthesisTaskCommand\";\nimport {\n  SynthesizeSpeechCommand,\n  SynthesizeSpeechCommandInput,\n  SynthesizeSpeechCommandOutput,\n} from \"./commands/SynthesizeSpeechCommand\";\nimport { HttpHandlerOptions as __HttpHandlerOptions } from \"@aws-sdk/types\";\n\n/**\n * <p>Amazon Polly is a web service that makes it easy to synthesize speech from\n *       text.</p>\n *          <p>The Amazon Polly service provides API operations for synthesizing high-quality speech\n *       from plain text and Speech Synthesis Markup Language (SSML), along with managing\n *       pronunciations lexicons that enable you to get the best results for your application\n *       domain.</p>\n */\nexport class Polly extends PollyClient {\n  /**\n   * <p>Deletes the specified pronunciation lexicon stored in an AWS Region. A lexicon which\n   *       has been deleted is not available for speech synthesis, nor is it possible to retrieve it\n   *       using either the <code>GetLexicon</code> or <code>ListLexicon</code> APIs.</p>\n   *          <p>For more information, see <a href=\"https://docs.aws.amazon.com/polly/latest/dg/managing-lexicons.html\">Managing\n   *         Lexicons</a>.</p>\n   */\n  public deleteLexicon(\n    args: DeleteLexiconCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<DeleteLexiconCommandOutput>;\n  public deleteLexicon(\n    args: DeleteLexiconCommandInput,\n    cb: (err: any, data?: DeleteLexiconCommandOutput) => void\n  ): void;\n  public deleteLexicon(\n    args: DeleteLexiconCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: DeleteLexiconCommandOutput) => void\n  ): void;\n  public deleteLexicon(\n    args: DeleteLexiconCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: DeleteLexiconCommandOutput) => void),\n    cb?: (err: any, data?: DeleteLexiconCommandOutput) => void\n  ): Promise<DeleteLexiconCommandOutput> | void {\n    const command = new DeleteLexiconCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Returns the list of voices that are available for use when requesting speech synthesis.\n   *       Each voice speaks a specified language, is either male or female, and is identified by an ID,\n   *       which is the ASCII version of the voice name. </p>\n   *\n   *          <p>When synthesizing speech ( <code>SynthesizeSpeech</code> ), you provide the voice ID\n   *       for the voice you want from the list of voices returned by\n   *       <code>DescribeVoices</code>.</p>\n   *\n   *          <p>For example, you want your news reader application to read news in a specific language,\n   *       but giving a user the option to choose the voice. Using the <code>DescribeVoices</code>\n   *       operation you can provide the user with a list of available voices to select from.</p>\n   *\n   *          <p> You can optionally specify a language code to filter the available voices. For\n   *       example, if you specify <code>en-US</code>, the operation returns a list of all available US\n   *       English voices. </p>\n   *          <p>This operation requires permissions to perform the <code>polly:DescribeVoices</code>\n   *       action.</p>\n   */\n  public describeVoices(\n    args: DescribeVoicesCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<DescribeVoicesCommandOutput>;\n  public describeVoices(\n    args: DescribeVoicesCommandInput,\n    cb: (err: any, data?: DescribeVoicesCommandOutput) => void\n  ): void;\n  public describeVoices(\n    args: DescribeVoicesCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: DescribeVoicesCommandOutput) => void\n  ): void;\n  public describeVoices(\n    args: DescribeVoicesCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: DescribeVoicesCommandOutput) => void),\n    cb?: (err: any, data?: DescribeVoicesCommandOutput) => void\n  ): Promise<DescribeVoicesCommandOutput> | void {\n    const command = new DescribeVoicesCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Returns the content of the specified pronunciation lexicon stored in an AWS Region. For\n   *       more information, see <a href=\"https://docs.aws.amazon.com/polly/latest/dg/managing-lexicons.html\">Managing\n   *         Lexicons</a>.</p>\n   */\n  public getLexicon(args: GetLexiconCommandInput, options?: __HttpHandlerOptions): Promise<GetLexiconCommandOutput>;\n  public getLexicon(args: GetLexiconCommandInput, cb: (err: any, data?: GetLexiconCommandOutput) => void): void;\n  public getLexicon(\n    args: GetLexiconCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: GetLexiconCommandOutput) => void\n  ): void;\n  public getLexicon(\n    args: GetLexiconCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: GetLexiconCommandOutput) => void),\n    cb?: (err: any, data?: GetLexiconCommandOutput) => void\n  ): Promise<GetLexiconCommandOutput> | void {\n    const command = new GetLexiconCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Retrieves a specific SpeechSynthesisTask object based on its TaskID. This object contains\n   *       information about the given speech synthesis task, including the status of the task, and a\n   *       link to the S3 bucket containing the output of the task.</p>\n   */\n  public getSpeechSynthesisTask(\n    args: GetSpeechSynthesisTaskCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<GetSpeechSynthesisTaskCommandOutput>;\n  public getSpeechSynthesisTask(\n    args: GetSpeechSynthesisTaskCommandInput,\n    cb: (err: any, data?: GetSpeechSynthesisTaskCommandOutput) => void\n  ): void;\n  public getSpeechSynthesisTask(\n    args: GetSpeechSynthesisTaskCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: GetSpeechSynthesisTaskCommandOutput) => void\n  ): void;\n  public getSpeechSynthesisTask(\n    args: GetSpeechSynthesisTaskCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: GetSpeechSynthesisTaskCommandOutput) => void),\n    cb?: (err: any, data?: GetSpeechSynthesisTaskCommandOutput) => void\n  ): Promise<GetSpeechSynthesisTaskCommandOutput> | void {\n    const command = new GetSpeechSynthesisTaskCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Returns a list of pronunciation lexicons stored in an AWS Region. For more information,\n   *       see <a href=\"https://docs.aws.amazon.com/polly/latest/dg/managing-lexicons.html\">Managing\n   *         Lexicons</a>.</p>\n   */\n  public listLexicons(\n    args: ListLexiconsCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<ListLexiconsCommandOutput>;\n  public listLexicons(args: ListLexiconsCommandInput, cb: (err: any, data?: ListLexiconsCommandOutput) => void): void;\n  public listLexicons(\n    args: ListLexiconsCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: ListLexiconsCommandOutput) => void\n  ): void;\n  public listLexicons(\n    args: ListLexiconsCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: ListLexiconsCommandOutput) => void),\n    cb?: (err: any, data?: ListLexiconsCommandOutput) => void\n  ): Promise<ListLexiconsCommandOutput> | void {\n    const command = new ListLexiconsCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Returns a list of SpeechSynthesisTask objects ordered by their creation date. This\n   *       operation can filter the tasks by their status, for example, allowing users to list only tasks\n   *       that are completed.</p>\n   */\n  public listSpeechSynthesisTasks(\n    args: ListSpeechSynthesisTasksCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<ListSpeechSynthesisTasksCommandOutput>;\n  public listSpeechSynthesisTasks(\n    args: ListSpeechSynthesisTasksCommandInput,\n    cb: (err: any, data?: ListSpeechSynthesisTasksCommandOutput) => void\n  ): void;\n  public listSpeechSynthesisTasks(\n    args: ListSpeechSynthesisTasksCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: ListSpeechSynthesisTasksCommandOutput) => void\n  ): void;\n  public listSpeechSynthesisTasks(\n    args: ListSpeechSynthesisTasksCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: ListSpeechSynthesisTasksCommandOutput) => void),\n    cb?: (err: any, data?: ListSpeechSynthesisTasksCommandOutput) => void\n  ): Promise<ListSpeechSynthesisTasksCommandOutput> | void {\n    const command = new ListSpeechSynthesisTasksCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Stores a pronunciation lexicon in an AWS Region. If a lexicon with the same name\n   *       already exists in the region, it is overwritten by the new lexicon. Lexicon operations have\n   *       eventual consistency, therefore, it might take some time before the lexicon is available to\n   *       the SynthesizeSpeech operation.</p>\n   *          <p>For more information, see <a href=\"https://docs.aws.amazon.com/polly/latest/dg/managing-lexicons.html\">Managing\n   *         Lexicons</a>.</p>\n   */\n  public putLexicon(args: PutLexiconCommandInput, options?: __HttpHandlerOptions): Promise<PutLexiconCommandOutput>;\n  public putLexicon(args: PutLexiconCommandInput, cb: (err: any, data?: PutLexiconCommandOutput) => void): void;\n  public putLexicon(\n    args: PutLexiconCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: PutLexiconCommandOutput) => void\n  ): void;\n  public putLexicon(\n    args: PutLexiconCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: PutLexiconCommandOutput) => void),\n    cb?: (err: any, data?: PutLexiconCommandOutput) => void\n  ): Promise<PutLexiconCommandOutput> | void {\n    const command = new PutLexiconCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Allows the creation of an asynchronous synthesis task, by starting a new\n   *         <code>SpeechSynthesisTask</code>. This operation requires all the standard information\n   *       needed for speech synthesis, plus the name of an Amazon S3 bucket for the service to store the\n   *       output of the synthesis task and two optional parameters (OutputS3KeyPrefix and SnsTopicArn).\n   *       Once the synthesis task is created, this operation will return a SpeechSynthesisTask object,\n   *       which will include an identifier of this task as well as the current status.</p>\n   */\n  public startSpeechSynthesisTask(\n    args: StartSpeechSynthesisTaskCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<StartSpeechSynthesisTaskCommandOutput>;\n  public startSpeechSynthesisTask(\n    args: StartSpeechSynthesisTaskCommandInput,\n    cb: (err: any, data?: StartSpeechSynthesisTaskCommandOutput) => void\n  ): void;\n  public startSpeechSynthesisTask(\n    args: StartSpeechSynthesisTaskCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: StartSpeechSynthesisTaskCommandOutput) => void\n  ): void;\n  public startSpeechSynthesisTask(\n    args: StartSpeechSynthesisTaskCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: StartSpeechSynthesisTaskCommandOutput) => void),\n    cb?: (err: any, data?: StartSpeechSynthesisTaskCommandOutput) => void\n  ): Promise<StartSpeechSynthesisTaskCommandOutput> | void {\n    const command = new StartSpeechSynthesisTaskCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Synthesizes UTF-8 input, plain text or SSML, to a stream of bytes. SSML input must be\n   *       valid, well-formed SSML. Some alphabets might not be available with all the voices (for\n   *       example, Cyrillic might not be read at all by English voices) unless phoneme mapping is used.\n   *       For more information, see <a href=\"https://docs.aws.amazon.com/polly/latest/dg/how-text-to-speech-works.html\">How it\n   *         Works</a>.</p>\n   */\n  public synthesizeSpeech(\n    args: SynthesizeSpeechCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<SynthesizeSpeechCommandOutput>;\n  public synthesizeSpeech(\n    args: SynthesizeSpeechCommandInput,\n    cb: (err: any, data?: SynthesizeSpeechCommandOutput) => void\n  ): void;\n  public synthesizeSpeech(\n    args: SynthesizeSpeechCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: SynthesizeSpeechCommandOutput) => void\n  ): void;\n  public synthesizeSpeech(\n    args: SynthesizeSpeechCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: SynthesizeSpeechCommandOutput) => void),\n    cb?: (err: any, data?: SynthesizeSpeechCommandOutput) => void\n  ): Promise<SynthesizeSpeechCommandOutput> | void {\n    const command = new SynthesizeSpeechCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}