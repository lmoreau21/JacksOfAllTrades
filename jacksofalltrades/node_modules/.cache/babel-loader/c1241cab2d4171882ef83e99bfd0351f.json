{"ast":null,"code":"/**\n * Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nimport { ConsoleLogger as Logger } from '../Logger';\nimport { browserOrNode } from '../JS';\nimport { Amplify } from '../Amplify';\n/**\n * Provides a means to registering a service worker in the browser\n * and communicating with it via postMessage events.\n * https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/\n *\n * postMessage events are currently not supported in all browsers. See:\n * https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API\n *\n * At the minmum this class will register the service worker and listen\n * and attempt to dispatch messages on state change and record analytics\n * events based on the service worker lifecycle.\n */\n\nvar ServiceWorkerClass =\n/** @class */\nfunction () {\n  function ServiceWorkerClass() {\n    // The AWS Amplify logger\n    this._logger = new Logger('ServiceWorker');\n  }\n\n  Object.defineProperty(ServiceWorkerClass.prototype, \"serviceWorker\", {\n    /**\n     * Get the currently active service worker\n     */\n    get: function get() {\n      return this._serviceWorker;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Register the service-worker.js file in the browser\n   * Make sure the service-worker.js is part of the build\n   * for example with Angular, modify the angular-cli.json file\n   * and add to \"assets\" array \"service-worker.js\"\n   * @param {string} - (optional) Service worker file. Defaults to \"/service-worker.js\"\n   * @param {string} - (optional) The service worker scope. Defaults to \"/\"\n   *  - API Doc: https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/register\n   * @returns {Promise}\n   *\t- resolve(ServiceWorkerRegistration)\n   *\t- reject(Error)\n   **/\n\n  ServiceWorkerClass.prototype.register = function (filePath, scope) {\n    var _this = this;\n\n    if (filePath === void 0) {\n      filePath = '/service-worker.js';\n    }\n\n    if (scope === void 0) {\n      scope = '/';\n    }\n\n    this._logger.debug(\"registering \" + filePath);\n\n    this._logger.debug(\"registering service worker with scope \" + scope);\n\n    return new Promise(function (resolve, reject) {\n      if (navigator && 'serviceWorker' in navigator) {\n        navigator.serviceWorker.register(filePath, {\n          scope: scope\n        }).then(function (registration) {\n          if (registration.installing) {\n            _this._serviceWorker = registration.installing;\n          } else if (registration.waiting) {\n            _this._serviceWorker = registration.waiting;\n          } else if (registration.active) {\n            _this._serviceWorker = registration.active;\n          }\n\n          _this._registration = registration;\n\n          _this._setupListeners();\n\n          _this._logger.debug(\"Service Worker Registration Success: \" + registration);\n\n          return resolve(registration);\n        }).catch(function (error) {\n          _this._logger.debug(\"Service Worker Registration Failed \" + error);\n\n          return reject(error);\n        });\n      } else {\n        return reject(new Error('Service Worker not available'));\n      }\n    });\n  };\n  /**\n   * Enable web push notifications. If not subscribed, a new subscription will\n   * be created and registered.\n   * \tTest Push Server: https://web-push-codelab.glitch.me/\n   * \tPush Server Libraries: https://github.com/web-push-libs/\n   * \tAPI Doc: https://developers.google.com/web/fundamentals/codelabs/push-notifications/\n   * @param publicKey\n   * @returns {Promise}\n   * \t- resolve(PushSubscription)\n   *  - reject(Error)\n   */\n\n\n  ServiceWorkerClass.prototype.enablePush = function (publicKey) {\n    var _this = this;\n\n    if (!this._registration) throw new Error('Service Worker not registered');\n    this._publicKey = publicKey;\n    return new Promise(function (resolve, reject) {\n      if (browserOrNode().isBrowser) {\n        _this._registration.pushManager.getSubscription().then(function (subscription) {\n          if (subscription) {\n            _this._subscription = subscription;\n\n            _this._logger.debug(\"User is subscribed to push: \" + JSON.stringify(subscription));\n\n            resolve(subscription);\n          } else {\n            _this._logger.debug(\"User is NOT subscribed to push\");\n\n            return _this._registration.pushManager.subscribe({\n              userVisibleOnly: true,\n              applicationServerKey: _this._urlB64ToUint8Array(publicKey)\n            }).then(function (subscription) {\n              _this._subscription = subscription;\n\n              _this._logger.debug(\"User subscribed: \" + JSON.stringify(subscription));\n\n              resolve(subscription);\n            }).catch(function (error) {\n              _this._logger.error(error);\n            });\n          }\n        });\n      } else {\n        return reject(new Error('Service Worker not available'));\n      }\n    });\n  };\n  /**\n   * Convert a base64 encoded string to a Uint8 array for the push server key\n   * @param base64String\n   */\n\n\n  ServiceWorkerClass.prototype._urlB64ToUint8Array = function (base64String) {\n    var padding = '='.repeat((4 - base64String.length % 4) % 4);\n    var base64 = (base64String + padding).replace(/\\-/g, '+').replace(/_/g, '/');\n    var rawData = window.atob(base64);\n    var outputArray = new Uint8Array(rawData.length);\n\n    for (var i = 0; i < rawData.length; ++i) {\n      outputArray[i] = rawData.charCodeAt(i);\n    }\n\n    return outputArray;\n  };\n  /**\n   * Send a message to the service worker. The service worker needs\n   * to implement `self.addEventListener('message') to handle the\n   * message. This ***currently*** does not work in Safari or IE.\n   * @param {object | string} - An arbitrary JSON object or string message to send to the service worker\n   *\t- see: https://developer.mozilla.org/en-US/docs/Web/API/Transferable\n   * @returns {Promise}\n   **/\n\n\n  ServiceWorkerClass.prototype.send = function (message) {\n    if (this._serviceWorker) {\n      this._serviceWorker.postMessage(typeof message === 'object' ? JSON.stringify(message) : message);\n    }\n  };\n  /**\n   * Listen for service worker state change and message events\n   * https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker/state\n   **/\n\n\n  ServiceWorkerClass.prototype._setupListeners = function () {\n    var _this = this;\n\n    this._serviceWorker.addEventListener('statechange', function (event) {\n      var currentState = _this._serviceWorker.state;\n\n      _this._logger.debug(\"ServiceWorker statechange: \" + currentState);\n\n      if (Amplify.Analytics && typeof Amplify.Analytics.record === 'function') {\n        Amplify.Analytics.record({\n          name: 'ServiceWorker',\n          attributes: {\n            state: currentState\n          }\n        });\n      }\n    });\n\n    this._serviceWorker.addEventListener('message', function (event) {\n      _this._logger.debug(\"ServiceWorker message event: \" + event);\n    });\n  };\n\n  return ServiceWorkerClass;\n}();\n\nexport { ServiceWorkerClass };\n/**\n * @deprecated use named import\n */\n\nexport default ServiceWorkerClass;","map":{"version":3,"mappings":"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","names":["ConsoleLogger","Logger","browserOrNode","Amplify","Object","ServiceWorkerClass","_serviceWorker","filePath","scope","_logger","debug","Promise","resolve","reject","navigator","serviceWorker","register","then","registration","installing","_this","waiting","active","_registration","_setupListeners","catch","error","Error","publicKey","_publicKey","isBrowser","pushManager","getSubscription","subscription","_subscription","JSON","stringify","subscribe","userVisibleOnly","applicationServerKey","_urlB64ToUint8Array","base64String","padding","repeat","length","base64","replace","rawData","window","atob","outputArray","Uint8Array","i","charCodeAt","message","postMessage","addEventListener","currentState","state","Analytics","record","name","attributes","event"],"sources":["C:\\Users\\lmore\\OneDrive\\Documents\\GitHub\\JacksOfAllTrades\\jacksofalltrades\\node_modules\\@aws-amplify\\core\\src\\ServiceWorker\\ServiceWorker.ts"],"sourcesContent":["/**\n * Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nimport { ConsoleLogger as Logger } from '../Logger';\nimport { browserOrNode } from '../JS';\nimport { Amplify } from '../Amplify';\n/**\n * Provides a means to registering a service worker in the browser\n * and communicating with it via postMessage events.\n * https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/\n *\n * postMessage events are currently not supported in all browsers. See:\n * https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API\n *\n * At the minmum this class will register the service worker and listen\n * and attempt to dispatch messages on state change and record analytics\n * events based on the service worker lifecycle.\n */\nexport class ServiceWorkerClass {\n\t// The active service worker will be set once it is registered\n\tprivate _serviceWorker: ServiceWorker;\n\n\t// The service worker registration object\n\tprivate _registration: ServiceWorkerRegistration;\n\n\t// The application server public key for Push\n\t// https://web-push-codelab.glitch.me/\n\tprivate _publicKey: string;\n\n\t// push subscription\n\tprivate _subscription: PushSubscription;\n\n\t// The AWS Amplify logger\n\tprivate _logger: Logger = new Logger('ServiceWorker');\n\n\tconstructor() { }\n\n\t/**\n\t * Get the currently active service worker\n\t */\n\tget serviceWorker(): ServiceWorker {\n\t\treturn this._serviceWorker;\n\t}\n\n\t/**\n\t * Register the service-worker.js file in the browser\n\t * Make sure the service-worker.js is part of the build\n\t * for example with Angular, modify the angular-cli.json file\n\t * and add to \"assets\" array \"service-worker.js\"\n\t * @param {string} - (optional) Service worker file. Defaults to \"/service-worker.js\"\n\t * @param {string} - (optional) The service worker scope. Defaults to \"/\"\n\t *  - API Doc: https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/register\n\t * @returns {Promise}\n\t *\t- resolve(ServiceWorkerRegistration)\n\t *\t- reject(Error)\n\t **/\n\tregister(filePath: string = '/service-worker.js', scope: string = '/') {\n\t\tthis._logger.debug(`registering ${filePath}`);\n\t\tthis._logger.debug(`registering service worker with scope ${scope}`);\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tif (navigator && 'serviceWorker' in navigator) {\n\t\t\t\tnavigator.serviceWorker\n\t\t\t\t\t.register(filePath, {\n\t\t\t\t\t\tscope,\n\t\t\t\t\t})\n\t\t\t\t\t.then(registration => {\n\t\t\t\t\t\tif (registration.installing) {\n\t\t\t\t\t\t\tthis._serviceWorker = registration.installing;\n\t\t\t\t\t\t} else if (registration.waiting) {\n\t\t\t\t\t\t\tthis._serviceWorker = registration.waiting;\n\t\t\t\t\t\t} else if (registration.active) {\n\t\t\t\t\t\t\tthis._serviceWorker = registration.active;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis._registration = registration;\n\t\t\t\t\t\tthis._setupListeners();\n\t\t\t\t\t\tthis._logger.debug(\n\t\t\t\t\t\t\t`Service Worker Registration Success: ${registration}`\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturn resolve(registration);\n\t\t\t\t\t})\n\t\t\t\t\t.catch(error => {\n\t\t\t\t\t\tthis._logger.debug(`Service Worker Registration Failed ${error}`);\n\t\t\t\t\t\treturn reject(error);\n\t\t\t\t\t});\n\t\t\t} else {\n\t\t\t\treturn reject(new Error('Service Worker not available'));\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Enable web push notifications. If not subscribed, a new subscription will\n\t * be created and registered.\n\t * \tTest Push Server: https://web-push-codelab.glitch.me/\n\t * \tPush Server Libraries: https://github.com/web-push-libs/\n\t * \tAPI Doc: https://developers.google.com/web/fundamentals/codelabs/push-notifications/\n\t * @param publicKey\n\t * @returns {Promise}\n\t * \t- resolve(PushSubscription)\n\t *  - reject(Error)\n\t */\n\tenablePush(publicKey: string) {\n\t\tif (!this._registration) throw new Error('Service Worker not registered');\n\t\tthis._publicKey = publicKey;\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tif (browserOrNode().isBrowser) {\n\t\t\t\tthis._registration.pushManager.getSubscription().then(subscription => {\n\t\t\t\t\tif (subscription) {\n\t\t\t\t\t\tthis._subscription = subscription;\n\t\t\t\t\t\tthis._logger.debug(\n\t\t\t\t\t\t\t`User is subscribed to push: ${JSON.stringify(subscription)}`\n\t\t\t\t\t\t);\n\t\t\t\t\t\tresolve(subscription);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._logger.debug(`User is NOT subscribed to push`);\n\t\t\t\t\t\treturn this._registration.pushManager\n\t\t\t\t\t\t\t.subscribe({\n\t\t\t\t\t\t\t\tuserVisibleOnly: true,\n\t\t\t\t\t\t\t\tapplicationServerKey: this._urlB64ToUint8Array(publicKey),\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t.then(subscription => {\n\t\t\t\t\t\t\t\tthis._subscription = subscription;\n\t\t\t\t\t\t\t\tthis._logger.debug(\n\t\t\t\t\t\t\t\t\t`User subscribed: ${JSON.stringify(subscription)}`\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tresolve(subscription);\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t.catch(error => {\n\t\t\t\t\t\t\t\tthis._logger.error(error);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\treturn reject(new Error('Service Worker not available'));\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Convert a base64 encoded string to a Uint8 array for the push server key\n\t * @param base64String\n\t */\n\tprivate _urlB64ToUint8Array(base64String: string) {\n\t\tconst padding = '='.repeat((4 - (base64String.length % 4)) % 4);\n\t\tconst base64 = (base64String + padding)\n\t\t\t.replace(/\\-/g, '+')\n\t\t\t.replace(/_/g, '/');\n\n\t\tconst rawData = window.atob(base64);\n\t\tconst outputArray = new Uint8Array(rawData.length);\n\n\t\tfor (let i = 0; i < rawData.length; ++i) {\n\t\t\toutputArray[i] = rawData.charCodeAt(i);\n\t\t}\n\t\treturn outputArray;\n\t}\n\n\t/**\n\t * Send a message to the service worker. The service worker needs\n\t * to implement `self.addEventListener('message') to handle the\n\t * message. This ***currently*** does not work in Safari or IE.\n\t * @param {object | string} - An arbitrary JSON object or string message to send to the service worker\n\t *\t- see: https://developer.mozilla.org/en-US/docs/Web/API/Transferable\n\t * @returns {Promise}\n\t **/\n\tsend(message: object | string) {\n\t\tif (this._serviceWorker) {\n\t\t\tthis._serviceWorker.postMessage(\n\t\t\t\ttypeof message === 'object' ? JSON.stringify(message) : message\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * Listen for service worker state change and message events\n\t * https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker/state\n\t **/\n\t_setupListeners() {\n\t\tthis._serviceWorker.addEventListener('statechange', event => {\n\t\t\tconst currentState = this._serviceWorker.state;\n\t\t\tthis._logger.debug(`ServiceWorker statechange: ${currentState}`);\n\t\t\tif (Amplify.Analytics && typeof Amplify.Analytics.record === 'function') {\n\t\t\t\tAmplify.Analytics.record({\n\t\t\t\t\tname: 'ServiceWorker',\n\t\t\t\t\tattributes: {\n\t\t\t\t\t\tstate: currentState,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t\tthis._serviceWorker.addEventListener('message', event => {\n\t\t\tthis._logger.debug(`ServiceWorker message event: ${event}`);\n\t\t});\n\t}\n}\n\n/**\n * @deprecated use named import\n */\nexport default ServiceWorkerClass;\n"]},"metadata":{},"sourceType":"module"}