{"ast":null,"code":"import { __asyncGenerator, __asyncValues, __await, __generator } from \"tslib\";\nexport function getUnmarshalledStream(source, options) {\n  var _a;\n\n  return _a = {}, _a[Symbol.asyncIterator] = function () {\n    return __asyncGenerator(this, arguments, function () {\n      var source_1, source_1_1, chunk, message, messageType, unmodeledError, code, exception, deserializedException, error, event, deserialized, e_1_1;\n\n      var _a, _b;\n\n      var e_1, _c;\n\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            _d.trys.push([0, 12, 13, 18]);\n\n            source_1 = __asyncValues(source);\n            _d.label = 1;\n\n          case 1:\n            return [4\n            /*yield*/\n            , __await(source_1.next())];\n\n          case 2:\n            if (!(source_1_1 = _d.sent(), !source_1_1.done)) return [3\n            /*break*/\n            , 11];\n            chunk = source_1_1.value;\n            message = options.eventMarshaller.unmarshall(chunk);\n            messageType = message.headers[\":message-type\"].value;\n            if (!(messageType === \"error\")) return [3\n            /*break*/\n            , 3];\n            unmodeledError = new Error(message.headers[\":error-message\"].value || \"UnknownError\");\n            unmodeledError.name = message.headers[\":error-code\"].value;\n            throw unmodeledError;\n\n          case 3:\n            if (!(messageType === \"exception\")) return [3\n            /*break*/\n            , 5];\n            code = message.headers[\":exception-type\"].value;\n            exception = (_a = {}, _a[code] = message, _a);\n            return [4\n            /*yield*/\n            , __await(options.deserializer(exception))];\n\n          case 4:\n            deserializedException = _d.sent();\n\n            if (deserializedException.$unknown) {\n              error = new Error(options.toUtf8(message.body));\n              error.name = code;\n              throw error;\n            }\n\n            throw deserializedException[code];\n\n          case 5:\n            if (!(messageType === \"event\")) return [3\n            /*break*/\n            , 9];\n            event = (_b = {}, _b[message.headers[\":event-type\"].value] = message, _b);\n            return [4\n            /*yield*/\n            , __await(options.deserializer(event))];\n\n          case 6:\n            deserialized = _d.sent();\n            if (deserialized.$unknown) return [3\n            /*break*/\n            , 10];\n            return [4\n            /*yield*/\n            , __await(deserialized)];\n\n          case 7:\n            return [4\n            /*yield*/\n            , _d.sent()];\n\n          case 8:\n            _d.sent();\n\n            return [3\n            /*break*/\n            , 10];\n\n          case 9:\n            throw Error(\"Unrecognizable event type: \" + message.headers[\":event-type\"].value);\n\n          case 10:\n            return [3\n            /*break*/\n            , 1];\n\n          case 11:\n            return [3\n            /*break*/\n            , 18];\n\n          case 12:\n            e_1_1 = _d.sent();\n            e_1 = {\n              error: e_1_1\n            };\n            return [3\n            /*break*/\n            , 18];\n\n          case 13:\n            _d.trys.push([13,, 16, 17]);\n\n            if (!(source_1_1 && !source_1_1.done && (_c = source_1.return))) return [3\n            /*break*/\n            , 15];\n            return [4\n            /*yield*/\n            , __await(_c.call(source_1))];\n\n          case 14:\n            _d.sent();\n\n            _d.label = 15;\n\n          case 15:\n            return [3\n            /*break*/\n            , 17];\n\n          case 16:\n            if (e_1) throw e_1.error;\n            return [7\n            /*endfinally*/\n            ];\n\n          case 17:\n            return [7\n            /*endfinally*/\n            ];\n\n          case 18:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  }, _a;\n}","map":{"version":3,"mappings":";AASA,OAAM,SAAUA,qBAAV,CACJC,MADI,EAEJC,OAFI,EAEiC;;;EAErC,gBACEC,GAACC,MAAM,CAACC,aAAR,IAAwB;;;;;;;;;;;;;YACIC;;;;;;;;;;;;YAATC,KAAK,mBAAL;YACTC,OAAO,GAAGN,OAAO,CAACO,eAAR,CAAwBC,UAAxB,CAAmCH,KAAnC,CAAV;YACSI,WAAW,GAAKH,OAAO,CAACI,OAAR,CAAgB,eAAhB,EAAgCC,KAAhD;kBACXF,WAAW,KAAK,UAAhB;YAAA;YAAA;YAEIG,cAAc,GAAG,IAAIC,KAAJ,CAAWP,OAAO,CAACI,OAAR,CAAgB,gBAAhB,EAAkCC,KAAlC,IAAsD,cAAjE,CAAjB;YACNC,cAAc,CAACE,IAAf,GAAsBR,OAAO,CAACI,OAAR,CAAgB,aAAhB,EAA+BC,KAArD;YACA,MAAMC,cAAN;;;kBACSH,WAAW,KAAK,cAAhB;YAAA;YAAA;YAEHM,IAAI,GAAGT,OAAO,CAACI,OAAR,CAAgB,iBAAhB,EAAmCC,KAA1C;YACAK,SAAS,aAAKf,GAACc,IAAD,IAAQT,OAAb,EAAoBL,EAApB,CAAT;YAEwB;YAAA;YAAA,UAAMD,OAAO,CAACiB,YAAR,CAAqBD,SAArB,CAAN;;;YAAxBE,qBAAqB,GAAGC,SAAxB;;YACN,IAAID,qBAAqB,CAACE,QAA1B,EAAoC;cAE5BC,KAAK,GAAG,IAAIR,KAAJ,CAAUb,OAAO,CAACsB,MAAR,CAAehB,OAAO,CAACiB,IAAvB,CAAV,CAAR;cACNF,KAAK,CAACP,IAAN,GAAaC,IAAb;cACA,MAAMM,KAAN;YACD;;YACD,MAAMH,qBAAqB,CAACH,IAAD,CAA3B;;;kBACSN,WAAW,KAAK,UAAhB;YAAA;YAAA;YACHe,KAAK,aACTC,GAACnB,OAAO,CAACI,OAAR,CAAgB,aAAhB,EAA+BC,KAAhC,IAAkDL,OADzC,KAAL;YAGe;YAAA;YAAA,UAAMN,OAAO,CAACiB,YAAR,CAAqBO,KAArB,CAAN;;;YAAfE,YAAY,GAAGP,SAAf;YACN,IAAIO,YAAY,CAACN,QAAjB,EAA2B;YAAA;YAAA;;;sBACrBM;;;YAAN;YAAA;YAAA;;;YAAAP;;;;;;;YAEA,MAAMN,KAAK,CAAC,gCAA8BP,OAAO,CAACI,OAAR,CAAgB,aAAhB,EAA+BC,KAA9D,CAAX;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAGL,CAlCH;AAoCD","names":["getUnmarshalledStream","source","options","_a","Symbol","asyncIterator","source_1","chunk","message","eventMarshaller","unmarshall","messageType","headers","value","unmodeledError","Error","name","code","exception","deserializer","deserializedException","_d","$unknown","error","toUtf8","body","event","_b","deserialized"],"sources":["C:\\Users\\lmore\\OneDrive\\Documents\\GitHub\\JacksOfAllTrades\\jacksofalltrades\\node_modules\\@aws-sdk\\eventstream-serde-universal\\src\\getUnmarshalledStream.ts"],"sourcesContent":["import { EventStreamMarshaller as EventMarshaller } from \"@aws-sdk/eventstream-marshaller\";\nimport { Encoder, Message } from \"@aws-sdk/types\";\n\nexport type UnmarshalledStreamOptions<T> = {\n  eventMarshaller: EventMarshaller;\n  deserializer: (input: { [name: string]: Message }) => Promise<T>;\n  toUtf8: Encoder;\n};\n\nexport function getUnmarshalledStream<T extends { [key: string]: any }>(\n  source: AsyncIterable<Uint8Array>,\n  options: UnmarshalledStreamOptions<T>\n): AsyncIterable<T> {\n  return {\n    [Symbol.asyncIterator]: async function* () {\n      for await (const chunk of source) {\n        const message = options.eventMarshaller.unmarshall(chunk);\n        const { value: messageType } = message.headers[\":message-type\"];\n        if (messageType === \"error\") {\n          // Unmodeled exception in event\n          const unmodeledError = new Error((message.headers[\":error-message\"].value as string) || \"UnknownError\");\n          unmodeledError.name = message.headers[\":error-code\"].value as string;\n          throw unmodeledError;\n        } else if (messageType === \"exception\") {\n          // For modeled exception, push it to deserializer and throw after deserializing\n          const code = message.headers[\":exception-type\"].value as string;\n          const exception = { [code]: message };\n          // Get parsed exception event in key(error code) value(structured error) pair.\n          const deserializedException = await options.deserializer(exception);\n          if (deserializedException.$unknown) {\n            //this is an unmodeled exception then try parsing it with best effort\n            const error = new Error(options.toUtf8(message.body));\n            error.name = code;\n            throw error;\n          }\n          throw deserializedException[code];\n        } else if (messageType === \"event\") {\n          const event = {\n            [message.headers[\":event-type\"].value as string]: message,\n          };\n          const deserialized = await options.deserializer(event);\n          if (deserialized.$unknown) continue;\n          yield deserialized;\n        } else {\n          throw Error(`Unrecognizable event type: ${message.headers[\":event-type\"].value}`);\n        }\n      }\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"module"}