{"ast":null,"code":"import { __assign, __values } from \"tslib\";\nimport { cloneRequest } from \"./cloneRequest\";\n/**\n * @internal\n */\n\nexport function moveHeadersToQuery(request, options) {\n  var e_1, _a;\n\n  var _b;\n\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _c = typeof request.clone === \"function\" ? request.clone() : cloneRequest(request),\n      headers = _c.headers,\n      _d = _c.query,\n      query = _d === void 0 ? {} : _d;\n\n  try {\n    for (var _e = __values(Object.keys(headers)), _f = _e.next(); !_f.done; _f = _e.next()) {\n      var name = _f.value;\n      var lname = name.toLowerCase();\n\n      if (lname.substr(0, 6) === \"x-amz-\" && !((_b = options.unhoistableHeaders) === null || _b === void 0 ? void 0 : _b.has(lname))) {\n        query[name] = headers[name];\n        delete headers[name];\n      }\n    }\n  } catch (e_1_1) {\n    e_1 = {\n      error: e_1_1\n    };\n  } finally {\n    try {\n      if (_f && !_f.done && (_a = _e.return)) _a.call(_e);\n    } finally {\n      if (e_1) throw e_1.error;\n    }\n  }\n\n  return __assign(__assign({}, request), {\n    headers: headers,\n    query: query\n  });\n}","map":{"version":3,"mappings":";AAEA,SAASA,YAAT,QAA6B,gBAA7B;AAEA;;;;AAGA,OAAM,SAAUC,kBAAV,CACJC,OADI,EAEJC,OAFI,EAE8C;;;;;EAAlD;IAAAA;EAAkD;;EAE5C,SACJ,OAAQD,OAAe,CAACE,KAAxB,KAAkC,UAAlC,GAAgDF,OAAe,CAACE,KAAhB,EAAhD,GAA0EJ,YAAY,CAACE,OAAD,CADlF;EAAA,IAAEG,OAAO,aAAT;EAAA,IAAWC,aAAX;EAAA,IAAWC,KAAK,mBAAG,EAAH,GAA0BD,EAA1C;;;IAEN,KAAmB,wBAAM,CAACE,IAAP,CAAYH,OAAZ,IAAoBI,cAAvC,EAAuC,QAAvC,EAAuCA,cAAvC,EAAyC;MAApC,IAAMC,IAAI,WAAV;MACH,IAAMC,KAAK,GAAGD,IAAI,CAACE,WAAL,EAAd;;MACA,IAAID,KAAK,CAACE,MAAN,CAAa,CAAb,EAAgB,CAAhB,MAAuB,QAAvB,IAAmC,QAACV,OAAO,CAACW,kBAAT,MAA2B,IAA3B,IAA2BC,aAA3B,GAA2B,MAA3B,GAA2BA,GAAEC,GAAF,CAAML,KAAN,CAA3B,CAAvC,EAAgF;QAC9EJ,KAAK,CAACG,IAAD,CAAL,GAAcL,OAAO,CAACK,IAAD,CAArB;QACA,OAAOL,OAAO,CAACK,IAAD,CAAd;MACD;IACF;;;;;;;;;;;;;EAED,6BACKR,OADL,GACY;IACVG,OAAO,SADG;IAEVE,KAAK;EAFK,CADZ;AAKD","names":["cloneRequest","moveHeadersToQuery","request","options","clone","headers","_d","query","keys","_f","name","lname","toLowerCase","substr","unhoistableHeaders","_b","has"],"sources":["C:\\Users\\lmore\\OneDrive\\Documents\\GitHub\\JacksOfAllTrades\\jacksofalltrades\\node_modules\\@aws-sdk\\signature-v4\\src\\moveHeadersToQuery.ts"],"sourcesContent":["import { HttpRequest, QueryParameterBag } from \"@aws-sdk/types\";\n\nimport { cloneRequest } from \"./cloneRequest\";\n\n/**\n * @internal\n */\nexport function moveHeadersToQuery(\n  request: HttpRequest,\n  options: { unhoistableHeaders?: Set<string> } = {}\n): HttpRequest & { query: QueryParameterBag } {\n  const { headers, query = {} as QueryParameterBag } =\n    typeof (request as any).clone === \"function\" ? (request as any).clone() : cloneRequest(request);\n  for (const name of Object.keys(headers)) {\n    const lname = name.toLowerCase();\n    if (lname.substr(0, 6) === \"x-amz-\" && !options.unhoistableHeaders?.has(lname)) {\n      query[name] = headers[name];\n      delete headers[name];\n    }\n  }\n\n  return {\n    ...request,\n    headers,\n    query,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}