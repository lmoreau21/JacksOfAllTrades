{"ast":null,"code":"var __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nimport { ConsoleLogger as LoggerClass } from './Logger';\nvar logger = new LoggerClass('Amplify');\n\nvar AmplifyClass =\n/** @class */\nfunction () {\n  function AmplifyClass() {\n    // Everything that is `register`ed is tracked here\n    this._components = [];\n    this._config = {}; // All modules (with `getModuleName()`) are stored here for dependency injection\n\n    this._modules = {}; // for backward compatibility to avoid breaking change\n    // if someone is using like Amplify.Auth\n\n    this.Auth = null;\n    this.Analytics = null;\n    this.API = null;\n    this.Credentials = null;\n    this.Storage = null;\n    this.I18n = null;\n    this.Cache = null;\n    this.PubSub = null;\n    this.Interactions = null;\n    this.Pushnotification = null;\n    this.UI = null;\n    this.XR = null;\n    this.Predictions = null;\n    this.DataStore = null;\n    this.Geo = null;\n    this.Logger = LoggerClass;\n    this.ServiceWorker = null;\n  }\n\n  AmplifyClass.prototype.register = function (comp) {\n    logger.debug('component registered in amplify', comp);\n\n    this._components.push(comp);\n\n    if (typeof comp.getModuleName === 'function') {\n      this._modules[comp.getModuleName()] = comp;\n      this[comp.getModuleName()] = comp;\n    } else {\n      logger.debug('no getModuleName method for component', comp);\n    } // Finally configure this new component(category) loaded\n    // With the new modularization changes in Amplify V3, all the Amplify\n    // component are not loaded/registered right away but when they are\n    // imported (and hence instantiated) in the client's app. This ensures\n    // that all new components imported get correctly configured with the\n    // configuration that Amplify.configure() was called with.\n\n\n    comp.configure(this._config);\n  };\n\n  AmplifyClass.prototype.configure = function (config) {\n    var _this = this;\n\n    if (!config) return this._config;\n    this._config = Object.assign(this._config, config);\n    logger.debug('amplify config', this._config); // Dependency Injection via property-setting.\n    // This avoids introducing a public method/interface/setter that's difficult to remove later.\n    // Plus, it reduces `if` statements within the `constructor` and `configure` of each module\n\n    Object.entries(this._modules).forEach(function (_a) {\n      var _b = __read(_a, 2),\n          Name = _b[0],\n          comp = _b[1]; // e.g. Auth.*\n\n\n      Object.keys(comp).forEach(function (property) {\n        // e.g. Auth[\"Credentials\"] = this._modules[\"Credentials\"] when set\n        if (_this._modules[property]) {\n          comp[property] = _this._modules[property];\n        }\n      });\n    });\n\n    this._components.map(function (comp) {\n      comp.configure(_this._config);\n    });\n\n    return this._config;\n  };\n\n  AmplifyClass.prototype.addPluggable = function (pluggable) {\n    if (pluggable && pluggable['getCategory'] && typeof pluggable['getCategory'] === 'function') {\n      this._components.map(function (comp) {\n        if (comp['addPluggable'] && typeof comp['addPluggable'] === 'function') {\n          comp.addPluggable(pluggable);\n        }\n      });\n    }\n  };\n\n  return AmplifyClass;\n}();\n\nexport { AmplifyClass };\nexport var Amplify = new AmplifyClass();\n/**\n * @deprecated use named import\n */\n\nexport default Amplify;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,aAAa,IAAIC,WAA1B,QAA6C,UAA7C;AAEA,IAAMC,MAAM,GAAG,IAAID,WAAJ,CAAgB,SAAhB,CAAf;;AAEA;AAAA;AAAA;EAAA;IACC;IACQ,mBAAc,EAAd;IACA,eAAU,EAAV,CAHT,CAKC;;IACQ,gBAAW,EAAX,CANT,CAQC;IACA;;IACA,YAAO,IAAP;IACA,iBAAY,IAAZ;IACA,WAAM,IAAN;IACA,mBAAc,IAAd;IACA,eAAU,IAAV;IACA,YAAO,IAAP;IACA,aAAQ,IAAR;IACA,cAAS,IAAT;IACA,oBAAe,IAAf;IACA,wBAAmB,IAAnB;IACA,UAAK,IAAL;IACA,UAAK,IAAL;IACA,mBAAc,IAAd;IACA,iBAAY,IAAZ;IACA,WAAM,IAAN;IAEA,cAASA,WAAT;IACA,qBAAgB,IAAhB;EA+DA;;EA7DAE,4CAASC,IAAT,EAAa;IACZF,MAAM,CAACG,KAAP,CAAa,iCAAb,EAAgDD,IAAhD;;IACA,KAAKE,WAAL,CAAiBC,IAAjB,CAAsBH,IAAtB;;IACA,IAAI,OAAOA,IAAI,CAACI,aAAZ,KAA8B,UAAlC,EAA8C;MAC7C,KAAKC,QAAL,CAAcL,IAAI,CAACI,aAAL,EAAd,IAAsCJ,IAAtC;MACA,KAAKA,IAAI,CAACI,aAAL,EAAL,IAA6BJ,IAA7B;IACA,CAHD,MAGO;MACNF,MAAM,CAACG,KAAP,CAAa,uCAAb,EAAsDD,IAAtD;IACA,CARW,CAUZ;IACA;IACA;IACA;IACA;IACA;;;IACAA,IAAI,CAACM,SAAL,CAAe,KAAKC,OAApB;EACA,CAjBD;;EAmBAR,6CAAUS,MAAV,EAAiB;IAAjB;;IACC,IAAI,CAACA,MAAL,EAAa,OAAO,KAAKD,OAAZ;IAEb,KAAKA,OAAL,GAAeE,MAAM,CAACC,MAAP,CAAc,KAAKH,OAAnB,EAA4BC,MAA5B,CAAf;IACAV,MAAM,CAACG,KAAP,CAAa,gBAAb,EAA+B,KAAKM,OAApC,EAJgB,CAMhB;IACA;IACA;;IACAE,MAAM,CAACE,OAAP,CAAe,KAAKN,QAApB,EAA8BO,OAA9B,CAAsC,UAACC,EAAD,EAAa;UAAZC;UAACC;UAAMf,aAAK,CAClD;;;MACAS,MAAM,CAACO,IAAP,CAAYhB,IAAZ,EAAkBY,OAAlB,CAA0B,oBAAQ;QACjC;QACA,IAAIK,KAAI,CAACZ,QAAL,CAAca,QAAd,CAAJ,EAA6B;UAC5BlB,IAAI,CAACkB,QAAD,CAAJ,GAAiBD,KAAI,CAACZ,QAAL,CAAca,QAAd,CAAjB;QACA;MACD,CALD;IAMA,CARD;;IAUA,KAAKhB,WAAL,CAAiBiB,GAAjB,CAAqB,gBAAI;MACxBnB,IAAI,CAACM,SAAL,CAAeW,KAAI,CAACV,OAApB;IACA,CAFD;;IAIA,OAAO,KAAKA,OAAZ;EACA,CAxBD;;EA0BAR,gDAAaqB,SAAb,EAAsB;IACrB,IACCA,SAAS,IACTA,SAAS,CAAC,aAAD,CADT,IAEA,OAAOA,SAAS,CAAC,aAAD,CAAhB,KAAoC,UAHrC,EAIE;MACD,KAAKlB,WAAL,CAAiBiB,GAAjB,CAAqB,gBAAI;QACxB,IACCnB,IAAI,CAAC,cAAD,CAAJ,IACA,OAAOA,IAAI,CAAC,cAAD,CAAX,KAAgC,UAFjC,EAGE;UACDA,IAAI,CAACqB,YAAL,CAAkBD,SAAlB;QACA;MACD,CAPD;IAQA;EACD,CAfD;;EAgBD;AAAC,CA1FD;;;AA4FA,OAAO,IAAME,OAAO,GAAG,IAAIvB,YAAJ,EAAhB;AAEP;;;;AAGA,eAAeuB,OAAf","names":["ConsoleLogger","LoggerClass","logger","AmplifyClass","comp","debug","_components","push","getModuleName","_modules","configure","_config","config","Object","assign","entries","forEach","_a","_b","Name","keys","_this","property","map","pluggable","addPluggable","Amplify"],"sources":["C:\\Users\\lmore\\OneDrive\\Documents\\GitHub\\JacksOfAllTrades\\jacksofalltrades\\node_modules\\@aws-amplify\\core\\src\\Amplify.ts"],"sourcesContent":["import { ConsoleLogger as LoggerClass } from './Logger';\n\nconst logger = new LoggerClass('Amplify');\n\nexport class AmplifyClass {\n\t// Everything that is `register`ed is tracked here\n\tprivate _components = [];\n\tprivate _config = {};\n\n\t// All modules (with `getModuleName()`) are stored here for dependency injection\n\tprivate _modules = {};\n\n\t// for backward compatibility to avoid breaking change\n\t// if someone is using like Amplify.Auth\n\tAuth = null;\n\tAnalytics = null;\n\tAPI = null;\n\tCredentials = null;\n\tStorage = null;\n\tI18n = null;\n\tCache = null;\n\tPubSub = null;\n\tInteractions = null;\n\tPushnotification = null;\n\tUI = null;\n\tXR = null;\n\tPredictions = null;\n\tDataStore = null;\n\tGeo = null;\n\n\tLogger = LoggerClass;\n\tServiceWorker = null;\n\n\tregister(comp) {\n\t\tlogger.debug('component registered in amplify', comp);\n\t\tthis._components.push(comp);\n\t\tif (typeof comp.getModuleName === 'function') {\n\t\t\tthis._modules[comp.getModuleName()] = comp;\n\t\t\tthis[comp.getModuleName()] = comp;\n\t\t} else {\n\t\t\tlogger.debug('no getModuleName method for component', comp);\n\t\t}\n\n\t\t// Finally configure this new component(category) loaded\n\t\t// With the new modularization changes in Amplify V3, all the Amplify\n\t\t// component are not loaded/registered right away but when they are\n\t\t// imported (and hence instantiated) in the client's app. This ensures\n\t\t// that all new components imported get correctly configured with the\n\t\t// configuration that Amplify.configure() was called with.\n\t\tcomp.configure(this._config);\n\t}\n\n\tconfigure(config?) {\n\t\tif (!config) return this._config;\n\n\t\tthis._config = Object.assign(this._config, config);\n\t\tlogger.debug('amplify config', this._config);\n\n\t\t// Dependency Injection via property-setting.\n\t\t// This avoids introducing a public method/interface/setter that's difficult to remove later.\n\t\t// Plus, it reduces `if` statements within the `constructor` and `configure` of each module\n\t\tObject.entries(this._modules).forEach(([Name, comp]) => {\n\t\t\t// e.g. Auth.*\n\t\t\tObject.keys(comp).forEach(property => {\n\t\t\t\t// e.g. Auth[\"Credentials\"] = this._modules[\"Credentials\"] when set\n\t\t\t\tif (this._modules[property]) {\n\t\t\t\t\tcomp[property] = this._modules[property];\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\tthis._components.map(comp => {\n\t\t\tcomp.configure(this._config);\n\t\t});\n\n\t\treturn this._config;\n\t}\n\n\taddPluggable(pluggable) {\n\t\tif (\n\t\t\tpluggable &&\n\t\t\tpluggable['getCategory'] &&\n\t\t\ttypeof pluggable['getCategory'] === 'function'\n\t\t) {\n\t\t\tthis._components.map(comp => {\n\t\t\t\tif (\n\t\t\t\t\tcomp['addPluggable'] &&\n\t\t\t\t\ttypeof comp['addPluggable'] === 'function'\n\t\t\t\t) {\n\t\t\t\t\tcomp.addPluggable(pluggable);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n}\n\nexport const Amplify = new AmplifyClass();\n\n/**\n * @deprecated use named import\n */\nexport default Amplify;\n"]},"metadata":{},"sourceType":"module"}