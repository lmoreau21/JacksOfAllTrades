{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { SENSITIVE_STRING } from \"@aws-sdk/smithy-client\";\nexport var AugmentedManifestsListItem;\n\n(function (AugmentedManifestsListItem) {\n  AugmentedManifestsListItem.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(AugmentedManifestsListItem || (AugmentedManifestsListItem = {}));\n\nexport var BatchDetectDominantLanguageRequest;\n\n(function (BatchDetectDominantLanguageRequest) {\n  BatchDetectDominantLanguageRequest.filterSensitiveLog = function (obj) {\n    return __assign(__assign({}, obj), obj.TextList && {\n      TextList: SENSITIVE_STRING\n    });\n  };\n})(BatchDetectDominantLanguageRequest || (BatchDetectDominantLanguageRequest = {}));\n\nexport var BatchItemError;\n\n(function (BatchItemError) {\n  BatchItemError.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(BatchItemError || (BatchItemError = {}));\n\nexport var DominantLanguage;\n\n(function (DominantLanguage) {\n  DominantLanguage.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(DominantLanguage || (DominantLanguage = {}));\n\nexport var BatchDetectDominantLanguageItemResult;\n\n(function (BatchDetectDominantLanguageItemResult) {\n  BatchDetectDominantLanguageItemResult.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(BatchDetectDominantLanguageItemResult || (BatchDetectDominantLanguageItemResult = {}));\n\nexport var BatchDetectDominantLanguageResponse;\n\n(function (BatchDetectDominantLanguageResponse) {\n  BatchDetectDominantLanguageResponse.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(BatchDetectDominantLanguageResponse || (BatchDetectDominantLanguageResponse = {}));\n\nexport var BatchSizeLimitExceededException;\n\n(function (BatchSizeLimitExceededException) {\n  BatchSizeLimitExceededException.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(BatchSizeLimitExceededException || (BatchSizeLimitExceededException = {}));\n\nexport var InternalServerException;\n\n(function (InternalServerException) {\n  InternalServerException.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(InternalServerException || (InternalServerException = {}));\n\nexport var InvalidRequestException;\n\n(function (InvalidRequestException) {\n  InvalidRequestException.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(InvalidRequestException || (InvalidRequestException = {}));\n\nexport var TextSizeLimitExceededException;\n\n(function (TextSizeLimitExceededException) {\n  TextSizeLimitExceededException.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(TextSizeLimitExceededException || (TextSizeLimitExceededException = {}));\n\nexport var LanguageCode;\n\n(function (LanguageCode) {\n  LanguageCode[\"AR\"] = \"ar\";\n  LanguageCode[\"DE\"] = \"de\";\n  LanguageCode[\"EN\"] = \"en\";\n  LanguageCode[\"ES\"] = \"es\";\n  LanguageCode[\"FR\"] = \"fr\";\n  LanguageCode[\"HI\"] = \"hi\";\n  LanguageCode[\"IT\"] = \"it\";\n  LanguageCode[\"JA\"] = \"ja\";\n  LanguageCode[\"KO\"] = \"ko\";\n  LanguageCode[\"PT\"] = \"pt\";\n  LanguageCode[\"ZH\"] = \"zh\";\n  LanguageCode[\"ZH_TW\"] = \"zh-TW\";\n})(LanguageCode || (LanguageCode = {}));\n\nexport var BatchDetectEntitiesRequest;\n\n(function (BatchDetectEntitiesRequest) {\n  BatchDetectEntitiesRequest.filterSensitiveLog = function (obj) {\n    return __assign(__assign({}, obj), obj.TextList && {\n      TextList: SENSITIVE_STRING\n    });\n  };\n})(BatchDetectEntitiesRequest || (BatchDetectEntitiesRequest = {}));\n\nexport var EntityType;\n\n(function (EntityType) {\n  EntityType[\"COMMERCIAL_ITEM\"] = \"COMMERCIAL_ITEM\";\n  EntityType[\"DATE\"] = \"DATE\";\n  EntityType[\"EVENT\"] = \"EVENT\";\n  EntityType[\"LOCATION\"] = \"LOCATION\";\n  EntityType[\"ORGANIZATION\"] = \"ORGANIZATION\";\n  EntityType[\"OTHER\"] = \"OTHER\";\n  EntityType[\"PERSON\"] = \"PERSON\";\n  EntityType[\"QUANTITY\"] = \"QUANTITY\";\n  EntityType[\"TITLE\"] = \"TITLE\";\n})(EntityType || (EntityType = {}));\n\nexport var Entity;\n\n(function (Entity) {\n  Entity.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(Entity || (Entity = {}));\n\nexport var BatchDetectEntitiesItemResult;\n\n(function (BatchDetectEntitiesItemResult) {\n  BatchDetectEntitiesItemResult.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(BatchDetectEntitiesItemResult || (BatchDetectEntitiesItemResult = {}));\n\nexport var BatchDetectEntitiesResponse;\n\n(function (BatchDetectEntitiesResponse) {\n  BatchDetectEntitiesResponse.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(BatchDetectEntitiesResponse || (BatchDetectEntitiesResponse = {}));\n\nexport var UnsupportedLanguageException;\n\n(function (UnsupportedLanguageException) {\n  UnsupportedLanguageException.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(UnsupportedLanguageException || (UnsupportedLanguageException = {}));\n\nexport var BatchDetectKeyPhrasesRequest;\n\n(function (BatchDetectKeyPhrasesRequest) {\n  BatchDetectKeyPhrasesRequest.filterSensitiveLog = function (obj) {\n    return __assign(__assign({}, obj), obj.TextList && {\n      TextList: SENSITIVE_STRING\n    });\n  };\n})(BatchDetectKeyPhrasesRequest || (BatchDetectKeyPhrasesRequest = {}));\n\nexport var KeyPhrase;\n\n(function (KeyPhrase) {\n  KeyPhrase.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(KeyPhrase || (KeyPhrase = {}));\n\nexport var BatchDetectKeyPhrasesItemResult;\n\n(function (BatchDetectKeyPhrasesItemResult) {\n  BatchDetectKeyPhrasesItemResult.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(BatchDetectKeyPhrasesItemResult || (BatchDetectKeyPhrasesItemResult = {}));\n\nexport var BatchDetectKeyPhrasesResponse;\n\n(function (BatchDetectKeyPhrasesResponse) {\n  BatchDetectKeyPhrasesResponse.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(BatchDetectKeyPhrasesResponse || (BatchDetectKeyPhrasesResponse = {}));\n\nexport var BatchDetectSentimentRequest;\n\n(function (BatchDetectSentimentRequest) {\n  BatchDetectSentimentRequest.filterSensitiveLog = function (obj) {\n    return __assign(__assign({}, obj), obj.TextList && {\n      TextList: SENSITIVE_STRING\n    });\n  };\n})(BatchDetectSentimentRequest || (BatchDetectSentimentRequest = {}));\n\nexport var SentimentType;\n\n(function (SentimentType) {\n  SentimentType[\"MIXED\"] = \"MIXED\";\n  SentimentType[\"NEGATIVE\"] = \"NEGATIVE\";\n  SentimentType[\"NEUTRAL\"] = \"NEUTRAL\";\n  SentimentType[\"POSITIVE\"] = \"POSITIVE\";\n})(SentimentType || (SentimentType = {}));\n\nexport var SentimentScore;\n\n(function (SentimentScore) {\n  SentimentScore.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(SentimentScore || (SentimentScore = {}));\n\nexport var BatchDetectSentimentItemResult;\n\n(function (BatchDetectSentimentItemResult) {\n  BatchDetectSentimentItemResult.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(BatchDetectSentimentItemResult || (BatchDetectSentimentItemResult = {}));\n\nexport var BatchDetectSentimentResponse;\n\n(function (BatchDetectSentimentResponse) {\n  BatchDetectSentimentResponse.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(BatchDetectSentimentResponse || (BatchDetectSentimentResponse = {}));\n\nexport var SyntaxLanguageCode;\n\n(function (SyntaxLanguageCode) {\n  SyntaxLanguageCode[\"DE\"] = \"de\";\n  SyntaxLanguageCode[\"EN\"] = \"en\";\n  SyntaxLanguageCode[\"ES\"] = \"es\";\n  SyntaxLanguageCode[\"FR\"] = \"fr\";\n  SyntaxLanguageCode[\"IT\"] = \"it\";\n  SyntaxLanguageCode[\"PT\"] = \"pt\";\n})(SyntaxLanguageCode || (SyntaxLanguageCode = {}));\n\nexport var BatchDetectSyntaxRequest;\n\n(function (BatchDetectSyntaxRequest) {\n  BatchDetectSyntaxRequest.filterSensitiveLog = function (obj) {\n    return __assign(__assign({}, obj), obj.TextList && {\n      TextList: SENSITIVE_STRING\n    });\n  };\n})(BatchDetectSyntaxRequest || (BatchDetectSyntaxRequest = {}));\n\nexport var PartOfSpeechTagType;\n\n(function (PartOfSpeechTagType) {\n  PartOfSpeechTagType[\"ADJ\"] = \"ADJ\";\n  PartOfSpeechTagType[\"ADP\"] = \"ADP\";\n  PartOfSpeechTagType[\"ADV\"] = \"ADV\";\n  PartOfSpeechTagType[\"AUX\"] = \"AUX\";\n  PartOfSpeechTagType[\"CCONJ\"] = \"CCONJ\";\n  PartOfSpeechTagType[\"CONJ\"] = \"CONJ\";\n  PartOfSpeechTagType[\"DET\"] = \"DET\";\n  PartOfSpeechTagType[\"INTJ\"] = \"INTJ\";\n  PartOfSpeechTagType[\"NOUN\"] = \"NOUN\";\n  PartOfSpeechTagType[\"NUM\"] = \"NUM\";\n  PartOfSpeechTagType[\"O\"] = \"O\";\n  PartOfSpeechTagType[\"PART\"] = \"PART\";\n  PartOfSpeechTagType[\"PRON\"] = \"PRON\";\n  PartOfSpeechTagType[\"PROPN\"] = \"PROPN\";\n  PartOfSpeechTagType[\"PUNCT\"] = \"PUNCT\";\n  PartOfSpeechTagType[\"SCONJ\"] = \"SCONJ\";\n  PartOfSpeechTagType[\"SYM\"] = \"SYM\";\n  PartOfSpeechTagType[\"VERB\"] = \"VERB\";\n})(PartOfSpeechTagType || (PartOfSpeechTagType = {}));\n\nexport var PartOfSpeechTag;\n\n(function (PartOfSpeechTag) {\n  PartOfSpeechTag.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(PartOfSpeechTag || (PartOfSpeechTag = {}));\n\nexport var SyntaxToken;\n\n(function (SyntaxToken) {\n  SyntaxToken.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(SyntaxToken || (SyntaxToken = {}));\n\nexport var BatchDetectSyntaxItemResult;\n\n(function (BatchDetectSyntaxItemResult) {\n  BatchDetectSyntaxItemResult.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(BatchDetectSyntaxItemResult || (BatchDetectSyntaxItemResult = {}));\n\nexport var BatchDetectSyntaxResponse;\n\n(function (BatchDetectSyntaxResponse) {\n  BatchDetectSyntaxResponse.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(BatchDetectSyntaxResponse || (BatchDetectSyntaxResponse = {}));\n\nexport var ClassifierEvaluationMetrics;\n\n(function (ClassifierEvaluationMetrics) {\n  ClassifierEvaluationMetrics.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(ClassifierEvaluationMetrics || (ClassifierEvaluationMetrics = {}));\n\nexport var ClassifierMetadata;\n\n(function (ClassifierMetadata) {\n  ClassifierMetadata.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(ClassifierMetadata || (ClassifierMetadata = {}));\n\nexport var ClassifyDocumentRequest;\n\n(function (ClassifyDocumentRequest) {\n  ClassifyDocumentRequest.filterSensitiveLog = function (obj) {\n    return __assign(__assign({}, obj), obj.Text && {\n      Text: SENSITIVE_STRING\n    });\n  };\n})(ClassifyDocumentRequest || (ClassifyDocumentRequest = {}));\n\nexport var DocumentClass;\n\n(function (DocumentClass) {\n  DocumentClass.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(DocumentClass || (DocumentClass = {}));\n\nexport var DocumentLabel;\n\n(function (DocumentLabel) {\n  DocumentLabel.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(DocumentLabel || (DocumentLabel = {}));\n\nexport var ClassifyDocumentResponse;\n\n(function (ClassifyDocumentResponse) {\n  ClassifyDocumentResponse.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(ClassifyDocumentResponse || (ClassifyDocumentResponse = {}));\n\nexport var ResourceUnavailableException;\n\n(function (ResourceUnavailableException) {\n  ResourceUnavailableException.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(ResourceUnavailableException || (ResourceUnavailableException = {}));\n\nexport var DocumentClassifierDataFormat;\n\n(function (DocumentClassifierDataFormat) {\n  DocumentClassifierDataFormat[\"AUGMENTED_MANIFEST\"] = \"AUGMENTED_MANIFEST\";\n  DocumentClassifierDataFormat[\"COMPREHEND_CSV\"] = \"COMPREHEND_CSV\";\n})(DocumentClassifierDataFormat || (DocumentClassifierDataFormat = {}));\n\nexport var DocumentClassifierInputDataConfig;\n\n(function (DocumentClassifierInputDataConfig) {\n  DocumentClassifierInputDataConfig.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(DocumentClassifierInputDataConfig || (DocumentClassifierInputDataConfig = {}));\n\nexport var DocumentClassifierMode;\n\n(function (DocumentClassifierMode) {\n  DocumentClassifierMode[\"MULTI_CLASS\"] = \"MULTI_CLASS\";\n  DocumentClassifierMode[\"MULTI_LABEL\"] = \"MULTI_LABEL\";\n})(DocumentClassifierMode || (DocumentClassifierMode = {}));\n\nexport var DocumentClassifierOutputDataConfig;\n\n(function (DocumentClassifierOutputDataConfig) {\n  DocumentClassifierOutputDataConfig.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(DocumentClassifierOutputDataConfig || (DocumentClassifierOutputDataConfig = {}));\n\nexport var Tag;\n\n(function (Tag) {\n  Tag.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(Tag || (Tag = {}));\n\nexport var VpcConfig;\n\n(function (VpcConfig) {\n  VpcConfig.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(VpcConfig || (VpcConfig = {}));\n\nexport var CreateDocumentClassifierRequest;\n\n(function (CreateDocumentClassifierRequest) {\n  CreateDocumentClassifierRequest.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(CreateDocumentClassifierRequest || (CreateDocumentClassifierRequest = {}));\n\nexport var CreateDocumentClassifierResponse;\n\n(function (CreateDocumentClassifierResponse) {\n  CreateDocumentClassifierResponse.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(CreateDocumentClassifierResponse || (CreateDocumentClassifierResponse = {}));\n\nexport var KmsKeyValidationException;\n\n(function (KmsKeyValidationException) {\n  KmsKeyValidationException.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(KmsKeyValidationException || (KmsKeyValidationException = {}));\n\nexport var ResourceInUseException;\n\n(function (ResourceInUseException) {\n  ResourceInUseException.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(ResourceInUseException || (ResourceInUseException = {}));\n\nexport var ResourceLimitExceededException;\n\n(function (ResourceLimitExceededException) {\n  ResourceLimitExceededException.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(ResourceLimitExceededException || (ResourceLimitExceededException = {}));\n\nexport var TooManyRequestsException;\n\n(function (TooManyRequestsException) {\n  TooManyRequestsException.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(TooManyRequestsException || (TooManyRequestsException = {}));\n\nexport var TooManyTagsException;\n\n(function (TooManyTagsException) {\n  TooManyTagsException.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(TooManyTagsException || (TooManyTagsException = {}));\n\nexport var CreateEndpointRequest;\n\n(function (CreateEndpointRequest) {\n  CreateEndpointRequest.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(CreateEndpointRequest || (CreateEndpointRequest = {}));\n\nexport var CreateEndpointResponse;\n\n(function (CreateEndpointResponse) {\n  CreateEndpointResponse.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(CreateEndpointResponse || (CreateEndpointResponse = {}));\n\nexport var ResourceNotFoundException;\n\n(function (ResourceNotFoundException) {\n  ResourceNotFoundException.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(ResourceNotFoundException || (ResourceNotFoundException = {}));\n\nexport var EntityRecognizerAnnotations;\n\n(function (EntityRecognizerAnnotations) {\n  EntityRecognizerAnnotations.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(EntityRecognizerAnnotations || (EntityRecognizerAnnotations = {}));\n\nexport var EntityRecognizerDataFormat;\n\n(function (EntityRecognizerDataFormat) {\n  EntityRecognizerDataFormat[\"AUGMENTED_MANIFEST\"] = \"AUGMENTED_MANIFEST\";\n  EntityRecognizerDataFormat[\"COMPREHEND_CSV\"] = \"COMPREHEND_CSV\";\n})(EntityRecognizerDataFormat || (EntityRecognizerDataFormat = {}));\n\nexport var EntityRecognizerDocuments;\n\n(function (EntityRecognizerDocuments) {\n  EntityRecognizerDocuments.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(EntityRecognizerDocuments || (EntityRecognizerDocuments = {}));\n\nexport var EntityRecognizerEntityList;\n\n(function (EntityRecognizerEntityList) {\n  EntityRecognizerEntityList.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(EntityRecognizerEntityList || (EntityRecognizerEntityList = {}));\n\nexport var EntityTypesListItem;\n\n(function (EntityTypesListItem) {\n  EntityTypesListItem.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(EntityTypesListItem || (EntityTypesListItem = {}));\n\nexport var EntityRecognizerInputDataConfig;\n\n(function (EntityRecognizerInputDataConfig) {\n  EntityRecognizerInputDataConfig.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(EntityRecognizerInputDataConfig || (EntityRecognizerInputDataConfig = {}));\n\nexport var CreateEntityRecognizerRequest;\n\n(function (CreateEntityRecognizerRequest) {\n  CreateEntityRecognizerRequest.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(CreateEntityRecognizerRequest || (CreateEntityRecognizerRequest = {}));\n\nexport var CreateEntityRecognizerResponse;\n\n(function (CreateEntityRecognizerResponse) {\n  CreateEntityRecognizerResponse.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(CreateEntityRecognizerResponse || (CreateEntityRecognizerResponse = {}));\n\nexport var DeleteDocumentClassifierRequest;\n\n(function (DeleteDocumentClassifierRequest) {\n  DeleteDocumentClassifierRequest.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(DeleteDocumentClassifierRequest || (DeleteDocumentClassifierRequest = {}));\n\nexport var DeleteDocumentClassifierResponse;\n\n(function (DeleteDocumentClassifierResponse) {\n  DeleteDocumentClassifierResponse.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(DeleteDocumentClassifierResponse || (DeleteDocumentClassifierResponse = {}));\n\nexport var DeleteEndpointRequest;\n\n(function (DeleteEndpointRequest) {\n  DeleteEndpointRequest.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(DeleteEndpointRequest || (DeleteEndpointRequest = {}));\n\nexport var DeleteEndpointResponse;\n\n(function (DeleteEndpointResponse) {\n  DeleteEndpointResponse.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(DeleteEndpointResponse || (DeleteEndpointResponse = {}));\n\nexport var DeleteEntityRecognizerRequest;\n\n(function (DeleteEntityRecognizerRequest) {\n  DeleteEntityRecognizerRequest.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(DeleteEntityRecognizerRequest || (DeleteEntityRecognizerRequest = {}));\n\nexport var DeleteEntityRecognizerResponse;\n\n(function (DeleteEntityRecognizerResponse) {\n  DeleteEntityRecognizerResponse.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(DeleteEntityRecognizerResponse || (DeleteEntityRecognizerResponse = {}));\n\nexport var DescribeDocumentClassificationJobRequest;\n\n(function (DescribeDocumentClassificationJobRequest) {\n  DescribeDocumentClassificationJobRequest.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(DescribeDocumentClassificationJobRequest || (DescribeDocumentClassificationJobRequest = {}));\n\nexport var InputFormat;\n\n(function (InputFormat) {\n  InputFormat[\"ONE_DOC_PER_FILE\"] = \"ONE_DOC_PER_FILE\";\n  InputFormat[\"ONE_DOC_PER_LINE\"] = \"ONE_DOC_PER_LINE\";\n})(InputFormat || (InputFormat = {}));\n\nexport var InputDataConfig;\n\n(function (InputDataConfig) {\n  InputDataConfig.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(InputDataConfig || (InputDataConfig = {}));\n\nexport var JobStatus;\n\n(function (JobStatus) {\n  JobStatus[\"COMPLETED\"] = \"COMPLETED\";\n  JobStatus[\"FAILED\"] = \"FAILED\";\n  JobStatus[\"IN_PROGRESS\"] = \"IN_PROGRESS\";\n  JobStatus[\"STOPPED\"] = \"STOPPED\";\n  JobStatus[\"STOP_REQUESTED\"] = \"STOP_REQUESTED\";\n  JobStatus[\"SUBMITTED\"] = \"SUBMITTED\";\n})(JobStatus || (JobStatus = {}));\n\nexport var OutputDataConfig;\n\n(function (OutputDataConfig) {\n  OutputDataConfig.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(OutputDataConfig || (OutputDataConfig = {}));\n\nexport var DocumentClassificationJobProperties;\n\n(function (DocumentClassificationJobProperties) {\n  DocumentClassificationJobProperties.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(DocumentClassificationJobProperties || (DocumentClassificationJobProperties = {}));\n\nexport var DescribeDocumentClassificationJobResponse;\n\n(function (DescribeDocumentClassificationJobResponse) {\n  DescribeDocumentClassificationJobResponse.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(DescribeDocumentClassificationJobResponse || (DescribeDocumentClassificationJobResponse = {}));\n\nexport var JobNotFoundException;\n\n(function (JobNotFoundException) {\n  JobNotFoundException.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(JobNotFoundException || (JobNotFoundException = {}));\n\nexport var DescribeDocumentClassifierRequest;\n\n(function (DescribeDocumentClassifierRequest) {\n  DescribeDocumentClassifierRequest.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(DescribeDocumentClassifierRequest || (DescribeDocumentClassifierRequest = {}));\n\nexport var ModelStatus;\n\n(function (ModelStatus) {\n  ModelStatus[\"DELETING\"] = \"DELETING\";\n  ModelStatus[\"IN_ERROR\"] = \"IN_ERROR\";\n  ModelStatus[\"STOPPED\"] = \"STOPPED\";\n  ModelStatus[\"STOP_REQUESTED\"] = \"STOP_REQUESTED\";\n  ModelStatus[\"SUBMITTED\"] = \"SUBMITTED\";\n  ModelStatus[\"TRAINED\"] = \"TRAINED\";\n  ModelStatus[\"TRAINING\"] = \"TRAINING\";\n})(ModelStatus || (ModelStatus = {}));\n\nexport var DocumentClassifierProperties;\n\n(function (DocumentClassifierProperties) {\n  DocumentClassifierProperties.filterSensitiveLog = function (obj) {\n    return __assign(__assign({}, obj), obj.ClassifierMetadata && {\n      ClassifierMetadata: SENSITIVE_STRING\n    });\n  };\n})(DocumentClassifierProperties || (DocumentClassifierProperties = {}));\n\nexport var DescribeDocumentClassifierResponse;\n\n(function (DescribeDocumentClassifierResponse) {\n  DescribeDocumentClassifierResponse.filterSensitiveLog = function (obj) {\n    return __assign(__assign({}, obj), obj.DocumentClassifierProperties && {\n      DocumentClassifierProperties: DocumentClassifierProperties.filterSensitiveLog(obj.DocumentClassifierProperties)\n    });\n  };\n})(DescribeDocumentClassifierResponse || (DescribeDocumentClassifierResponse = {}));\n\nexport var DescribeDominantLanguageDetectionJobRequest;\n\n(function (DescribeDominantLanguageDetectionJobRequest) {\n  DescribeDominantLanguageDetectionJobRequest.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(DescribeDominantLanguageDetectionJobRequest || (DescribeDominantLanguageDetectionJobRequest = {}));\n\nexport var DominantLanguageDetectionJobProperties;\n\n(function (DominantLanguageDetectionJobProperties) {\n  DominantLanguageDetectionJobProperties.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(DominantLanguageDetectionJobProperties || (DominantLanguageDetectionJobProperties = {}));\n\nexport var DescribeDominantLanguageDetectionJobResponse;\n\n(function (DescribeDominantLanguageDetectionJobResponse) {\n  DescribeDominantLanguageDetectionJobResponse.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(DescribeDominantLanguageDetectionJobResponse || (DescribeDominantLanguageDetectionJobResponse = {}));\n\nexport var DescribeEndpointRequest;\n\n(function (DescribeEndpointRequest) {\n  DescribeEndpointRequest.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(DescribeEndpointRequest || (DescribeEndpointRequest = {}));\n\nexport var EndpointStatus;\n\n(function (EndpointStatus) {\n  EndpointStatus[\"CREATING\"] = \"CREATING\";\n  EndpointStatus[\"DELETING\"] = \"DELETING\";\n  EndpointStatus[\"FAILED\"] = \"FAILED\";\n  EndpointStatus[\"IN_SERVICE\"] = \"IN_SERVICE\";\n  EndpointStatus[\"UPDATING\"] = \"UPDATING\";\n})(EndpointStatus || (EndpointStatus = {}));\n\nexport var EndpointProperties;\n\n(function (EndpointProperties) {\n  EndpointProperties.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(EndpointProperties || (EndpointProperties = {}));\n\nexport var DescribeEndpointResponse;\n\n(function (DescribeEndpointResponse) {\n  DescribeEndpointResponse.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(DescribeEndpointResponse || (DescribeEndpointResponse = {}));\n\nexport var DescribeEntitiesDetectionJobRequest;\n\n(function (DescribeEntitiesDetectionJobRequest) {\n  DescribeEntitiesDetectionJobRequest.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(DescribeEntitiesDetectionJobRequest || (DescribeEntitiesDetectionJobRequest = {}));\n\nexport var EntitiesDetectionJobProperties;\n\n(function (EntitiesDetectionJobProperties) {\n  EntitiesDetectionJobProperties.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(EntitiesDetectionJobProperties || (EntitiesDetectionJobProperties = {}));\n\nexport var DescribeEntitiesDetectionJobResponse;\n\n(function (DescribeEntitiesDetectionJobResponse) {\n  DescribeEntitiesDetectionJobResponse.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(DescribeEntitiesDetectionJobResponse || (DescribeEntitiesDetectionJobResponse = {}));\n\nexport var DescribeEntityRecognizerRequest;\n\n(function (DescribeEntityRecognizerRequest) {\n  DescribeEntityRecognizerRequest.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(DescribeEntityRecognizerRequest || (DescribeEntityRecognizerRequest = {}));\n\nexport var EntityTypesEvaluationMetrics;\n\n(function (EntityTypesEvaluationMetrics) {\n  EntityTypesEvaluationMetrics.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(EntityTypesEvaluationMetrics || (EntityTypesEvaluationMetrics = {}));\n\nexport var EntityRecognizerMetadataEntityTypesListItem;\n\n(function (EntityRecognizerMetadataEntityTypesListItem) {\n  EntityRecognizerMetadataEntityTypesListItem.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(EntityRecognizerMetadataEntityTypesListItem || (EntityRecognizerMetadataEntityTypesListItem = {}));\n\nexport var EntityRecognizerEvaluationMetrics;\n\n(function (EntityRecognizerEvaluationMetrics) {\n  EntityRecognizerEvaluationMetrics.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(EntityRecognizerEvaluationMetrics || (EntityRecognizerEvaluationMetrics = {}));\n\nexport var EntityRecognizerMetadata;\n\n(function (EntityRecognizerMetadata) {\n  EntityRecognizerMetadata.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(EntityRecognizerMetadata || (EntityRecognizerMetadata = {}));\n\nexport var EntityRecognizerProperties;\n\n(function (EntityRecognizerProperties) {\n  EntityRecognizerProperties.filterSensitiveLog = function (obj) {\n    return __assign(__assign({}, obj), obj.RecognizerMetadata && {\n      RecognizerMetadata: SENSITIVE_STRING\n    });\n  };\n})(EntityRecognizerProperties || (EntityRecognizerProperties = {}));\n\nexport var DescribeEntityRecognizerResponse;\n\n(function (DescribeEntityRecognizerResponse) {\n  DescribeEntityRecognizerResponse.filterSensitiveLog = function (obj) {\n    return __assign(__assign({}, obj), obj.EntityRecognizerProperties && {\n      EntityRecognizerProperties: EntityRecognizerProperties.filterSensitiveLog(obj.EntityRecognizerProperties)\n    });\n  };\n})(DescribeEntityRecognizerResponse || (DescribeEntityRecognizerResponse = {}));\n\nexport var DescribeEventsDetectionJobRequest;\n\n(function (DescribeEventsDetectionJobRequest) {\n  DescribeEventsDetectionJobRequest.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(DescribeEventsDetectionJobRequest || (DescribeEventsDetectionJobRequest = {}));\n\nexport var EventsDetectionJobProperties;\n\n(function (EventsDetectionJobProperties) {\n  EventsDetectionJobProperties.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(EventsDetectionJobProperties || (EventsDetectionJobProperties = {}));\n\nexport var DescribeEventsDetectionJobResponse;\n\n(function (DescribeEventsDetectionJobResponse) {\n  DescribeEventsDetectionJobResponse.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(DescribeEventsDetectionJobResponse || (DescribeEventsDetectionJobResponse = {}));\n\nexport var DescribeKeyPhrasesDetectionJobRequest;\n\n(function (DescribeKeyPhrasesDetectionJobRequest) {\n  DescribeKeyPhrasesDetectionJobRequest.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(DescribeKeyPhrasesDetectionJobRequest || (DescribeKeyPhrasesDetectionJobRequest = {}));\n\nexport var KeyPhrasesDetectionJobProperties;\n\n(function (KeyPhrasesDetectionJobProperties) {\n  KeyPhrasesDetectionJobProperties.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(KeyPhrasesDetectionJobProperties || (KeyPhrasesDetectionJobProperties = {}));\n\nexport var DescribeKeyPhrasesDetectionJobResponse;\n\n(function (DescribeKeyPhrasesDetectionJobResponse) {\n  DescribeKeyPhrasesDetectionJobResponse.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(DescribeKeyPhrasesDetectionJobResponse || (DescribeKeyPhrasesDetectionJobResponse = {}));\n\nexport var DescribePiiEntitiesDetectionJobRequest;\n\n(function (DescribePiiEntitiesDetectionJobRequest) {\n  DescribePiiEntitiesDetectionJobRequest.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(DescribePiiEntitiesDetectionJobRequest || (DescribePiiEntitiesDetectionJobRequest = {}));\n\nexport var PiiEntitiesDetectionMode;\n\n(function (PiiEntitiesDetectionMode) {\n  PiiEntitiesDetectionMode[\"ONLY_OFFSETS\"] = \"ONLY_OFFSETS\";\n  PiiEntitiesDetectionMode[\"ONLY_REDACTION\"] = \"ONLY_REDACTION\";\n})(PiiEntitiesDetectionMode || (PiiEntitiesDetectionMode = {}));\n\nexport var PiiOutputDataConfig;\n\n(function (PiiOutputDataConfig) {\n  PiiOutputDataConfig.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(PiiOutputDataConfig || (PiiOutputDataConfig = {}));\n\nexport var PiiEntitiesDetectionMaskMode;\n\n(function (PiiEntitiesDetectionMaskMode) {\n  PiiEntitiesDetectionMaskMode[\"MASK\"] = \"MASK\";\n  PiiEntitiesDetectionMaskMode[\"REPLACE_WITH_PII_ENTITY_TYPE\"] = \"REPLACE_WITH_PII_ENTITY_TYPE\";\n})(PiiEntitiesDetectionMaskMode || (PiiEntitiesDetectionMaskMode = {}));\n\nexport var PiiEntityType;\n\n(function (PiiEntityType) {\n  PiiEntityType[\"ADDRESS\"] = \"ADDRESS\";\n  PiiEntityType[\"AGE\"] = \"AGE\";\n  PiiEntityType[\"ALL\"] = \"ALL\";\n  PiiEntityType[\"AWS_ACCESS_KEY\"] = \"AWS_ACCESS_KEY\";\n  PiiEntityType[\"AWS_SECRET_KEY\"] = \"AWS_SECRET_KEY\";\n  PiiEntityType[\"BANK_ACCOUNT_NUMBER\"] = \"BANK_ACCOUNT_NUMBER\";\n  PiiEntityType[\"BANK_ROUTING\"] = \"BANK_ROUTING\";\n  PiiEntityType[\"CREDIT_DEBIT_CVV\"] = \"CREDIT_DEBIT_CVV\";\n  PiiEntityType[\"CREDIT_DEBIT_EXPIRY\"] = \"CREDIT_DEBIT_EXPIRY\";\n  PiiEntityType[\"CREDIT_DEBIT_NUMBER\"] = \"CREDIT_DEBIT_NUMBER\";\n  PiiEntityType[\"DATE_TIME\"] = \"DATE_TIME\";\n  PiiEntityType[\"DRIVER_ID\"] = \"DRIVER_ID\";\n  PiiEntityType[\"EMAIL\"] = \"EMAIL\";\n  PiiEntityType[\"IP_ADDRESS\"] = \"IP_ADDRESS\";\n  PiiEntityType[\"MAC_ADDRESS\"] = \"MAC_ADDRESS\";\n  PiiEntityType[\"NAME\"] = \"NAME\";\n  PiiEntityType[\"PASSPORT_NUMBER\"] = \"PASSPORT_NUMBER\";\n  PiiEntityType[\"PASSWORD\"] = \"PASSWORD\";\n  PiiEntityType[\"PHONE\"] = \"PHONE\";\n  PiiEntityType[\"PIN\"] = \"PIN\";\n  PiiEntityType[\"SSN\"] = \"SSN\";\n  PiiEntityType[\"URL\"] = \"URL\";\n  PiiEntityType[\"USERNAME\"] = \"USERNAME\";\n})(PiiEntityType || (PiiEntityType = {}));\n\nexport var RedactionConfig;\n\n(function (RedactionConfig) {\n  RedactionConfig.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(RedactionConfig || (RedactionConfig = {}));\n\nexport var PiiEntitiesDetectionJobProperties;\n\n(function (PiiEntitiesDetectionJobProperties) {\n  PiiEntitiesDetectionJobProperties.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(PiiEntitiesDetectionJobProperties || (PiiEntitiesDetectionJobProperties = {}));\n\nexport var DescribePiiEntitiesDetectionJobResponse;\n\n(function (DescribePiiEntitiesDetectionJobResponse) {\n  DescribePiiEntitiesDetectionJobResponse.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(DescribePiiEntitiesDetectionJobResponse || (DescribePiiEntitiesDetectionJobResponse = {}));\n\nexport var DescribeSentimentDetectionJobRequest;\n\n(function (DescribeSentimentDetectionJobRequest) {\n  DescribeSentimentDetectionJobRequest.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(DescribeSentimentDetectionJobRequest || (DescribeSentimentDetectionJobRequest = {}));\n\nexport var SentimentDetectionJobProperties;\n\n(function (SentimentDetectionJobProperties) {\n  SentimentDetectionJobProperties.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(SentimentDetectionJobProperties || (SentimentDetectionJobProperties = {}));\n\nexport var DescribeSentimentDetectionJobResponse;\n\n(function (DescribeSentimentDetectionJobResponse) {\n  DescribeSentimentDetectionJobResponse.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(DescribeSentimentDetectionJobResponse || (DescribeSentimentDetectionJobResponse = {}));\n\nexport var DescribeTopicsDetectionJobRequest;\n\n(function (DescribeTopicsDetectionJobRequest) {\n  DescribeTopicsDetectionJobRequest.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(DescribeTopicsDetectionJobRequest || (DescribeTopicsDetectionJobRequest = {}));\n\nexport var TopicsDetectionJobProperties;\n\n(function (TopicsDetectionJobProperties) {\n  TopicsDetectionJobProperties.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(TopicsDetectionJobProperties || (TopicsDetectionJobProperties = {}));\n\nexport var DescribeTopicsDetectionJobResponse;\n\n(function (DescribeTopicsDetectionJobResponse) {\n  DescribeTopicsDetectionJobResponse.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(DescribeTopicsDetectionJobResponse || (DescribeTopicsDetectionJobResponse = {}));\n\nexport var DetectDominantLanguageRequest;\n\n(function (DetectDominantLanguageRequest) {\n  DetectDominantLanguageRequest.filterSensitiveLog = function (obj) {\n    return __assign(__assign({}, obj), obj.Text && {\n      Text: SENSITIVE_STRING\n    });\n  };\n})(DetectDominantLanguageRequest || (DetectDominantLanguageRequest = {}));\n\nexport var DetectDominantLanguageResponse;\n\n(function (DetectDominantLanguageResponse) {\n  DetectDominantLanguageResponse.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(DetectDominantLanguageResponse || (DetectDominantLanguageResponse = {}));\n\nexport var DetectEntitiesRequest;\n\n(function (DetectEntitiesRequest) {\n  DetectEntitiesRequest.filterSensitiveLog = function (obj) {\n    return __assign(__assign({}, obj), obj.Text && {\n      Text: SENSITIVE_STRING\n    });\n  };\n})(DetectEntitiesRequest || (DetectEntitiesRequest = {}));\n\nexport var DetectEntitiesResponse;\n\n(function (DetectEntitiesResponse) {\n  DetectEntitiesResponse.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(DetectEntitiesResponse || (DetectEntitiesResponse = {}));\n\nexport var DetectKeyPhrasesRequest;\n\n(function (DetectKeyPhrasesRequest) {\n  DetectKeyPhrasesRequest.filterSensitiveLog = function (obj) {\n    return __assign(__assign({}, obj), obj.Text && {\n      Text: SENSITIVE_STRING\n    });\n  };\n})(DetectKeyPhrasesRequest || (DetectKeyPhrasesRequest = {}));\n\nexport var DetectKeyPhrasesResponse;\n\n(function (DetectKeyPhrasesResponse) {\n  DetectKeyPhrasesResponse.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(DetectKeyPhrasesResponse || (DetectKeyPhrasesResponse = {}));\n\nexport var DetectPiiEntitiesRequest;\n\n(function (DetectPiiEntitiesRequest) {\n  DetectPiiEntitiesRequest.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(DetectPiiEntitiesRequest || (DetectPiiEntitiesRequest = {}));\n\nexport var PiiEntity;\n\n(function (PiiEntity) {\n  PiiEntity.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(PiiEntity || (PiiEntity = {}));\n\nexport var DetectPiiEntitiesResponse;\n\n(function (DetectPiiEntitiesResponse) {\n  DetectPiiEntitiesResponse.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(DetectPiiEntitiesResponse || (DetectPiiEntitiesResponse = {}));\n\nexport var DetectSentimentRequest;\n\n(function (DetectSentimentRequest) {\n  DetectSentimentRequest.filterSensitiveLog = function (obj) {\n    return __assign(__assign({}, obj), obj.Text && {\n      Text: SENSITIVE_STRING\n    });\n  };\n})(DetectSentimentRequest || (DetectSentimentRequest = {}));\n\nexport var DetectSentimentResponse;\n\n(function (DetectSentimentResponse) {\n  DetectSentimentResponse.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(DetectSentimentResponse || (DetectSentimentResponse = {}));\n\nexport var DetectSyntaxRequest;\n\n(function (DetectSyntaxRequest) {\n  DetectSyntaxRequest.filterSensitiveLog = function (obj) {\n    return __assign(__assign({}, obj), obj.Text && {\n      Text: SENSITIVE_STRING\n    });\n  };\n})(DetectSyntaxRequest || (DetectSyntaxRequest = {}));\n\nexport var DetectSyntaxResponse;\n\n(function (DetectSyntaxResponse) {\n  DetectSyntaxResponse.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(DetectSyntaxResponse || (DetectSyntaxResponse = {}));\n\nexport var InvalidFilterException;\n\n(function (InvalidFilterException) {\n  InvalidFilterException.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(InvalidFilterException || (InvalidFilterException = {}));\n\nexport var DocumentClassificationJobFilter;\n\n(function (DocumentClassificationJobFilter) {\n  DocumentClassificationJobFilter.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(DocumentClassificationJobFilter || (DocumentClassificationJobFilter = {}));\n\nexport var ListDocumentClassificationJobsRequest;\n\n(function (ListDocumentClassificationJobsRequest) {\n  ListDocumentClassificationJobsRequest.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(ListDocumentClassificationJobsRequest || (ListDocumentClassificationJobsRequest = {}));\n\nexport var ListDocumentClassificationJobsResponse;\n\n(function (ListDocumentClassificationJobsResponse) {\n  ListDocumentClassificationJobsResponse.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(ListDocumentClassificationJobsResponse || (ListDocumentClassificationJobsResponse = {}));\n\nexport var DocumentClassifierFilter;\n\n(function (DocumentClassifierFilter) {\n  DocumentClassifierFilter.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(DocumentClassifierFilter || (DocumentClassifierFilter = {}));\n\nexport var ListDocumentClassifiersRequest;\n\n(function (ListDocumentClassifiersRequest) {\n  ListDocumentClassifiersRequest.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(ListDocumentClassifiersRequest || (ListDocumentClassifiersRequest = {}));\n\nexport var ListDocumentClassifiersResponse;\n\n(function (ListDocumentClassifiersResponse) {\n  ListDocumentClassifiersResponse.filterSensitiveLog = function (obj) {\n    return __assign(__assign({}, obj), obj.DocumentClassifierPropertiesList && {\n      DocumentClassifierPropertiesList: obj.DocumentClassifierPropertiesList.map(function (item) {\n        return DocumentClassifierProperties.filterSensitiveLog(item);\n      })\n    });\n  };\n})(ListDocumentClassifiersResponse || (ListDocumentClassifiersResponse = {}));\n\nexport var DominantLanguageDetectionJobFilter;\n\n(function (DominantLanguageDetectionJobFilter) {\n  DominantLanguageDetectionJobFilter.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(DominantLanguageDetectionJobFilter || (DominantLanguageDetectionJobFilter = {}));\n\nexport var ListDominantLanguageDetectionJobsRequest;\n\n(function (ListDominantLanguageDetectionJobsRequest) {\n  ListDominantLanguageDetectionJobsRequest.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(ListDominantLanguageDetectionJobsRequest || (ListDominantLanguageDetectionJobsRequest = {}));\n\nexport var ListDominantLanguageDetectionJobsResponse;\n\n(function (ListDominantLanguageDetectionJobsResponse) {\n  ListDominantLanguageDetectionJobsResponse.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(ListDominantLanguageDetectionJobsResponse || (ListDominantLanguageDetectionJobsResponse = {}));\n\nexport var EndpointFilter;\n\n(function (EndpointFilter) {\n  EndpointFilter.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(EndpointFilter || (EndpointFilter = {}));\n\nexport var ListEndpointsRequest;\n\n(function (ListEndpointsRequest) {\n  ListEndpointsRequest.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(ListEndpointsRequest || (ListEndpointsRequest = {}));\n\nexport var ListEndpointsResponse;\n\n(function (ListEndpointsResponse) {\n  ListEndpointsResponse.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(ListEndpointsResponse || (ListEndpointsResponse = {}));\n\nexport var EntitiesDetectionJobFilter;\n\n(function (EntitiesDetectionJobFilter) {\n  EntitiesDetectionJobFilter.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(EntitiesDetectionJobFilter || (EntitiesDetectionJobFilter = {}));\n\nexport var ListEntitiesDetectionJobsRequest;\n\n(function (ListEntitiesDetectionJobsRequest) {\n  ListEntitiesDetectionJobsRequest.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(ListEntitiesDetectionJobsRequest || (ListEntitiesDetectionJobsRequest = {}));\n\nexport var ListEntitiesDetectionJobsResponse;\n\n(function (ListEntitiesDetectionJobsResponse) {\n  ListEntitiesDetectionJobsResponse.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(ListEntitiesDetectionJobsResponse || (ListEntitiesDetectionJobsResponse = {}));\n\nexport var EntityRecognizerFilter;\n\n(function (EntityRecognizerFilter) {\n  EntityRecognizerFilter.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(EntityRecognizerFilter || (EntityRecognizerFilter = {}));\n\nexport var ListEntityRecognizersRequest;\n\n(function (ListEntityRecognizersRequest) {\n  ListEntityRecognizersRequest.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(ListEntityRecognizersRequest || (ListEntityRecognizersRequest = {}));\n\nexport var ListEntityRecognizersResponse;\n\n(function (ListEntityRecognizersResponse) {\n  ListEntityRecognizersResponse.filterSensitiveLog = function (obj) {\n    return __assign(__assign({}, obj), obj.EntityRecognizerPropertiesList && {\n      EntityRecognizerPropertiesList: obj.EntityRecognizerPropertiesList.map(function (item) {\n        return EntityRecognizerProperties.filterSensitiveLog(item);\n      })\n    });\n  };\n})(ListEntityRecognizersResponse || (ListEntityRecognizersResponse = {}));\n\nexport var EventsDetectionJobFilter;\n\n(function (EventsDetectionJobFilter) {\n  EventsDetectionJobFilter.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(EventsDetectionJobFilter || (EventsDetectionJobFilter = {}));\n\nexport var ListEventsDetectionJobsRequest;\n\n(function (ListEventsDetectionJobsRequest) {\n  ListEventsDetectionJobsRequest.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(ListEventsDetectionJobsRequest || (ListEventsDetectionJobsRequest = {}));\n\nexport var ListEventsDetectionJobsResponse;\n\n(function (ListEventsDetectionJobsResponse) {\n  ListEventsDetectionJobsResponse.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(ListEventsDetectionJobsResponse || (ListEventsDetectionJobsResponse = {}));\n\nexport var KeyPhrasesDetectionJobFilter;\n\n(function (KeyPhrasesDetectionJobFilter) {\n  KeyPhrasesDetectionJobFilter.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(KeyPhrasesDetectionJobFilter || (KeyPhrasesDetectionJobFilter = {}));\n\nexport var ListKeyPhrasesDetectionJobsRequest;\n\n(function (ListKeyPhrasesDetectionJobsRequest) {\n  ListKeyPhrasesDetectionJobsRequest.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(ListKeyPhrasesDetectionJobsRequest || (ListKeyPhrasesDetectionJobsRequest = {}));\n\nexport var ListKeyPhrasesDetectionJobsResponse;\n\n(function (ListKeyPhrasesDetectionJobsResponse) {\n  ListKeyPhrasesDetectionJobsResponse.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(ListKeyPhrasesDetectionJobsResponse || (ListKeyPhrasesDetectionJobsResponse = {}));\n\nexport var PiiEntitiesDetectionJobFilter;\n\n(function (PiiEntitiesDetectionJobFilter) {\n  PiiEntitiesDetectionJobFilter.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(PiiEntitiesDetectionJobFilter || (PiiEntitiesDetectionJobFilter = {}));\n\nexport var ListPiiEntitiesDetectionJobsRequest;\n\n(function (ListPiiEntitiesDetectionJobsRequest) {\n  ListPiiEntitiesDetectionJobsRequest.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(ListPiiEntitiesDetectionJobsRequest || (ListPiiEntitiesDetectionJobsRequest = {}));\n\nexport var ListPiiEntitiesDetectionJobsResponse;\n\n(function (ListPiiEntitiesDetectionJobsResponse) {\n  ListPiiEntitiesDetectionJobsResponse.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(ListPiiEntitiesDetectionJobsResponse || (ListPiiEntitiesDetectionJobsResponse = {}));\n\nexport var SentimentDetectionJobFilter;\n\n(function (SentimentDetectionJobFilter) {\n  SentimentDetectionJobFilter.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(SentimentDetectionJobFilter || (SentimentDetectionJobFilter = {}));\n\nexport var ListSentimentDetectionJobsRequest;\n\n(function (ListSentimentDetectionJobsRequest) {\n  ListSentimentDetectionJobsRequest.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(ListSentimentDetectionJobsRequest || (ListSentimentDetectionJobsRequest = {}));\n\nexport var ListSentimentDetectionJobsResponse;\n\n(function (ListSentimentDetectionJobsResponse) {\n  ListSentimentDetectionJobsResponse.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(ListSentimentDetectionJobsResponse || (ListSentimentDetectionJobsResponse = {}));\n\nexport var ListTagsForResourceRequest;\n\n(function (ListTagsForResourceRequest) {\n  ListTagsForResourceRequest.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(ListTagsForResourceRequest || (ListTagsForResourceRequest = {}));\n\nexport var ListTagsForResourceResponse;\n\n(function (ListTagsForResourceResponse) {\n  ListTagsForResourceResponse.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(ListTagsForResourceResponse || (ListTagsForResourceResponse = {}));\n\nexport var TopicsDetectionJobFilter;\n\n(function (TopicsDetectionJobFilter) {\n  TopicsDetectionJobFilter.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(TopicsDetectionJobFilter || (TopicsDetectionJobFilter = {}));\n\nexport var ListTopicsDetectionJobsRequest;\n\n(function (ListTopicsDetectionJobsRequest) {\n  ListTopicsDetectionJobsRequest.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(ListTopicsDetectionJobsRequest || (ListTopicsDetectionJobsRequest = {}));\n\nexport var ListTopicsDetectionJobsResponse;\n\n(function (ListTopicsDetectionJobsResponse) {\n  ListTopicsDetectionJobsResponse.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(ListTopicsDetectionJobsResponse || (ListTopicsDetectionJobsResponse = {}));\n\nexport var StartDocumentClassificationJobRequest;\n\n(function (StartDocumentClassificationJobRequest) {\n  StartDocumentClassificationJobRequest.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(StartDocumentClassificationJobRequest || (StartDocumentClassificationJobRequest = {}));\n\nexport var StartDocumentClassificationJobResponse;\n\n(function (StartDocumentClassificationJobResponse) {\n  StartDocumentClassificationJobResponse.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(StartDocumentClassificationJobResponse || (StartDocumentClassificationJobResponse = {}));\n\nexport var StartDominantLanguageDetectionJobRequest;\n\n(function (StartDominantLanguageDetectionJobRequest) {\n  StartDominantLanguageDetectionJobRequest.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(StartDominantLanguageDetectionJobRequest || (StartDominantLanguageDetectionJobRequest = {}));\n\nexport var StartDominantLanguageDetectionJobResponse;\n\n(function (StartDominantLanguageDetectionJobResponse) {\n  StartDominantLanguageDetectionJobResponse.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(StartDominantLanguageDetectionJobResponse || (StartDominantLanguageDetectionJobResponse = {}));\n\nexport var StartEntitiesDetectionJobRequest;\n\n(function (StartEntitiesDetectionJobRequest) {\n  StartEntitiesDetectionJobRequest.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(StartEntitiesDetectionJobRequest || (StartEntitiesDetectionJobRequest = {}));\n\nexport var StartEntitiesDetectionJobResponse;\n\n(function (StartEntitiesDetectionJobResponse) {\n  StartEntitiesDetectionJobResponse.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(StartEntitiesDetectionJobResponse || (StartEntitiesDetectionJobResponse = {}));\n\nexport var StartEventsDetectionJobRequest;\n\n(function (StartEventsDetectionJobRequest) {\n  StartEventsDetectionJobRequest.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(StartEventsDetectionJobRequest || (StartEventsDetectionJobRequest = {}));\n\nexport var StartEventsDetectionJobResponse;\n\n(function (StartEventsDetectionJobResponse) {\n  StartEventsDetectionJobResponse.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(StartEventsDetectionJobResponse || (StartEventsDetectionJobResponse = {}));\n\nexport var StartKeyPhrasesDetectionJobRequest;\n\n(function (StartKeyPhrasesDetectionJobRequest) {\n  StartKeyPhrasesDetectionJobRequest.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(StartKeyPhrasesDetectionJobRequest || (StartKeyPhrasesDetectionJobRequest = {}));\n\nexport var StartKeyPhrasesDetectionJobResponse;\n\n(function (StartKeyPhrasesDetectionJobResponse) {\n  StartKeyPhrasesDetectionJobResponse.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(StartKeyPhrasesDetectionJobResponse || (StartKeyPhrasesDetectionJobResponse = {}));\n\nexport var StartPiiEntitiesDetectionJobRequest;\n\n(function (StartPiiEntitiesDetectionJobRequest) {\n  StartPiiEntitiesDetectionJobRequest.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(StartPiiEntitiesDetectionJobRequest || (StartPiiEntitiesDetectionJobRequest = {}));\n\nexport var StartPiiEntitiesDetectionJobResponse;\n\n(function (StartPiiEntitiesDetectionJobResponse) {\n  StartPiiEntitiesDetectionJobResponse.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(StartPiiEntitiesDetectionJobResponse || (StartPiiEntitiesDetectionJobResponse = {}));\n\nexport var StartSentimentDetectionJobRequest;\n\n(function (StartSentimentDetectionJobRequest) {\n  StartSentimentDetectionJobRequest.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(StartSentimentDetectionJobRequest || (StartSentimentDetectionJobRequest = {}));\n\nexport var StartSentimentDetectionJobResponse;\n\n(function (StartSentimentDetectionJobResponse) {\n  StartSentimentDetectionJobResponse.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(StartSentimentDetectionJobResponse || (StartSentimentDetectionJobResponse = {}));\n\nexport var StartTopicsDetectionJobRequest;\n\n(function (StartTopicsDetectionJobRequest) {\n  StartTopicsDetectionJobRequest.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(StartTopicsDetectionJobRequest || (StartTopicsDetectionJobRequest = {}));\n\nexport var StartTopicsDetectionJobResponse;\n\n(function (StartTopicsDetectionJobResponse) {\n  StartTopicsDetectionJobResponse.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(StartTopicsDetectionJobResponse || (StartTopicsDetectionJobResponse = {}));\n\nexport var StopDominantLanguageDetectionJobRequest;\n\n(function (StopDominantLanguageDetectionJobRequest) {\n  StopDominantLanguageDetectionJobRequest.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(StopDominantLanguageDetectionJobRequest || (StopDominantLanguageDetectionJobRequest = {}));\n\nexport var StopDominantLanguageDetectionJobResponse;\n\n(function (StopDominantLanguageDetectionJobResponse) {\n  StopDominantLanguageDetectionJobResponse.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(StopDominantLanguageDetectionJobResponse || (StopDominantLanguageDetectionJobResponse = {}));\n\nexport var StopEntitiesDetectionJobRequest;\n\n(function (StopEntitiesDetectionJobRequest) {\n  StopEntitiesDetectionJobRequest.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(StopEntitiesDetectionJobRequest || (StopEntitiesDetectionJobRequest = {}));\n\nexport var StopEntitiesDetectionJobResponse;\n\n(function (StopEntitiesDetectionJobResponse) {\n  StopEntitiesDetectionJobResponse.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(StopEntitiesDetectionJobResponse || (StopEntitiesDetectionJobResponse = {}));\n\nexport var StopEventsDetectionJobRequest;\n\n(function (StopEventsDetectionJobRequest) {\n  StopEventsDetectionJobRequest.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(StopEventsDetectionJobRequest || (StopEventsDetectionJobRequest = {}));\n\nexport var StopEventsDetectionJobResponse;\n\n(function (StopEventsDetectionJobResponse) {\n  StopEventsDetectionJobResponse.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(StopEventsDetectionJobResponse || (StopEventsDetectionJobResponse = {}));\n\nexport var StopKeyPhrasesDetectionJobRequest;\n\n(function (StopKeyPhrasesDetectionJobRequest) {\n  StopKeyPhrasesDetectionJobRequest.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(StopKeyPhrasesDetectionJobRequest || (StopKeyPhrasesDetectionJobRequest = {}));\n\nexport var StopKeyPhrasesDetectionJobResponse;\n\n(function (StopKeyPhrasesDetectionJobResponse) {\n  StopKeyPhrasesDetectionJobResponse.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(StopKeyPhrasesDetectionJobResponse || (StopKeyPhrasesDetectionJobResponse = {}));\n\nexport var StopPiiEntitiesDetectionJobRequest;\n\n(function (StopPiiEntitiesDetectionJobRequest) {\n  StopPiiEntitiesDetectionJobRequest.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(StopPiiEntitiesDetectionJobRequest || (StopPiiEntitiesDetectionJobRequest = {}));\n\nexport var StopPiiEntitiesDetectionJobResponse;\n\n(function (StopPiiEntitiesDetectionJobResponse) {\n  StopPiiEntitiesDetectionJobResponse.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(StopPiiEntitiesDetectionJobResponse || (StopPiiEntitiesDetectionJobResponse = {}));\n\nexport var StopSentimentDetectionJobRequest;\n\n(function (StopSentimentDetectionJobRequest) {\n  StopSentimentDetectionJobRequest.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(StopSentimentDetectionJobRequest || (StopSentimentDetectionJobRequest = {}));\n\nexport var StopSentimentDetectionJobResponse;\n\n(function (StopSentimentDetectionJobResponse) {\n  StopSentimentDetectionJobResponse.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(StopSentimentDetectionJobResponse || (StopSentimentDetectionJobResponse = {}));\n\nexport var StopTrainingDocumentClassifierRequest;\n\n(function (StopTrainingDocumentClassifierRequest) {\n  StopTrainingDocumentClassifierRequest.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(StopTrainingDocumentClassifierRequest || (StopTrainingDocumentClassifierRequest = {}));\n\nexport var StopTrainingDocumentClassifierResponse;\n\n(function (StopTrainingDocumentClassifierResponse) {\n  StopTrainingDocumentClassifierResponse.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(StopTrainingDocumentClassifierResponse || (StopTrainingDocumentClassifierResponse = {}));\n\nexport var StopTrainingEntityRecognizerRequest;\n\n(function (StopTrainingEntityRecognizerRequest) {\n  StopTrainingEntityRecognizerRequest.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(StopTrainingEntityRecognizerRequest || (StopTrainingEntityRecognizerRequest = {}));\n\nexport var StopTrainingEntityRecognizerResponse;\n\n(function (StopTrainingEntityRecognizerResponse) {\n  StopTrainingEntityRecognizerResponse.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(StopTrainingEntityRecognizerResponse || (StopTrainingEntityRecognizerResponse = {}));\n\nexport var ConcurrentModificationException;\n\n(function (ConcurrentModificationException) {\n  ConcurrentModificationException.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(ConcurrentModificationException || (ConcurrentModificationException = {}));\n\nexport var TagResourceRequest;\n\n(function (TagResourceRequest) {\n  TagResourceRequest.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(TagResourceRequest || (TagResourceRequest = {}));\n\nexport var TagResourceResponse;\n\n(function (TagResourceResponse) {\n  TagResourceResponse.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(TagResourceResponse || (TagResourceResponse = {}));\n\nexport var TooManyTagKeysException;\n\n(function (TooManyTagKeysException) {\n  TooManyTagKeysException.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(TooManyTagKeysException || (TooManyTagKeysException = {}));\n\nexport var UntagResourceRequest;\n\n(function (UntagResourceRequest) {\n  UntagResourceRequest.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(UntagResourceRequest || (UntagResourceRequest = {}));\n\nexport var UntagResourceResponse;\n\n(function (UntagResourceResponse) {\n  UntagResourceResponse.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(UntagResourceResponse || (UntagResourceResponse = {}));\n\nexport var UpdateEndpointRequest;\n\n(function (UpdateEndpointRequest) {\n  UpdateEndpointRequest.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(UpdateEndpointRequest || (UpdateEndpointRequest = {}));\n\nexport var UpdateEndpointResponse;\n\n(function (UpdateEndpointResponse) {\n  UpdateEndpointResponse.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(UpdateEndpointResponse || (UpdateEndpointResponse = {}));","map":{"version":3,"mappings":"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","names":["SENSITIVE_STRING","AugmentedManifestsListItem","obj","BatchDetectDominantLanguageRequest","TextList","BatchItemError","DominantLanguage","BatchDetectDominantLanguageItemResult","BatchDetectDominantLanguageResponse","BatchSizeLimitExceededException","InternalServerException","InvalidRequestException","TextSizeLimitExceededException","LanguageCode","BatchDetectEntitiesRequest","EntityType","Entity","BatchDetectEntitiesItemResult","BatchDetectEntitiesResponse","UnsupportedLanguageException","BatchDetectKeyPhrasesRequest","KeyPhrase","BatchDetectKeyPhrasesItemResult","BatchDetectKeyPhrasesResponse","BatchDetectSentimentRequest","SentimentType","SentimentScore","BatchDetectSentimentItemResult","BatchDetectSentimentResponse","SyntaxLanguageCode","BatchDetectSyntaxRequest","PartOfSpeechTagType","PartOfSpeechTag","SyntaxToken","BatchDetectSyntaxItemResult","BatchDetectSyntaxResponse","ClassifierEvaluationMetrics","ClassifierMetadata","ClassifyDocumentRequest","Text","DocumentClass","DocumentLabel","ClassifyDocumentResponse","ResourceUnavailableException","DocumentClassifierDataFormat","DocumentClassifierInputDataConfig","DocumentClassifierMode","DocumentClassifierOutputDataConfig","Tag","VpcConfig","CreateDocumentClassifierRequest","CreateDocumentClassifierResponse","KmsKeyValidationException","ResourceInUseException","ResourceLimitExceededException","TooManyRequestsException","TooManyTagsException","CreateEndpointRequest","CreateEndpointResponse","ResourceNotFoundException","EntityRecognizerAnnotations","EntityRecognizerDataFormat","EntityRecognizerDocuments","EntityRecognizerEntityList","EntityTypesListItem","EntityRecognizerInputDataConfig","CreateEntityRecognizerRequest","CreateEntityRecognizerResponse","DeleteDocumentClassifierRequest","DeleteDocumentClassifierResponse","DeleteEndpointRequest","DeleteEndpointResponse","DeleteEntityRecognizerRequest","DeleteEntityRecognizerResponse","DescribeDocumentClassificationJobRequest","InputFormat","InputDataConfig","JobStatus","OutputDataConfig","DocumentClassificationJobProperties","DescribeDocumentClassificationJobResponse","JobNotFoundException","DescribeDocumentClassifierRequest","ModelStatus","DocumentClassifierProperties","DescribeDocumentClassifierResponse","filterSensitiveLog","DescribeDominantLanguageDetectionJobRequest","DominantLanguageDetectionJobProperties","DescribeDominantLanguageDetectionJobResponse","DescribeEndpointRequest","EndpointStatus","EndpointProperties","DescribeEndpointResponse","DescribeEntitiesDetectionJobRequest","EntitiesDetectionJobProperties","DescribeEntitiesDetectionJobResponse","DescribeEntityRecognizerRequest","EntityTypesEvaluationMetrics","EntityRecognizerMetadataEntityTypesListItem","EntityRecognizerEvaluationMetrics","EntityRecognizerMetadata","EntityRecognizerProperties","RecognizerMetadata","DescribeEntityRecognizerResponse","DescribeEventsDetectionJobRequest","EventsDetectionJobProperties","DescribeEventsDetectionJobResponse","DescribeKeyPhrasesDetectionJobRequest","KeyPhrasesDetectionJobProperties","DescribeKeyPhrasesDetectionJobResponse","DescribePiiEntitiesDetectionJobRequest","PiiEntitiesDetectionMode","PiiOutputDataConfig","PiiEntitiesDetectionMaskMode","PiiEntityType","RedactionConfig","PiiEntitiesDetectionJobProperties","DescribePiiEntitiesDetectionJobResponse","DescribeSentimentDetectionJobRequest","SentimentDetectionJobProperties","DescribeSentimentDetectionJobResponse","DescribeTopicsDetectionJobRequest","TopicsDetectionJobProperties","DescribeTopicsDetectionJobResponse","DetectDominantLanguageRequest","DetectDominantLanguageResponse","DetectEntitiesRequest","DetectEntitiesResponse","DetectKeyPhrasesRequest","DetectKeyPhrasesResponse","DetectPiiEntitiesRequest","PiiEntity","DetectPiiEntitiesResponse","DetectSentimentRequest","DetectSentimentResponse","DetectSyntaxRequest","DetectSyntaxResponse","InvalidFilterException","DocumentClassificationJobFilter","ListDocumentClassificationJobsRequest","ListDocumentClassificationJobsResponse","DocumentClassifierFilter","ListDocumentClassifiersRequest","ListDocumentClassifiersResponse","DocumentClassifierPropertiesList","map","item","DominantLanguageDetectionJobFilter","ListDominantLanguageDetectionJobsRequest","ListDominantLanguageDetectionJobsResponse","EndpointFilter","ListEndpointsRequest","ListEndpointsResponse","EntitiesDetectionJobFilter","ListEntitiesDetectionJobsRequest","ListEntitiesDetectionJobsResponse","EntityRecognizerFilter","ListEntityRecognizersRequest","ListEntityRecognizersResponse","EntityRecognizerPropertiesList","EventsDetectionJobFilter","ListEventsDetectionJobsRequest","ListEventsDetectionJobsResponse","KeyPhrasesDetectionJobFilter","ListKeyPhrasesDetectionJobsRequest","ListKeyPhrasesDetectionJobsResponse","PiiEntitiesDetectionJobFilter","ListPiiEntitiesDetectionJobsRequest","ListPiiEntitiesDetectionJobsResponse","SentimentDetectionJobFilter","ListSentimentDetectionJobsRequest","ListSentimentDetectionJobsResponse","ListTagsForResourceRequest","ListTagsForResourceResponse","TopicsDetectionJobFilter","ListTopicsDetectionJobsRequest","ListTopicsDetectionJobsResponse","StartDocumentClassificationJobRequest","StartDocumentClassificationJobResponse","StartDominantLanguageDetectionJobRequest","StartDominantLanguageDetectionJobResponse","StartEntitiesDetectionJobRequest","StartEntitiesDetectionJobResponse","StartEventsDetectionJobRequest","StartEventsDetectionJobResponse","StartKeyPhrasesDetectionJobRequest","StartKeyPhrasesDetectionJobResponse","StartPiiEntitiesDetectionJobRequest","StartPiiEntitiesDetectionJobResponse","StartSentimentDetectionJobRequest","StartSentimentDetectionJobResponse","StartTopicsDetectionJobRequest","StartTopicsDetectionJobResponse","StopDominantLanguageDetectionJobRequest","StopDominantLanguageDetectionJobResponse","StopEntitiesDetectionJobRequest","StopEntitiesDetectionJobResponse","StopEventsDetectionJobRequest","StopEventsDetectionJobResponse","StopKeyPhrasesDetectionJobRequest","StopKeyPhrasesDetectionJobResponse","StopPiiEntitiesDetectionJobRequest","StopPiiEntitiesDetectionJobResponse","StopSentimentDetectionJobRequest","StopSentimentDetectionJobResponse","StopTrainingDocumentClassifierRequest","StopTrainingDocumentClassifierResponse","StopTrainingEntityRecognizerRequest","StopTrainingEntityRecognizerResponse","ConcurrentModificationException","TagResourceRequest","TagResourceResponse","TooManyTagKeysException","UntagResourceRequest","UntagResourceResponse","UpdateEndpointRequest","UpdateEndpointResponse"],"sources":["C:\\Users\\lmore\\OneDrive\\Documents\\GitHub\\JacksOfAllTrades\\jacksofalltrades\\node_modules\\@aws-sdk\\client-comprehend\\models\\models_0.ts"],"sourcesContent":["import { SENSITIVE_STRING, SmithyException as __SmithyException } from \"@aws-sdk/smithy-client\";\nimport { MetadataBearer as $MetadataBearer } from \"@aws-sdk/types\";\n\n/**\n * <p>An augmented manifest file that provides training data for your custom model. An augmented\n *       manifest file is a labeled dataset that is produced by Amazon SageMaker Ground Truth.</p>\n */\nexport interface AugmentedManifestsListItem {\n  /**\n   * <p>The Amazon S3 location of the augmented manifest file.</p>\n   */\n  S3Uri: string | undefined;\n\n  /**\n   * <p>The JSON attribute that contains the annotations for your training documents. The number\n   *       of attribute names that you specify depends on whether your augmented manifest file is the\n   *       output of a single labeling job or a chained labeling job.</p>\n   *          <p>If your file is the output of a single labeling job, specify the LabelAttributeName key\n   *       that was used when the job was created in Ground Truth.</p>\n   *          <p>If your file is the output of a chained labeling job, specify the LabelAttributeName key\n   *       for one or more jobs in the chain. Each LabelAttributeName key provides the annotations from\n   *       an individual job.</p>\n   */\n  AttributeNames: string[] | undefined;\n}\n\nexport namespace AugmentedManifestsListItem {\n  export const filterSensitiveLog = (obj: AugmentedManifestsListItem): any => ({\n    ...obj,\n  });\n}\n\nexport interface BatchDetectDominantLanguageRequest {\n  /**\n   * <p>A list containing the text of the input documents. The list can contain a maximum of 25\n   *       documents. Each document should contain at least 20 characters and must contain fewer than\n   *       5,000 bytes of UTF-8 encoded characters.</p>\n   */\n  TextList: string[] | undefined;\n}\n\nexport namespace BatchDetectDominantLanguageRequest {\n  export const filterSensitiveLog = (obj: BatchDetectDominantLanguageRequest): any => ({\n    ...obj,\n    ...(obj.TextList && { TextList: SENSITIVE_STRING }),\n  });\n}\n\n/**\n * <p>Describes an error that occurred while processing a document in a batch. The operation\n *       returns on <code>BatchItemError</code> object for each document that contained an\n *       error.</p>\n */\nexport interface BatchItemError {\n  /**\n   * <p>The zero-based index of the document in the input list.</p>\n   */\n  Index?: number;\n\n  /**\n   * <p>The numeric error code of the error.</p>\n   */\n  ErrorCode?: string;\n\n  /**\n   * <p>A text description of the error.</p>\n   */\n  ErrorMessage?: string;\n}\n\nexport namespace BatchItemError {\n  export const filterSensitiveLog = (obj: BatchItemError): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Returns the code for the dominant language in the input text and the level of\n *       confidence that Amazon Comprehend has in the accuracy of the detection.</p>\n */\nexport interface DominantLanguage {\n  /**\n   * <p>The RFC 5646 language code for the dominant language. For more information about RFC\n   *       5646, see <a href=\"https://tools.ietf.org/html/rfc5646\">Tags for Identifying\n   *         Languages</a> on the <i>IETF Tools</i> web site.</p>\n   */\n  LanguageCode?: string;\n\n  /**\n   * <p>The level of confidence that Amazon Comprehend has in the accuracy of the\n   *       detection.</p>\n   */\n  Score?: number;\n}\n\nexport namespace DominantLanguage {\n  export const filterSensitiveLog = (obj: DominantLanguage): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The result of calling the  operation.\n *       The operation returns one object for each document that is successfully processed by the\n *       operation.</p>\n */\nexport interface BatchDetectDominantLanguageItemResult {\n  /**\n   * <p>The zero-based index of the document in the input list.</p>\n   */\n  Index?: number;\n\n  /**\n   * <p>One or more <a>DominantLanguage</a> objects describing the dominant\n   *       languages in the document.</p>\n   */\n  Languages?: DominantLanguage[];\n}\n\nexport namespace BatchDetectDominantLanguageItemResult {\n  export const filterSensitiveLog = (obj: BatchDetectDominantLanguageItemResult): any => ({\n    ...obj,\n  });\n}\n\nexport interface BatchDetectDominantLanguageResponse {\n  /**\n   * <p>A list of  objects\n   *       containing the results of the operation. The results are sorted in ascending order by the\n   *         <code>Index</code> field and match the order of the documents in the input list. If all of\n   *       the documents contain an error, the <code>ResultList</code> is empty.</p>\n   */\n  ResultList: BatchDetectDominantLanguageItemResult[] | undefined;\n\n  /**\n   * <p>A list containing one  object for each document\n   *       that contained an error. The results are sorted in ascending order by the <code>Index</code>\n   *       field and match the order of the documents in the input list. If there are no errors in the\n   *       batch, the <code>ErrorList</code> is empty.</p>\n   */\n  ErrorList: BatchItemError[] | undefined;\n}\n\nexport namespace BatchDetectDominantLanguageResponse {\n  export const filterSensitiveLog = (obj: BatchDetectDominantLanguageResponse): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The number of documents in the request exceeds the limit of 25. Try your request again\n *       with fewer documents.</p>\n */\nexport interface BatchSizeLimitExceededException extends __SmithyException, $MetadataBearer {\n  name: \"BatchSizeLimitExceededException\";\n  $fault: \"client\";\n  Message?: string;\n}\n\nexport namespace BatchSizeLimitExceededException {\n  export const filterSensitiveLog = (obj: BatchSizeLimitExceededException): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>An internal server error occurred. Retry your request.</p>\n */\nexport interface InternalServerException extends __SmithyException, $MetadataBearer {\n  name: \"InternalServerException\";\n  $fault: \"server\";\n  Message?: string;\n}\n\nexport namespace InternalServerException {\n  export const filterSensitiveLog = (obj: InternalServerException): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The request is invalid.</p>\n */\nexport interface InvalidRequestException extends __SmithyException, $MetadataBearer {\n  name: \"InvalidRequestException\";\n  $fault: \"client\";\n  Message?: string;\n}\n\nexport namespace InvalidRequestException {\n  export const filterSensitiveLog = (obj: InvalidRequestException): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The size of the input text exceeds the limit. Use a smaller document.</p>\n */\nexport interface TextSizeLimitExceededException extends __SmithyException, $MetadataBearer {\n  name: \"TextSizeLimitExceededException\";\n  $fault: \"client\";\n  Message?: string;\n}\n\nexport namespace TextSizeLimitExceededException {\n  export const filterSensitiveLog = (obj: TextSizeLimitExceededException): any => ({\n    ...obj,\n  });\n}\n\nexport enum LanguageCode {\n  AR = \"ar\",\n  DE = \"de\",\n  EN = \"en\",\n  ES = \"es\",\n  FR = \"fr\",\n  HI = \"hi\",\n  IT = \"it\",\n  JA = \"ja\",\n  KO = \"ko\",\n  PT = \"pt\",\n  ZH = \"zh\",\n  ZH_TW = \"zh-TW\",\n}\n\nexport interface BatchDetectEntitiesRequest {\n  /**\n   * <p>A list containing the text of the input documents. The list can contain a maximum of 25\n   *       documents. Each document must contain fewer than 5,000 bytes of UTF-8 encoded\n   *       characters.</p>\n   */\n  TextList: string[] | undefined;\n\n  /**\n   * <p>The language of the input documents. You can specify any of the primary languages\n   *       supported by Amazon Comprehend. All documents must be in the same language.</p>\n   */\n  LanguageCode: LanguageCode | string | undefined;\n}\n\nexport namespace BatchDetectEntitiesRequest {\n  export const filterSensitiveLog = (obj: BatchDetectEntitiesRequest): any => ({\n    ...obj,\n    ...(obj.TextList && { TextList: SENSITIVE_STRING }),\n  });\n}\n\nexport enum EntityType {\n  COMMERCIAL_ITEM = \"COMMERCIAL_ITEM\",\n  DATE = \"DATE\",\n  EVENT = \"EVENT\",\n  LOCATION = \"LOCATION\",\n  ORGANIZATION = \"ORGANIZATION\",\n  OTHER = \"OTHER\",\n  PERSON = \"PERSON\",\n  QUANTITY = \"QUANTITY\",\n  TITLE = \"TITLE\",\n}\n\n/**\n * <p>Provides information about an entity. </p>\n *          <p> </p>\n */\nexport interface Entity {\n  /**\n   * <p>The level of confidence that Amazon Comprehend has in the accuracy of the\n   *       detection.</p>\n   */\n  Score?: number;\n\n  /**\n   * <p>The entity's type.</p>\n   */\n  Type?: EntityType | string;\n\n  /**\n   * <p>The text of the entity.</p>\n   */\n  Text?: string;\n\n  /**\n   * <p>A character offset in the input text that shows where the entity begins (the first\n   *       character is at position 0). The offset returns the position of each UTF-8 code point in the\n   *       string. A <i>code point</i> is the abstract character from a particular\n   *       graphical representation. For example, a multi-byte UTF-8 character maps to a single code\n   *       point.</p>\n   */\n  BeginOffset?: number;\n\n  /**\n   * <p>A character offset in the input text that shows where the entity ends. The offset\n   *       returns the position of each UTF-8 code point in the string. A <i>code point</i>\n   *       is the abstract character from a particular graphical representation. For example, a\n   *       multi-byte UTF-8 character maps to a single code point. </p>\n   */\n  EndOffset?: number;\n}\n\nexport namespace Entity {\n  export const filterSensitiveLog = (obj: Entity): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The result of calling the  operation. The\n *       operation returns one object for each document that is successfully processed by the\n *       operation.</p>\n */\nexport interface BatchDetectEntitiesItemResult {\n  /**\n   * <p>The zero-based index of the document in the input list.</p>\n   */\n  Index?: number;\n\n  /**\n   * <p>One or more <a>Entity</a> objects, one for each entity detected in the\n   *       document.</p>\n   */\n  Entities?: Entity[];\n}\n\nexport namespace BatchDetectEntitiesItemResult {\n  export const filterSensitiveLog = (obj: BatchDetectEntitiesItemResult): any => ({\n    ...obj,\n  });\n}\n\nexport interface BatchDetectEntitiesResponse {\n  /**\n   * <p>A list of  objects containing the\n   *       results of the operation. The results are sorted in ascending order by the <code>Index</code>\n   *       field and match the order of the documents in the input list. If all of the documents contain\n   *       an error, the <code>ResultList</code> is empty.</p>\n   */\n  ResultList: BatchDetectEntitiesItemResult[] | undefined;\n\n  /**\n   * <p>A list containing one  object for each document\n   *       that contained an error. The results are sorted in ascending order by the <code>Index</code>\n   *       field and match the order of the documents in the input list. If there are no errors in the\n   *       batch, the <code>ErrorList</code> is empty.</p>\n   */\n  ErrorList: BatchItemError[] | undefined;\n}\n\nexport namespace BatchDetectEntitiesResponse {\n  export const filterSensitiveLog = (obj: BatchDetectEntitiesResponse): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Amazon Comprehend can't process the language of the input text. For all custom entity\n *       recognition APIs (such as <code>CreateEntityRecognizer</code>), only English, Spanish, French,\n *       Italian, German, or Portuguese are accepted. For most other APIs, such as those for Custom\n *       Classification, Amazon Comprehend accepts text in all supported languages. For a list of\n *       supported languages, see <a>supported-languages</a>. </p>\n */\nexport interface UnsupportedLanguageException extends __SmithyException, $MetadataBearer {\n  name: \"UnsupportedLanguageException\";\n  $fault: \"client\";\n  Message?: string;\n}\n\nexport namespace UnsupportedLanguageException {\n  export const filterSensitiveLog = (obj: UnsupportedLanguageException): any => ({\n    ...obj,\n  });\n}\n\nexport interface BatchDetectKeyPhrasesRequest {\n  /**\n   * <p>A list containing the text of the input documents. The list can contain a maximum of 25\n   *       documents. Each document must contain fewer that 5,000 bytes of UTF-8 encoded\n   *       characters.</p>\n   */\n  TextList: string[] | undefined;\n\n  /**\n   * <p>The language of the input documents. You can specify any of the primary languages\n   *       supported by Amazon Comprehend. All documents must be in the same language.</p>\n   */\n  LanguageCode: LanguageCode | string | undefined;\n}\n\nexport namespace BatchDetectKeyPhrasesRequest {\n  export const filterSensitiveLog = (obj: BatchDetectKeyPhrasesRequest): any => ({\n    ...obj,\n    ...(obj.TextList && { TextList: SENSITIVE_STRING }),\n  });\n}\n\n/**\n * <p>Describes a key noun phrase.</p>\n */\nexport interface KeyPhrase {\n  /**\n   * <p>The level of confidence that Amazon Comprehend has in the accuracy of the\n   *       detection.</p>\n   */\n  Score?: number;\n\n  /**\n   * <p>The text of a key noun phrase.</p>\n   */\n  Text?: string;\n\n  /**\n   * <p>A character offset in the input text that shows where the key phrase begins (the first\n   *       character is at position 0). The offset returns the position of each UTF-8 code point in the\n   *       string. A <i>code point</i> is the abstract character from a particular\n   *       graphical representation. For example, a multi-byte UTF-8 character maps to a single code\n   *       point.</p>\n   */\n  BeginOffset?: number;\n\n  /**\n   * <p>A character offset in the input text where the key phrase ends. The offset returns the\n   *       position of each UTF-8 code point in the string. A <code>code point</code> is the abstract\n   *       character from a particular graphical representation. For example, a multi-byte UTF-8\n   *       character maps to a single code point.</p>\n   */\n  EndOffset?: number;\n}\n\nexport namespace KeyPhrase {\n  export const filterSensitiveLog = (obj: KeyPhrase): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The result of calling the  operation. The\n *       operation returns one object for each document that is successfully processed by the\n *       operation.</p>\n */\nexport interface BatchDetectKeyPhrasesItemResult {\n  /**\n   * <p>The zero-based index of the document in the input list.</p>\n   */\n  Index?: number;\n\n  /**\n   * <p>One or more <a>KeyPhrase</a> objects, one for each key phrase detected in\n   *       the document.</p>\n   */\n  KeyPhrases?: KeyPhrase[];\n}\n\nexport namespace BatchDetectKeyPhrasesItemResult {\n  export const filterSensitiveLog = (obj: BatchDetectKeyPhrasesItemResult): any => ({\n    ...obj,\n  });\n}\n\nexport interface BatchDetectKeyPhrasesResponse {\n  /**\n   * <p>A list of  objects containing the\n   *       results of the operation. The results are sorted in ascending order by the <code>Index</code>\n   *       field and match the order of the documents in the input list. If all of the documents contain\n   *       an error, the <code>ResultList</code> is empty.</p>\n   */\n  ResultList: BatchDetectKeyPhrasesItemResult[] | undefined;\n\n  /**\n   * <p>A list containing one  object for each document\n   *       that contained an error. The results are sorted in ascending order by the <code>Index</code>\n   *       field and match the order of the documents in the input list. If there are no errors in the\n   *       batch, the <code>ErrorList</code> is empty.</p>\n   */\n  ErrorList: BatchItemError[] | undefined;\n}\n\nexport namespace BatchDetectKeyPhrasesResponse {\n  export const filterSensitiveLog = (obj: BatchDetectKeyPhrasesResponse): any => ({\n    ...obj,\n  });\n}\n\nexport interface BatchDetectSentimentRequest {\n  /**\n   * <p>A list containing the text of the input documents. The list can contain a maximum of 25\n   *       documents. Each document must contain fewer that 5,000 bytes of UTF-8 encoded\n   *       characters.</p>\n   */\n  TextList: string[] | undefined;\n\n  /**\n   * <p>The language of the input documents. You can specify any of the primary languages\n   *       supported by Amazon Comprehend. All documents must be in the same language.</p>\n   */\n  LanguageCode: LanguageCode | string | undefined;\n}\n\nexport namespace BatchDetectSentimentRequest {\n  export const filterSensitiveLog = (obj: BatchDetectSentimentRequest): any => ({\n    ...obj,\n    ...(obj.TextList && { TextList: SENSITIVE_STRING }),\n  });\n}\n\nexport enum SentimentType {\n  MIXED = \"MIXED\",\n  NEGATIVE = \"NEGATIVE\",\n  NEUTRAL = \"NEUTRAL\",\n  POSITIVE = \"POSITIVE\",\n}\n\n/**\n * <p>Describes the level of confidence that Amazon Comprehend has in the accuracy of its\n *       detection of sentiments.</p>\n */\nexport interface SentimentScore {\n  /**\n   * <p>The level of confidence that Amazon Comprehend has in the accuracy of its detection of\n   *       the <code>POSITIVE</code> sentiment.</p>\n   */\n  Positive?: number;\n\n  /**\n   * <p>The level of confidence that Amazon Comprehend has in the accuracy of its detection of\n   *       the <code>NEGATIVE</code> sentiment.</p>\n   */\n  Negative?: number;\n\n  /**\n   * <p>The level of confidence that Amazon Comprehend has in the accuracy of its detection of\n   *       the <code>NEUTRAL</code> sentiment.</p>\n   */\n  Neutral?: number;\n\n  /**\n   * <p>The level of confidence that Amazon Comprehend has in the accuracy of its detection of\n   *       the <code>MIXED</code> sentiment.</p>\n   */\n  Mixed?: number;\n}\n\nexport namespace SentimentScore {\n  export const filterSensitiveLog = (obj: SentimentScore): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The result of calling the  operation. The\n *       operation returns one object for each document that is successfully processed by the\n *       operation.</p>\n */\nexport interface BatchDetectSentimentItemResult {\n  /**\n   * <p>The zero-based index of the document in the input list.</p>\n   */\n  Index?: number;\n\n  /**\n   * <p>The sentiment detected in the document.</p>\n   */\n  Sentiment?: SentimentType | string;\n\n  /**\n   * <p>The level of confidence that Amazon Comprehend has in the accuracy of its sentiment\n   *       detection.</p>\n   */\n  SentimentScore?: SentimentScore;\n}\n\nexport namespace BatchDetectSentimentItemResult {\n  export const filterSensitiveLog = (obj: BatchDetectSentimentItemResult): any => ({\n    ...obj,\n  });\n}\n\nexport interface BatchDetectSentimentResponse {\n  /**\n   * <p>A list of  objects containing the\n   *       results of the operation. The results are sorted in ascending order by the <code>Index</code>\n   *       field and match the order of the documents in the input list. If all of the documents contain\n   *       an error, the <code>ResultList</code> is empty.</p>\n   */\n  ResultList: BatchDetectSentimentItemResult[] | undefined;\n\n  /**\n   * <p>A list containing one  object for each document\n   *       that contained an error. The results are sorted in ascending order by the <code>Index</code>\n   *       field and match the order of the documents in the input list. If there are no errors in the\n   *       batch, the <code>ErrorList</code> is empty.</p>\n   */\n  ErrorList: BatchItemError[] | undefined;\n}\n\nexport namespace BatchDetectSentimentResponse {\n  export const filterSensitiveLog = (obj: BatchDetectSentimentResponse): any => ({\n    ...obj,\n  });\n}\n\nexport enum SyntaxLanguageCode {\n  DE = \"de\",\n  EN = \"en\",\n  ES = \"es\",\n  FR = \"fr\",\n  IT = \"it\",\n  PT = \"pt\",\n}\n\nexport interface BatchDetectSyntaxRequest {\n  /**\n   * <p>A list containing the text of the input documents. The list can contain a maximum of 25\n   *       documents. Each document must contain fewer that 5,000 bytes of UTF-8 encoded\n   *       characters.</p>\n   */\n  TextList: string[] | undefined;\n\n  /**\n   * <p>The language of the input documents. You can specify any of the following languages\n   *       supported by Amazon Comprehend: German (\"de\"), English (\"en\"), Spanish (\"es\"), French (\"fr\"),\n   *       Italian (\"it\"), or Portuguese (\"pt\"). All documents must be in the same language.</p>\n   */\n  LanguageCode: SyntaxLanguageCode | string | undefined;\n}\n\nexport namespace BatchDetectSyntaxRequest {\n  export const filterSensitiveLog = (obj: BatchDetectSyntaxRequest): any => ({\n    ...obj,\n    ...(obj.TextList && { TextList: SENSITIVE_STRING }),\n  });\n}\n\nexport enum PartOfSpeechTagType {\n  ADJ = \"ADJ\",\n  ADP = \"ADP\",\n  ADV = \"ADV\",\n  AUX = \"AUX\",\n  CCONJ = \"CCONJ\",\n  CONJ = \"CONJ\",\n  DET = \"DET\",\n  INTJ = \"INTJ\",\n  NOUN = \"NOUN\",\n  NUM = \"NUM\",\n  O = \"O\",\n  PART = \"PART\",\n  PRON = \"PRON\",\n  PROPN = \"PROPN\",\n  PUNCT = \"PUNCT\",\n  SCONJ = \"SCONJ\",\n  SYM = \"SYM\",\n  VERB = \"VERB\",\n}\n\n/**\n * <p>Identifies the part of speech represented by the token and gives the confidence that\n *       Amazon Comprehend has that the part of speech was correctly identified. For more information\n *       about the parts of speech that Amazon Comprehend can identify, see <a>how-syntax</a>.</p>\n */\nexport interface PartOfSpeechTag {\n  /**\n   * <p>Identifies the part of speech that the token represents.</p>\n   */\n  Tag?: PartOfSpeechTagType | string;\n\n  /**\n   * <p>The confidence that Amazon Comprehend has that the part of speech was correctly\n   *       identified.</p>\n   */\n  Score?: number;\n}\n\nexport namespace PartOfSpeechTag {\n  export const filterSensitiveLog = (obj: PartOfSpeechTag): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Represents a work in the input text that was recognized and assigned a part of speech.\n *       There is one syntax token record for each word in the source text.</p>\n */\nexport interface SyntaxToken {\n  /**\n   * <p>A unique identifier for a token.</p>\n   */\n  TokenId?: number;\n\n  /**\n   * <p>The word that was recognized in the source text.</p>\n   */\n  Text?: string;\n\n  /**\n   * <p>The zero-based offset from the beginning of the source text to the first character in the\n   *       word.</p>\n   */\n  BeginOffset?: number;\n\n  /**\n   * <p>The zero-based offset from the beginning of the source text to the last character in the\n   *       word.</p>\n   */\n  EndOffset?: number;\n\n  /**\n   * <p>Provides the part of speech label and the confidence level that Amazon Comprehend has that\n   *       the part of speech was correctly identified. For more information, see <a>how-syntax</a>.</p>\n   */\n  PartOfSpeech?: PartOfSpeechTag;\n}\n\nexport namespace SyntaxToken {\n  export const filterSensitiveLog = (obj: SyntaxToken): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The result of calling the  operation. The operation\n *       returns one object that is successfully processed by the operation.</p>\n */\nexport interface BatchDetectSyntaxItemResult {\n  /**\n   * <p>The zero-based index of the document in the input list.</p>\n   */\n  Index?: number;\n\n  /**\n   * <p>The syntax tokens for the words in the document, one token for each word.</p>\n   */\n  SyntaxTokens?: SyntaxToken[];\n}\n\nexport namespace BatchDetectSyntaxItemResult {\n  export const filterSensitiveLog = (obj: BatchDetectSyntaxItemResult): any => ({\n    ...obj,\n  });\n}\n\nexport interface BatchDetectSyntaxResponse {\n  /**\n   * <p>A list of  objects containing the results\n   *       of the operation. The results are sorted in ascending order by the <code>Index</code> field\n   *       and match the order of the documents in the input list. If all of the documents contain an\n   *       error, the <code>ResultList</code> is empty.</p>\n   */\n  ResultList: BatchDetectSyntaxItemResult[] | undefined;\n\n  /**\n   * <p>A list containing one  object for each document that\n   *       contained an error. The results are sorted in ascending order by the <code>Index</code> field\n   *       and match the order of the documents in the input list. If there are no errors in the batch,\n   *       the <code>ErrorList</code> is empty.</p>\n   */\n  ErrorList: BatchItemError[] | undefined;\n}\n\nexport namespace BatchDetectSyntaxResponse {\n  export const filterSensitiveLog = (obj: BatchDetectSyntaxResponse): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Describes the result metrics for the test data associated with an documentation\n *       classifier.</p>\n */\nexport interface ClassifierEvaluationMetrics {\n  /**\n   * <p>The fraction of the labels that were correct recognized. It is computed by dividing the\n   *       number of labels in the test documents that were correctly recognized by the total number of\n   *       labels in the test documents.</p>\n   */\n  Accuracy?: number;\n\n  /**\n   * <p>A measure of the usefulness of the classifier results in the test data. High precision\n   *       means that the classifier returned substantially more relevant results than irrelevant\n   *       ones.</p>\n   */\n  Precision?: number;\n\n  /**\n   * <p>A measure of how complete the classifier results are for the test data. High recall means\n   *       that the classifier returned most of the relevant results. </p>\n   */\n  Recall?: number;\n\n  /**\n   * <p>A measure of how accurate the classifier results are for the test data. It is derived from\n   *       the <code>Precision</code> and <code>Recall</code> values. The <code>F1Score</code> is the\n   *       harmonic average of the two scores. The highest score is 1, and the worst score is 0. </p>\n   */\n  F1Score?: number;\n\n  /**\n   * <p>A measure of the usefulness of the recognizer results in the test data. High precision\n   *       means that the recognizer returned substantially more relevant results than irrelevant ones.\n   *       Unlike the Precision metric which comes from averaging the precision of all available labels,\n   *       this is based on the overall score of all precision scores added together.</p>\n   */\n  MicroPrecision?: number;\n\n  /**\n   * <p>A measure of how complete the classifier results are for the test data. High recall means\n   *       that the classifier returned most of the relevant results. Specifically, this indicates how\n   *       many of the correct categories in the text that the model can predict. It is a percentage of\n   *       correct categories in the text that can found. Instead of averaging the recall scores of all\n   *       labels (as with Recall), micro Recall is based on the overall score of all recall scores added\n   *       together.</p>\n   */\n  MicroRecall?: number;\n\n  /**\n   * <p>A measure of how accurate the classifier results are for the test data. It is a\n   *       combination of the <code>Micro Precision</code> and <code>Micro Recall</code> values. The\n   *         <code>Micro F1Score</code> is the harmonic mean of the two scores. The highest score is 1,\n   *       and the worst score is 0.</p>\n   */\n  MicroF1Score?: number;\n\n  /**\n   * <p>Indicates the fraction of labels that are incorrectly predicted. Also seen as the fraction\n   *       of wrong labels compared to the total number of labels. Scores closer to zero are\n   *       better.</p>\n   */\n  HammingLoss?: number;\n}\n\nexport namespace ClassifierEvaluationMetrics {\n  export const filterSensitiveLog = (obj: ClassifierEvaluationMetrics): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Provides information about a document classifier.</p>\n */\nexport interface ClassifierMetadata {\n  /**\n   * <p>The number of labels in the input data. </p>\n   */\n  NumberOfLabels?: number;\n\n  /**\n   * <p>The number of documents in the input data that were used to train the classifier.\n   *       Typically this is 80 to 90 percent of the input documents.</p>\n   */\n  NumberOfTrainedDocuments?: number;\n\n  /**\n   * <p>The number of documents in the input data that were used to test the classifier. Typically\n   *       this is 10 to 20 percent of the input documents, up to 10,000 documents.</p>\n   */\n  NumberOfTestDocuments?: number;\n\n  /**\n   * <p> Describes the result metrics for the test data associated with an documentation\n   *       classifier.</p>\n   */\n  EvaluationMetrics?: ClassifierEvaluationMetrics;\n}\n\nexport namespace ClassifierMetadata {\n  export const filterSensitiveLog = (obj: ClassifierMetadata): any => ({\n    ...obj,\n  });\n}\n\nexport interface ClassifyDocumentRequest {\n  /**\n   * <p>The document text to be analyzed.</p>\n   */\n  Text: string | undefined;\n\n  /**\n   * <p>The Amazon Resource Number (ARN) of the endpoint.</p>\n   */\n  EndpointArn: string | undefined;\n}\n\nexport namespace ClassifyDocumentRequest {\n  export const filterSensitiveLog = (obj: ClassifyDocumentRequest): any => ({\n    ...obj,\n    ...(obj.Text && { Text: SENSITIVE_STRING }),\n  });\n}\n\n/**\n * <p>Specifies the class that categorizes the document being analyzed</p>\n */\nexport interface DocumentClass {\n  /**\n   * <p>The name of the class.</p>\n   */\n  Name?: string;\n\n  /**\n   * <p>The confidence score that Amazon Comprehend has this class correctly attributed.</p>\n   */\n  Score?: number;\n}\n\nexport namespace DocumentClass {\n  export const filterSensitiveLog = (obj: DocumentClass): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Specifies one of the label or labels that categorize the document being analyzed.</p>\n */\nexport interface DocumentLabel {\n  /**\n   * <p>The name of the label.</p>\n   */\n  Name?: string;\n\n  /**\n   * <p>The confidence score that Amazon Comprehend has this label correctly attributed.</p>\n   */\n  Score?: number;\n}\n\nexport namespace DocumentLabel {\n  export const filterSensitiveLog = (obj: DocumentLabel): any => ({\n    ...obj,\n  });\n}\n\nexport interface ClassifyDocumentResponse {\n  /**\n   * <p>The classes used by the document being analyzed. These are used for multi-class trained\n   *       models. Individual classes are mutually exclusive and each document is expected to have only a\n   *       single class assigned to it. For example, an animal can be a dog or a cat, but not both at the\n   *       same time. </p>\n   */\n  Classes?: DocumentClass[];\n\n  /**\n   * <p>The labels used the document being analyzed. These are used for multi-label trained\n   *       models. Individual labels represent different categories that are related in some manner and\n   *       are not mutually exclusive. For example, a movie can be just an action movie, or it can be an\n   *       action movie, a science fiction movie, and a comedy, all at the same time. </p>\n   */\n  Labels?: DocumentLabel[];\n}\n\nexport namespace ClassifyDocumentResponse {\n  export const filterSensitiveLog = (obj: ClassifyDocumentResponse): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The specified resource is not available. Check the resource and try your request\n *       again.</p>\n */\nexport interface ResourceUnavailableException extends __SmithyException, $MetadataBearer {\n  name: \"ResourceUnavailableException\";\n  $fault: \"client\";\n  Message?: string;\n}\n\nexport namespace ResourceUnavailableException {\n  export const filterSensitiveLog = (obj: ResourceUnavailableException): any => ({\n    ...obj,\n  });\n}\n\nexport enum DocumentClassifierDataFormat {\n  AUGMENTED_MANIFEST = \"AUGMENTED_MANIFEST\",\n  COMPREHEND_CSV = \"COMPREHEND_CSV\",\n}\n\n/**\n * <p>The input properties for training a document classifier. </p>\n *          <p>For more information on how the input file is formatted, see <a>how-document-classification-training-data</a>. </p>\n */\nexport interface DocumentClassifierInputDataConfig {\n  /**\n   * <p>The format of your training data:</p>\n   *          <ul>\n   *             <li>\n   *                <p>\n   *                   <code>COMPREHEND_CSV</code>: A two-column CSV file, where labels are provided in the\n   *           first column, and documents are provided in the second. If you use this value, you must\n   *           provide the <code>S3Uri</code> parameter in your request.</p>\n   *             </li>\n   *             <li>\n   *                <p>\n   *                   <code>AUGMENTED_MANIFEST</code>: A labeled dataset that is produced by Amazon\n   *           SageMaker Ground Truth. This file is in JSON lines format. Each line is a complete JSON\n   *           object that contains a training document and its associated labels. </p>\n   *                <p>If you use this value, you must provide the <code>AugmentedManifests</code> parameter\n   *           in your request.</p>\n   *             </li>\n   *          </ul>\n   *          <p>If you don't specify a value, Amazon Comprehend uses <code>COMPREHEND_CSV</code> as the\n   *       default.</p>\n   */\n  DataFormat?: DocumentClassifierDataFormat | string;\n\n  /**\n   * <p>The Amazon S3 URI for the input data. The S3 bucket must be in the same region as the API\n   *       endpoint that you are calling. The URI can point to a single input file or it can provide the\n   *       prefix for a collection of input files.</p>\n   *          <p>For example, if you use the URI <code>S3://bucketName/prefix</code>, if the prefix is a\n   *       single file, Amazon Comprehend uses that file as input. If more than one file begins with the\n   *       prefix, Amazon Comprehend uses all of them as input.</p>\n   *          <p>This parameter is required if you set <code>DataFormat</code> to\n   *         <code>COMPREHEND_CSV</code>.</p>\n   */\n  S3Uri?: string;\n\n  /**\n   * <p>Indicates the delimiter used to separate each label for training a multi-label classifier.\n   *       The default delimiter between labels is a pipe (|). You can use a different character as a\n   *       delimiter (if it's an allowed character) by specifying it under Delimiter for labels. If the\n   *       training documents use a delimiter other than the default or the delimiter you specify, the\n   *       labels on that line will be combined to make a single unique label, such as\n   *       LABELLABELLABEL.</p>\n   */\n  LabelDelimiter?: string;\n\n  /**\n   * <p>A list of augmented manifest files that provide training data for your custom model. An\n   *       augmented manifest file is a labeled dataset that is produced by Amazon SageMaker Ground\n   *       Truth.</p>\n   *          <p>This parameter is required if you set <code>DataFormat</code> to\n   *         <code>AUGMENTED_MANIFEST</code>.</p>\n   */\n  AugmentedManifests?: AugmentedManifestsListItem[];\n}\n\nexport namespace DocumentClassifierInputDataConfig {\n  export const filterSensitiveLog = (obj: DocumentClassifierInputDataConfig): any => ({\n    ...obj,\n  });\n}\n\nexport enum DocumentClassifierMode {\n  MULTI_CLASS = \"MULTI_CLASS\",\n  MULTI_LABEL = \"MULTI_LABEL\",\n}\n\n/**\n * <p>Provides output results configuration parameters for custom classifier jobs. </p>\n */\nexport interface DocumentClassifierOutputDataConfig {\n  /**\n   * <p>When you use the <code>OutputDataConfig</code> object while creating a custom\n   *       classifier, you specify the Amazon S3 location where you want to write the confusion matrix.\n   *       The URI must be in the same region as the API endpoint that you are calling. The location is\n   *       used as the prefix for the actual location of this output file.</p>\n   *          <p>When the custom classifier job is finished, the service creates the output file in a\n   *       directory specific to the job. The <code>S3Uri</code> field contains the location of the\n   *       output file, called <code>output.tar.gz</code>. It is a compressed archive that contains the\n   *       confusion matrix.</p>\n   */\n  S3Uri?: string;\n\n  /**\n   * <p>ID for the AWS Key Management Service (KMS) key that Amazon Comprehend uses to encrypt the\n   *       output results from an analysis job. The KmsKeyId can be one of the following formats:</p>\n   *          <ul>\n   *             <li>\n   *                <p>KMS Key ID: <code>\"1234abcd-12ab-34cd-56ef-1234567890ab\"</code>\n   *                </p>\n   *             </li>\n   *             <li>\n   *                <p>Amazon Resource Name (ARN) of a KMS Key:\n   *             <code>\"arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab\"</code>\n   *                </p>\n   *             </li>\n   *             <li>\n   *                <p>KMS Key Alias: <code>\"alias/ExampleAlias\"</code>\n   *                </p>\n   *             </li>\n   *             <li>\n   *                <p>ARN of a KMS Key Alias:\n   *             <code>\"arn:aws:kms:us-west-2:111122223333:alias/ExampleAlias\"</code>\n   *                </p>\n   *             </li>\n   *          </ul>\n   */\n  KmsKeyId?: string;\n}\n\nexport namespace DocumentClassifierOutputDataConfig {\n  export const filterSensitiveLog = (obj: DocumentClassifierOutputDataConfig): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>A key-value pair that adds as a metadata to a resource used by Amazon Comprehend. For\n *       example, a tag with the key-value pair ‘Department’:’Sales’ might be added to a resource to\n *       indicate its use by a particular department. </p>\n */\nexport interface Tag {\n  /**\n   * <p>The initial part of a key-value pair that forms a tag associated with a given resource.\n   *       For instance, if you want to show which resources are used by which departments, you might use\n   *       “Department” as the key portion of the pair, with multiple possible values such as “sales,”\n   *       “legal,” and “administration.” </p>\n   */\n  Key: string | undefined;\n\n  /**\n   * <p> The second part of a key-value pair that forms a tag associated with a given resource.\n   *       For instance, if you want to show which resources are used by which departments, you might use\n   *       “Department” as the initial (key) portion of the pair, with a value of “sales” to indicate the\n   *       sales department. </p>\n   */\n  Value?: string;\n}\n\nexport namespace Tag {\n  export const filterSensitiveLog = (obj: Tag): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p> Configuration parameters for an optional private Virtual Private Cloud (VPC) containing\n *       the resources you are using for the job. For more information, see <a href=\"https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html\">Amazon\n *         VPC</a>. </p>\n */\nexport interface VpcConfig {\n  /**\n   * <p>The ID number for a security group on an instance of your private VPC. Security groups on\n   *       your VPC function serve as a virtual firewall to control inbound and outbound traffic and\n   *       provides security for the resources that you’ll be accessing on the VPC. This ID number is\n   *       preceded by \"sg-\", for instance: \"sg-03b388029b0a285ea\". For more information, see <a href=\"https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html\">Security\n   *         Groups for your VPC</a>. </p>\n   */\n  SecurityGroupIds: string[] | undefined;\n\n  /**\n   * <p>The ID for each subnet being used in your private VPC. This subnet is a subset of the a\n   *       range of IPv4 addresses used by the VPC and is specific to a given availability zone in the\n   *       VPC’s region. This ID number is preceded by \"subnet-\", for instance:\n   *       \"subnet-04ccf456919e69055\". For more information, see <a href=\"https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html\">VPCs and\n   *         Subnets</a>. </p>\n   */\n  Subnets: string[] | undefined;\n}\n\nexport namespace VpcConfig {\n  export const filterSensitiveLog = (obj: VpcConfig): any => ({\n    ...obj,\n  });\n}\n\nexport interface CreateDocumentClassifierRequest {\n  /**\n   * <p>The name of the document classifier.</p>\n   */\n  DocumentClassifierName: string | undefined;\n\n  /**\n   * <p>The Amazon Resource Name (ARN) of the AWS Identity and Management (IAM) role that grants\n   *       Amazon Comprehend read access to your input data.</p>\n   */\n  DataAccessRoleArn: string | undefined;\n\n  /**\n   * <p>Tags to be associated with the document classifier being created. A tag is a key-value\n   *       pair that adds as a metadata to a resource used by Amazon Comprehend. For example, a tag with\n   *       \"Sales\" as the key might be added to a resource to indicate its use by the sales department.\n   *     </p>\n   */\n  Tags?: Tag[];\n\n  /**\n   * <p>Specifies the format and location of the input data for the job.</p>\n   */\n  InputDataConfig: DocumentClassifierInputDataConfig | undefined;\n\n  /**\n   * <p>Enables the addition of output results configuration parameters for custom classifier\n   *       jobs.</p>\n   */\n  OutputDataConfig?: DocumentClassifierOutputDataConfig;\n\n  /**\n   * <p>A unique identifier for the request. If you don't set the client request token, Amazon\n   *       Comprehend generates one.</p>\n   */\n  ClientRequestToken?: string;\n\n  /**\n   * <p>The language of the input documents. You can specify any of the following languages\n   *       supported by Amazon Comprehend: German (\"de\"), English (\"en\"), Spanish (\"es\"), French (\"fr\"),\n   *       Italian (\"it\"), or Portuguese (\"pt\"). All documents must be in the same language.</p>\n   */\n  LanguageCode: LanguageCode | string | undefined;\n\n  /**\n   * <p>ID for the AWS Key Management Service (KMS) key that Amazon Comprehend uses to encrypt\n   *       data on the storage volume attached to the ML compute instance(s) that process the analysis\n   *       job. The VolumeKmsKeyId can be either of the following formats:</p>\n   *          <ul>\n   *             <li>\n   *                <p>KMS Key ID: <code>\"1234abcd-12ab-34cd-56ef-1234567890ab\"</code>\n   *                </p>\n   *             </li>\n   *             <li>\n   *                <p>Amazon Resource Name (ARN) of a KMS Key:\n   *             <code>\"arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab\"</code>\n   *                </p>\n   *             </li>\n   *          </ul>\n   */\n  VolumeKmsKeyId?: string;\n\n  /**\n   * <p>Configuration parameters for an optional private Virtual Private Cloud (VPC) containing\n   *       the resources you are using for your custom classifier. For more information, see <a href=\"https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html\">Amazon\n   *         VPC</a>. </p>\n   */\n  VpcConfig?: VpcConfig;\n\n  /**\n   * <p>Indicates the mode in which the classifier will be trained. The classifier can be trained\n   *       in multi-class mode, which identifies one and only one class for each document, or multi-label\n   *       mode, which identifies one or more labels for each document. In multi-label mode, multiple\n   *       labels for an individual document are separated by a delimiter. The default delimiter between\n   *       labels is a pipe (|).</p>\n   */\n  Mode?: DocumentClassifierMode | string;\n}\n\nexport namespace CreateDocumentClassifierRequest {\n  export const filterSensitiveLog = (obj: CreateDocumentClassifierRequest): any => ({\n    ...obj,\n  });\n}\n\nexport interface CreateDocumentClassifierResponse {\n  /**\n   * <p>The Amazon Resource Name (ARN) that identifies the document classifier.</p>\n   */\n  DocumentClassifierArn?: string;\n}\n\nexport namespace CreateDocumentClassifierResponse {\n  export const filterSensitiveLog = (obj: CreateDocumentClassifierResponse): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The KMS customer managed key (CMK) entered cannot be validated. Verify the key and\n *       re-enter it.</p>\n */\nexport interface KmsKeyValidationException extends __SmithyException, $MetadataBearer {\n  name: \"KmsKeyValidationException\";\n  $fault: \"client\";\n  Message?: string;\n}\n\nexport namespace KmsKeyValidationException {\n  export const filterSensitiveLog = (obj: KmsKeyValidationException): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The specified resource name is already in use. Use a different name and try your request\n *       again.</p>\n */\nexport interface ResourceInUseException extends __SmithyException, $MetadataBearer {\n  name: \"ResourceInUseException\";\n  $fault: \"client\";\n  Message?: string;\n}\n\nexport namespace ResourceInUseException {\n  export const filterSensitiveLog = (obj: ResourceInUseException): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The maximum number of resources per account has been exceeded. Review the resources, and\n *       then try your request again.</p>\n */\nexport interface ResourceLimitExceededException extends __SmithyException, $MetadataBearer {\n  name: \"ResourceLimitExceededException\";\n  $fault: \"client\";\n  Message?: string;\n}\n\nexport namespace ResourceLimitExceededException {\n  export const filterSensitiveLog = (obj: ResourceLimitExceededException): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The number of requests exceeds the limit. Resubmit your request later.</p>\n */\nexport interface TooManyRequestsException extends __SmithyException, $MetadataBearer {\n  name: \"TooManyRequestsException\";\n  $fault: \"client\";\n  Message?: string;\n}\n\nexport namespace TooManyRequestsException {\n  export const filterSensitiveLog = (obj: TooManyRequestsException): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The request contains more tags than can be associated with a resource (50 tags per\n *       resource). The maximum number of tags includes both existing tags and those included in your\n *       current request. </p>\n */\nexport interface TooManyTagsException extends __SmithyException, $MetadataBearer {\n  name: \"TooManyTagsException\";\n  $fault: \"client\";\n  Message?: string;\n}\n\nexport namespace TooManyTagsException {\n  export const filterSensitiveLog = (obj: TooManyTagsException): any => ({\n    ...obj,\n  });\n}\n\nexport interface CreateEndpointRequest {\n  /**\n   * <p>This is the descriptive suffix that becomes part of the <code>EndpointArn</code> used for\n   *       all subsequent requests to this resource. </p>\n   */\n  EndpointName: string | undefined;\n\n  /**\n   * <p>The Amazon Resource Number (ARN) of the model to which the endpoint will be\n   *       attached.</p>\n   */\n  ModelArn: string | undefined;\n\n  /**\n   * <p> The desired number of inference units to be used by the model using this endpoint.\n   *\n   *       Each inference unit represents of a throughput of 100 characters per second.</p>\n   */\n  DesiredInferenceUnits: number | undefined;\n\n  /**\n   * <p>An idempotency token provided by the customer. If this token matches a previous endpoint\n   *       creation request, Amazon Comprehend will not return a <code>ResourceInUseException</code>.\n   *     </p>\n   */\n  ClientRequestToken?: string;\n\n  /**\n   * <p>Tags associated with the endpoint being created. A tag is a key-value pair that adds\n   *       metadata to the endpoint. For example, a tag with \"Sales\" as the key might be added to an\n   *       endpoint to indicate its use by the sales department. </p>\n   */\n  Tags?: Tag[];\n}\n\nexport namespace CreateEndpointRequest {\n  export const filterSensitiveLog = (obj: CreateEndpointRequest): any => ({\n    ...obj,\n  });\n}\n\nexport interface CreateEndpointResponse {\n  /**\n   * <p>The Amazon Resource Number (ARN) of the endpoint being created.</p>\n   */\n  EndpointArn?: string;\n}\n\nexport namespace CreateEndpointResponse {\n  export const filterSensitiveLog = (obj: CreateEndpointResponse): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The specified resource ARN was not found. Check the ARN and try your request again.</p>\n */\nexport interface ResourceNotFoundException extends __SmithyException, $MetadataBearer {\n  name: \"ResourceNotFoundException\";\n  $fault: \"client\";\n  Message?: string;\n}\n\nexport namespace ResourceNotFoundException {\n  export const filterSensitiveLog = (obj: ResourceNotFoundException): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Describes the annotations associated with a entity recognizer.</p>\n */\nexport interface EntityRecognizerAnnotations {\n  /**\n   * <p> Specifies the Amazon S3 location where the annotations for an entity recognizer are\n   *       located. The URI must be in the same region as the API endpoint that you are calling.</p>\n   */\n  S3Uri: string | undefined;\n}\n\nexport namespace EntityRecognizerAnnotations {\n  export const filterSensitiveLog = (obj: EntityRecognizerAnnotations): any => ({\n    ...obj,\n  });\n}\n\nexport enum EntityRecognizerDataFormat {\n  AUGMENTED_MANIFEST = \"AUGMENTED_MANIFEST\",\n  COMPREHEND_CSV = \"COMPREHEND_CSV\",\n}\n\n/**\n * <p>Describes the training documents submitted with an entity recognizer.</p>\n */\nexport interface EntityRecognizerDocuments {\n  /**\n   * <p> Specifies the Amazon S3 location where the training documents for an entity recognizer\n   *       are located. The URI must be in the same region as the API endpoint that you are\n   *       calling.</p>\n   */\n  S3Uri: string | undefined;\n}\n\nexport namespace EntityRecognizerDocuments {\n  export const filterSensitiveLog = (obj: EntityRecognizerDocuments): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Describes the entity recognizer submitted with an entity recognizer.</p>\n */\nexport interface EntityRecognizerEntityList {\n  /**\n   * <p>Specifies the Amazon S3 location where the entity list is located. The URI must be in the\n   *       same region as the API endpoint that you are calling.</p>\n   */\n  S3Uri: string | undefined;\n}\n\nexport namespace EntityRecognizerEntityList {\n  export const filterSensitiveLog = (obj: EntityRecognizerEntityList): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>An entity type within a labeled training dataset that Amazon Comprehend uses to train a\n *       custom entity recognizer.</p>\n */\nexport interface EntityTypesListItem {\n  /**\n   * <p>An entity type within a labeled training dataset that Amazon Comprehend uses to train a\n   *       custom entity recognizer.</p>\n   *          <p>Entity types must not contain the following invalid characters: \\n (line break), \\\\n\n   *       (escaped line break, \\r (carriage return), \\\\r (escaped carriage return), \\t (tab), \\\\t\n   *       (escaped tab), space, and , (comma).</p>\n   */\n  Type: string | undefined;\n}\n\nexport namespace EntityTypesListItem {\n  export const filterSensitiveLog = (obj: EntityTypesListItem): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Specifies the format and location of the input data.</p>\n */\nexport interface EntityRecognizerInputDataConfig {\n  /**\n   * <p>The format of your training data:</p>\n   *          <ul>\n   *             <li>\n   *                <p>\n   *                   <code>COMPREHEND_CSV</code>: A CSV file that supplements your training documents. The\n   *           CSV file contains information about the custom entities that your trained model will\n   *           detect. The required format of the file depends on whether you are providing annotations\n   *           or an entity list.</p>\n   *                <p>If you use this value, you must provide your CSV file by using either the\n   *             <code>Annotations</code> or <code>EntityList</code> parameters. You must provide your\n   *           training documents by using the <code>Documents</code> parameter.</p>\n   *             </li>\n   *             <li>\n   *                <p>\n   *                   <code>AUGMENTED_MANIFEST</code>: A labeled dataset that is produced by Amazon\n   *           SageMaker Ground Truth. This file is in JSON lines format. Each line is a complete JSON\n   *           object that contains a training document and its labels. Each label annotates a named\n   *           entity in the training document. </p>\n   *                <p>If you use this value, you must provide the <code>AugmentedManifests</code> parameter\n   *           in your request.</p>\n   *             </li>\n   *          </ul>\n   *          <p>If you don't specify a value, Amazon Comprehend uses <code>COMPREHEND_CSV</code> as the\n   *       default.</p>\n   */\n  DataFormat?: EntityRecognizerDataFormat | string;\n\n  /**\n   * <p>The entity types in the labeled training data that Amazon Comprehend uses to train the\n   *       custom entity recognizer. Any entity types that you don't specify are ignored.</p>\n   *          <p>A maximum of 25 entity types can be used at one time to train an entity recognizer. Entity\n   *       types must not contain the following invalid characters: \\n (line break), \\\\n (escaped line\n   *       break), \\r (carriage return), \\\\r (escaped carriage return), \\t (tab), \\\\t (escaped tab),\n   *       space, and , (comma). </p>\n   */\n  EntityTypes: EntityTypesListItem[] | undefined;\n\n  /**\n   * <p>The S3 location of the folder that contains the training documents for your custom entity\n   *       recognizer.</p>\n   *          <p>This parameter is required if you set <code>DataFormat</code> to\n   *         <code>COMPREHEND_CSV</code>.</p>\n   */\n  Documents?: EntityRecognizerDocuments;\n\n  /**\n   * <p>The S3 location of the CSV file that annotates your training documents.</p>\n   */\n  Annotations?: EntityRecognizerAnnotations;\n\n  /**\n   * <p>The S3 location of the CSV file that has the entity list for your custom entity\n   *       recognizer.</p>\n   */\n  EntityList?: EntityRecognizerEntityList;\n\n  /**\n   * <p>A list of augmented manifest files that provide training data for your custom model. An\n   *       augmented manifest file is a labeled dataset that is produced by Amazon SageMaker Ground\n   *       Truth.</p>\n   *          <p>This parameter is required if you set <code>DataFormat</code> to\n   *         <code>AUGMENTED_MANIFEST</code>.</p>\n   */\n  AugmentedManifests?: AugmentedManifestsListItem[];\n}\n\nexport namespace EntityRecognizerInputDataConfig {\n  export const filterSensitiveLog = (obj: EntityRecognizerInputDataConfig): any => ({\n    ...obj,\n  });\n}\n\nexport interface CreateEntityRecognizerRequest {\n  /**\n   * <p>The name given to the newly created recognizer. Recognizer names can be a maximum of 256\n   *       characters. Alphanumeric characters, hyphens (-) and underscores (_) are allowed. The name\n   *       must be unique in the account/region.</p>\n   */\n  RecognizerName: string | undefined;\n\n  /**\n   * <p>The Amazon Resource Name (ARN) of the AWS Identity and Management (IAM) role that grants\n   *       Amazon Comprehend read access to your input data.</p>\n   */\n  DataAccessRoleArn: string | undefined;\n\n  /**\n   * <p>Tags to be associated with the entity recognizer being created. A tag is a key-value pair\n   *       that adds as a metadata to a resource used by Amazon Comprehend. For example, a tag with\n   *       \"Sales\" as the key might be added to a resource to indicate its use by the sales department.\n   *     </p>\n   */\n  Tags?: Tag[];\n\n  /**\n   * <p>Specifies the format and location of the input data. The S3 bucket containing the input\n   *       data must be located in the same region as the entity recognizer being created. </p>\n   */\n  InputDataConfig: EntityRecognizerInputDataConfig | undefined;\n\n  /**\n   * <p> A unique identifier for the request. If you don't set the client request token, Amazon\n   *       Comprehend generates one.</p>\n   */\n  ClientRequestToken?: string;\n\n  /**\n   * <p> You can specify any of the following languages supported by Amazon Comprehend: English\n   *       (\"en\"), Spanish (\"es\"), French (\"fr\"), Italian (\"it\"), German (\"de\"), or Portuguese (\"pt\").\n   *       All documents must be in the same language.</p>\n   */\n  LanguageCode: LanguageCode | string | undefined;\n\n  /**\n   * <p>ID for the AWS Key Management Service (KMS) key that Amazon Comprehend uses to encrypt\n   *       data on the storage volume attached to the ML compute instance(s) that process the analysis\n   *       job. The VolumeKmsKeyId can be either of the following formats:</p>\n   *          <ul>\n   *             <li>\n   *                <p>KMS Key ID: <code>\"1234abcd-12ab-34cd-56ef-1234567890ab\"</code>\n   *                </p>\n   *             </li>\n   *             <li>\n   *                <p>Amazon Resource Name (ARN) of a KMS Key:\n   *             <code>\"arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab\"</code>\n   *                </p>\n   *             </li>\n   *          </ul>\n   */\n  VolumeKmsKeyId?: string;\n\n  /**\n   * <p>Configuration parameters for an optional private Virtual Private Cloud (VPC) containing\n   *       the resources you are using for your custom entity recognizer. For more information, see\n   *         <a href=\"https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html\">Amazon\n   *         VPC</a>. </p>\n   */\n  VpcConfig?: VpcConfig;\n}\n\nexport namespace CreateEntityRecognizerRequest {\n  export const filterSensitiveLog = (obj: CreateEntityRecognizerRequest): any => ({\n    ...obj,\n  });\n}\n\nexport interface CreateEntityRecognizerResponse {\n  /**\n   * <p>The Amazon Resource Name (ARN) that identifies the entity recognizer.</p>\n   */\n  EntityRecognizerArn?: string;\n}\n\nexport namespace CreateEntityRecognizerResponse {\n  export const filterSensitiveLog = (obj: CreateEntityRecognizerResponse): any => ({\n    ...obj,\n  });\n}\n\nexport interface DeleteDocumentClassifierRequest {\n  /**\n   * <p>The Amazon Resource Name (ARN) that identifies the document classifier. </p>\n   */\n  DocumentClassifierArn: string | undefined;\n}\n\nexport namespace DeleteDocumentClassifierRequest {\n  export const filterSensitiveLog = (obj: DeleteDocumentClassifierRequest): any => ({\n    ...obj,\n  });\n}\n\nexport interface DeleteDocumentClassifierResponse {}\n\nexport namespace DeleteDocumentClassifierResponse {\n  export const filterSensitiveLog = (obj: DeleteDocumentClassifierResponse): any => ({\n    ...obj,\n  });\n}\n\nexport interface DeleteEndpointRequest {\n  /**\n   * <p>The Amazon Resource Number (ARN) of the endpoint being deleted.</p>\n   */\n  EndpointArn: string | undefined;\n}\n\nexport namespace DeleteEndpointRequest {\n  export const filterSensitiveLog = (obj: DeleteEndpointRequest): any => ({\n    ...obj,\n  });\n}\n\nexport interface DeleteEndpointResponse {}\n\nexport namespace DeleteEndpointResponse {\n  export const filterSensitiveLog = (obj: DeleteEndpointResponse): any => ({\n    ...obj,\n  });\n}\n\nexport interface DeleteEntityRecognizerRequest {\n  /**\n   * <p>The Amazon Resource Name (ARN) that identifies the entity recognizer.</p>\n   */\n  EntityRecognizerArn: string | undefined;\n}\n\nexport namespace DeleteEntityRecognizerRequest {\n  export const filterSensitiveLog = (obj: DeleteEntityRecognizerRequest): any => ({\n    ...obj,\n  });\n}\n\nexport interface DeleteEntityRecognizerResponse {}\n\nexport namespace DeleteEntityRecognizerResponse {\n  export const filterSensitiveLog = (obj: DeleteEntityRecognizerResponse): any => ({\n    ...obj,\n  });\n}\n\nexport interface DescribeDocumentClassificationJobRequest {\n  /**\n   * <p>The identifier that Amazon Comprehend generated for the job. The  operation returns this identifier in its\n   *       response.</p>\n   */\n  JobId: string | undefined;\n}\n\nexport namespace DescribeDocumentClassificationJobRequest {\n  export const filterSensitiveLog = (obj: DescribeDocumentClassificationJobRequest): any => ({\n    ...obj,\n  });\n}\n\nexport enum InputFormat {\n  ONE_DOC_PER_FILE = \"ONE_DOC_PER_FILE\",\n  ONE_DOC_PER_LINE = \"ONE_DOC_PER_LINE\",\n}\n\n/**\n * <p>The input properties for a topic detection job.</p>\n */\nexport interface InputDataConfig {\n  /**\n   * <p>The Amazon S3 URI for the input data. The URI must be in same region as the API\n   *       endpoint that you are calling. The URI can point to a single input file or it can provide the\n   *       prefix for a collection of data files. </p>\n   *          <p>For example, if you use the URI <code>S3://bucketName/prefix</code>, if the prefix is a\n   *       single file, Amazon Comprehend uses that file as input. If more than one file begins with the\n   *       prefix, Amazon Comprehend uses all of them as input.</p>\n   */\n  S3Uri: string | undefined;\n\n  /**\n   * <p>Specifies how the text in an input file should be processed:</p>\n   *          <ul>\n   *             <li>\n   *                <p>\n   *                   <code>ONE_DOC_PER_FILE</code> - Each file is considered a separate document. Use\n   *           this option when you are processing large documents, such as newspaper articles or\n   *           scientific papers.</p>\n   *             </li>\n   *             <li>\n   *                <p>\n   *                   <code>ONE_DOC_PER_LINE</code> - Each line in a file is considered a separate\n   *           document. Use this option when you are processing many short documents, such as text\n   *           messages.</p>\n   *             </li>\n   *          </ul>\n   */\n  InputFormat?: InputFormat | string;\n}\n\nexport namespace InputDataConfig {\n  export const filterSensitiveLog = (obj: InputDataConfig): any => ({\n    ...obj,\n  });\n}\n\nexport enum JobStatus {\n  COMPLETED = \"COMPLETED\",\n  FAILED = \"FAILED\",\n  IN_PROGRESS = \"IN_PROGRESS\",\n  STOPPED = \"STOPPED\",\n  STOP_REQUESTED = \"STOP_REQUESTED\",\n  SUBMITTED = \"SUBMITTED\",\n}\n\n/**\n * <p>Provides configuration parameters for the output of topic detection jobs.</p>\n *          <p></p>\n */\nexport interface OutputDataConfig {\n  /**\n   * <p>When you use the <code>OutputDataConfig</code> object with asynchronous operations, you\n   *       specify the Amazon S3 location where you want to write the output data. The URI must be in the\n   *       same region as the API endpoint that you are calling. The location is used as the prefix for\n   *       the actual location of the output file.</p>\n   *          <p>When the topic detection job is finished, the service creates an output file in a\n   *       directory specific to the job. The <code>S3Uri</code> field contains the location of the\n   *       output file, called <code>output.tar.gz</code>. It is a compressed archive that contains the\n   *       ouput of the operation.</p>\n   */\n  S3Uri: string | undefined;\n\n  /**\n   * <p>ID for the AWS Key Management Service (KMS) key that Amazon Comprehend uses to encrypt the\n   *       output results from an analysis job. The KmsKeyId can be one of the following formats:</p>\n   *          <ul>\n   *             <li>\n   *                <p>KMS Key ID: <code>\"1234abcd-12ab-34cd-56ef-1234567890ab\"</code>\n   *                </p>\n   *             </li>\n   *             <li>\n   *                <p>Amazon Resource Name (ARN) of a KMS Key:\n   *             <code>\"arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab\"</code>\n   *                </p>\n   *             </li>\n   *             <li>\n   *                <p>KMS Key Alias: <code>\"alias/ExampleAlias\"</code>\n   *                </p>\n   *             </li>\n   *             <li>\n   *                <p>ARN of a KMS Key Alias:\n   *             <code>\"arn:aws:kms:us-west-2:111122223333:alias/ExampleAlias\"</code>\n   *                </p>\n   *             </li>\n   *          </ul>\n   */\n  KmsKeyId?: string;\n}\n\nexport namespace OutputDataConfig {\n  export const filterSensitiveLog = (obj: OutputDataConfig): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Provides information about a document classification job.</p>\n */\nexport interface DocumentClassificationJobProperties {\n  /**\n   * <p>The identifier assigned to the document classification job.</p>\n   */\n  JobId?: string;\n\n  /**\n   * <p>The name that you assigned to the document classification job.</p>\n   */\n  JobName?: string;\n\n  /**\n   * <p>The current status of the document classification job. If the status is\n   *         <code>FAILED</code>, the <code>Message</code> field shows the reason for the failure.</p>\n   */\n  JobStatus?: JobStatus | string;\n\n  /**\n   * <p>A description of the status of the job.</p>\n   */\n  Message?: string;\n\n  /**\n   * <p>The time that the document classification job was submitted for processing.</p>\n   */\n  SubmitTime?: Date;\n\n  /**\n   * <p>The time that the document classification job completed.</p>\n   */\n  EndTime?: Date;\n\n  /**\n   * <p>The Amazon Resource Name (ARN) that identifies the document classifier. </p>\n   */\n  DocumentClassifierArn?: string;\n\n  /**\n   * <p>The input data configuration that you supplied when you created the document\n   *       classification job.</p>\n   */\n  InputDataConfig?: InputDataConfig;\n\n  /**\n   * <p>The output data configuration that you supplied when you created the document\n   *       classification job.</p>\n   */\n  OutputDataConfig?: OutputDataConfig;\n\n  /**\n   * <p>The Amazon Resource Name (ARN) of the AWS identity and Access Management (IAM) role that\n   *       grants Amazon Comprehend read access to your input data.</p>\n   */\n  DataAccessRoleArn?: string;\n\n  /**\n   * <p>ID for the AWS Key Management Service (KMS) key that Amazon Comprehend uses to encrypt\n   *       data on the storage volume attached to the ML compute instance(s) that process the analysis\n   *       job. The VolumeKmsKeyId can be either of the following formats:</p>\n   *          <ul>\n   *             <li>\n   *                <p>KMS Key ID: <code>\"1234abcd-12ab-34cd-56ef-1234567890ab\"</code>\n   *                </p>\n   *             </li>\n   *             <li>\n   *                <p>Amazon Resource Name (ARN) of a KMS Key:\n   *             <code>\"arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab\"</code>\n   *                </p>\n   *             </li>\n   *          </ul>\n   */\n  VolumeKmsKeyId?: string;\n\n  /**\n   * <p> Configuration parameters for a private Virtual Private Cloud (VPC) containing the\n   *       resources you are using for your document classification job. For more information, see <a href=\"https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html\">Amazon\n   *         VPC</a>. </p>\n   */\n  VpcConfig?: VpcConfig;\n}\n\nexport namespace DocumentClassificationJobProperties {\n  export const filterSensitiveLog = (obj: DocumentClassificationJobProperties): any => ({\n    ...obj,\n  });\n}\n\nexport interface DescribeDocumentClassificationJobResponse {\n  /**\n   * <p>An object that describes the properties associated with the document classification\n   *       job.</p>\n   */\n  DocumentClassificationJobProperties?: DocumentClassificationJobProperties;\n}\n\nexport namespace DescribeDocumentClassificationJobResponse {\n  export const filterSensitiveLog = (obj: DescribeDocumentClassificationJobResponse): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The specified job was not found. Check the job ID and try again.</p>\n */\nexport interface JobNotFoundException extends __SmithyException, $MetadataBearer {\n  name: \"JobNotFoundException\";\n  $fault: \"client\";\n  Message?: string;\n}\n\nexport namespace JobNotFoundException {\n  export const filterSensitiveLog = (obj: JobNotFoundException): any => ({\n    ...obj,\n  });\n}\n\nexport interface DescribeDocumentClassifierRequest {\n  /**\n   * <p>The Amazon Resource Name (ARN) that identifies the document classifier. The  operation returns this identifier in its\n   *       response.</p>\n   */\n  DocumentClassifierArn: string | undefined;\n}\n\nexport namespace DescribeDocumentClassifierRequest {\n  export const filterSensitiveLog = (obj: DescribeDocumentClassifierRequest): any => ({\n    ...obj,\n  });\n}\n\nexport enum ModelStatus {\n  DELETING = \"DELETING\",\n  IN_ERROR = \"IN_ERROR\",\n  STOPPED = \"STOPPED\",\n  STOP_REQUESTED = \"STOP_REQUESTED\",\n  SUBMITTED = \"SUBMITTED\",\n  TRAINED = \"TRAINED\",\n  TRAINING = \"TRAINING\",\n}\n\n/**\n * <p>Provides information about a document classifier.</p>\n */\nexport interface DocumentClassifierProperties {\n  /**\n   * <p>The Amazon Resource Name (ARN) that identifies the document classifier.</p>\n   */\n  DocumentClassifierArn?: string;\n\n  /**\n   * <p>The language code for the language of the documents that the classifier was trained\n   *       on.</p>\n   */\n  LanguageCode?: LanguageCode | string;\n\n  /**\n   * <p>The status of the document classifier. If the status is <code>TRAINED</code> the\n   *       classifier is ready to use. If the status is <code>FAILED</code> you can see additional\n   *       information about why the classifier wasn't trained in the <code>Message</code> field.</p>\n   */\n  Status?: ModelStatus | string;\n\n  /**\n   * <p>Additional information about the status of the classifier.</p>\n   */\n  Message?: string;\n\n  /**\n   * <p>The time that the document classifier was submitted for training.</p>\n   */\n  SubmitTime?: Date;\n\n  /**\n   * <p>The time that training the document classifier completed.</p>\n   */\n  EndTime?: Date;\n\n  /**\n   * <p>Indicates the time when the training starts on documentation classifiers. You are billed\n   *       for the time interval between this time and the value of TrainingEndTime. </p>\n   */\n  TrainingStartTime?: Date;\n\n  /**\n   * <p>The time that training of the document classifier was completed. Indicates the time when\n   *       the training completes on documentation classifiers. You are billed for the time interval\n   *       between this time and the value of TrainingStartTime.</p>\n   */\n  TrainingEndTime?: Date;\n\n  /**\n   * <p>The input data configuration that you supplied when you created the document classifier\n   *       for training.</p>\n   */\n  InputDataConfig?: DocumentClassifierInputDataConfig;\n\n  /**\n   * <p> Provides output results configuration parameters for custom classifier jobs.</p>\n   */\n  OutputDataConfig?: DocumentClassifierOutputDataConfig;\n\n  /**\n   * <p>Information about the document classifier, including the number of documents used for\n   *       training the classifier, the number of documents used for test the classifier, and an accuracy\n   *       rating.</p>\n   */\n  ClassifierMetadata?: ClassifierMetadata;\n\n  /**\n   * <p>The Amazon Resource Name (ARN) of the AWS Identity and Management (IAM) role that grants\n   *       Amazon Comprehend read access to your input data.</p>\n   */\n  DataAccessRoleArn?: string;\n\n  /**\n   * <p>ID for the AWS Key Management Service (KMS) key that Amazon Comprehend uses to encrypt\n   *       data on the storage volume attached to the ML compute instance(s) that process the analysis\n   *       job. The VolumeKmsKeyId can be either of the following formats:</p>\n   *          <ul>\n   *             <li>\n   *                <p>KMS Key ID: <code>\"1234abcd-12ab-34cd-56ef-1234567890ab\"</code>\n   *                </p>\n   *             </li>\n   *             <li>\n   *                <p>Amazon Resource Name (ARN) of a KMS Key:\n   *             <code>\"arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab\"</code>\n   *                </p>\n   *             </li>\n   *          </ul>\n   */\n  VolumeKmsKeyId?: string;\n\n  /**\n   * <p> Configuration parameters for a private Virtual Private Cloud (VPC) containing the\n   *       resources you are using for your custom classifier. For more information, see <a href=\"https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html\">Amazon\n   *         VPC</a>. </p>\n   */\n  VpcConfig?: VpcConfig;\n\n  /**\n   * <p>Indicates the mode in which the specific classifier was trained. This also indicates the\n   *       format of input documents and the format of the confusion matrix. Each classifier can only be\n   *       trained in one mode and this cannot be changed once the classifier is trained.</p>\n   */\n  Mode?: DocumentClassifierMode | string;\n}\n\nexport namespace DocumentClassifierProperties {\n  export const filterSensitiveLog = (obj: DocumentClassifierProperties): any => ({\n    ...obj,\n    ...(obj.ClassifierMetadata && { ClassifierMetadata: SENSITIVE_STRING }),\n  });\n}\n\nexport interface DescribeDocumentClassifierResponse {\n  /**\n   * <p>An object that contains the properties associated with a document classifier.</p>\n   */\n  DocumentClassifierProperties?: DocumentClassifierProperties;\n}\n\nexport namespace DescribeDocumentClassifierResponse {\n  export const filterSensitiveLog = (obj: DescribeDocumentClassifierResponse): any => ({\n    ...obj,\n    ...(obj.DocumentClassifierProperties && {\n      DocumentClassifierProperties: DocumentClassifierProperties.filterSensitiveLog(obj.DocumentClassifierProperties),\n    }),\n  });\n}\n\nexport interface DescribeDominantLanguageDetectionJobRequest {\n  /**\n   * <p>The identifier that Amazon Comprehend generated for the job. The  operation returns this identifier in its\n   *       response.</p>\n   */\n  JobId: string | undefined;\n}\n\nexport namespace DescribeDominantLanguageDetectionJobRequest {\n  export const filterSensitiveLog = (obj: DescribeDominantLanguageDetectionJobRequest): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Provides information about a dominant language detection job.</p>\n */\nexport interface DominantLanguageDetectionJobProperties {\n  /**\n   * <p>The identifier assigned to the dominant language detection job.</p>\n   */\n  JobId?: string;\n\n  /**\n   * <p>The name that you assigned to the dominant language detection job.</p>\n   */\n  JobName?: string;\n\n  /**\n   * <p>The current status of the dominant language detection job. If the status is\n   *         <code>FAILED</code>, the <code>Message</code> field shows the reason for the failure.</p>\n   */\n  JobStatus?: JobStatus | string;\n\n  /**\n   * <p>A description for the status of a job.</p>\n   */\n  Message?: string;\n\n  /**\n   * <p>The time that the dominant language detection job was submitted for processing.</p>\n   */\n  SubmitTime?: Date;\n\n  /**\n   * <p>The time that the dominant language detection job completed.</p>\n   */\n  EndTime?: Date;\n\n  /**\n   * <p>The input data configuration that you supplied when you created the dominant language\n   *       detection job.</p>\n   */\n  InputDataConfig?: InputDataConfig;\n\n  /**\n   * <p>The output data configuration that you supplied when you created the dominant language\n   *       detection job.</p>\n   */\n  OutputDataConfig?: OutputDataConfig;\n\n  /**\n   * <p>The Amazon Resource Name (ARN) that gives Amazon Comprehend read access to your input\n   *       data.</p>\n   */\n  DataAccessRoleArn?: string;\n\n  /**\n   * <p>ID for the AWS Key Management Service (KMS) key that Amazon Comprehend uses to encrypt\n   *       data on the storage volume attached to the ML compute instance(s) that process the analysis\n   *       job. The VolumeKmsKeyId can be either of the following formats:</p>\n   *          <ul>\n   *             <li>\n   *                <p>KMS Key ID: <code>\"1234abcd-12ab-34cd-56ef-1234567890ab\"</code>\n   *                </p>\n   *             </li>\n   *             <li>\n   *                <p>Amazon Resource Name (ARN) of a KMS Key:\n   *             <code>\"arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab\"</code>\n   *                </p>\n   *             </li>\n   *          </ul>\n   */\n  VolumeKmsKeyId?: string;\n\n  /**\n   * <p> Configuration parameters for a private Virtual Private Cloud (VPC) containing the\n   *       resources you are using for your dominant language detection job. For more information, see\n   *         <a href=\"https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html\">Amazon\n   *         VPC</a>. </p>\n   */\n  VpcConfig?: VpcConfig;\n}\n\nexport namespace DominantLanguageDetectionJobProperties {\n  export const filterSensitiveLog = (obj: DominantLanguageDetectionJobProperties): any => ({\n    ...obj,\n  });\n}\n\nexport interface DescribeDominantLanguageDetectionJobResponse {\n  /**\n   * <p>An object that contains the properties associated with a dominant language detection\n   *       job.</p>\n   */\n  DominantLanguageDetectionJobProperties?: DominantLanguageDetectionJobProperties;\n}\n\nexport namespace DescribeDominantLanguageDetectionJobResponse {\n  export const filterSensitiveLog = (obj: DescribeDominantLanguageDetectionJobResponse): any => ({\n    ...obj,\n  });\n}\n\nexport interface DescribeEndpointRequest {\n  /**\n   * <p>The Amazon Resource Number (ARN) of the endpoint being described.</p>\n   */\n  EndpointArn: string | undefined;\n}\n\nexport namespace DescribeEndpointRequest {\n  export const filterSensitiveLog = (obj: DescribeEndpointRequest): any => ({\n    ...obj,\n  });\n}\n\nexport enum EndpointStatus {\n  CREATING = \"CREATING\",\n  DELETING = \"DELETING\",\n  FAILED = \"FAILED\",\n  IN_SERVICE = \"IN_SERVICE\",\n  UPDATING = \"UPDATING\",\n}\n\n/**\n * <p>Specifies information about the specified endpoint.</p>\n */\nexport interface EndpointProperties {\n  /**\n   * <p>The Amazon Resource Number (ARN) of the endpoint.</p>\n   */\n  EndpointArn?: string;\n\n  /**\n   * <p>Specifies the status of the endpoint. Because the endpoint updates and creation are\n   *       asynchronous, so customers will need to wait for the endpoint to be <code>Ready</code> status\n   *       before making inference requests.</p>\n   */\n  Status?: EndpointStatus | string;\n\n  /**\n   * <p>Specifies a reason for failure in cases of <code>Failed</code> status.</p>\n   */\n  Message?: string;\n\n  /**\n   * <p>The Amazon Resource Number (ARN) of the model to which the endpoint is attached.</p>\n   */\n  ModelArn?: string;\n\n  /**\n   * <p>The desired number of inference units to be used by the model using this endpoint.\n   *\n   *       Each inference unit represents of a throughput of 100 characters per second.</p>\n   */\n  DesiredInferenceUnits?: number;\n\n  /**\n   * <p>The number of inference units currently used by the model using this endpoint.</p>\n   */\n  CurrentInferenceUnits?: number;\n\n  /**\n   * <p>The creation date and time of the endpoint.</p>\n   */\n  CreationTime?: Date;\n\n  /**\n   * <p>The date and time that the endpoint was last modified.</p>\n   */\n  LastModifiedTime?: Date;\n}\n\nexport namespace EndpointProperties {\n  export const filterSensitiveLog = (obj: EndpointProperties): any => ({\n    ...obj,\n  });\n}\n\nexport interface DescribeEndpointResponse {\n  /**\n   * <p>Describes information associated with the specific endpoint.</p>\n   */\n  EndpointProperties?: EndpointProperties;\n}\n\nexport namespace DescribeEndpointResponse {\n  export const filterSensitiveLog = (obj: DescribeEndpointResponse): any => ({\n    ...obj,\n  });\n}\n\nexport interface DescribeEntitiesDetectionJobRequest {\n  /**\n   * <p>The identifier that Amazon Comprehend generated for the job. The  operation returns this identifier in its\n   *       response.</p>\n   */\n  JobId: string | undefined;\n}\n\nexport namespace DescribeEntitiesDetectionJobRequest {\n  export const filterSensitiveLog = (obj: DescribeEntitiesDetectionJobRequest): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Provides information about an entities detection job.</p>\n */\nexport interface EntitiesDetectionJobProperties {\n  /**\n   * <p>The identifier assigned to the entities detection job.</p>\n   */\n  JobId?: string;\n\n  /**\n   * <p>The name that you assigned the entities detection job.</p>\n   */\n  JobName?: string;\n\n  /**\n   * <p>The current status of the entities detection job. If the status is <code>FAILED</code>,\n   *       the <code>Message</code> field shows the reason for the failure.</p>\n   */\n  JobStatus?: JobStatus | string;\n\n  /**\n   * <p>A description of the status of a job.</p>\n   */\n  Message?: string;\n\n  /**\n   * <p>The time that the entities detection job was submitted for processing.</p>\n   */\n  SubmitTime?: Date;\n\n  /**\n   * <p>The time that the entities detection job completed</p>\n   */\n  EndTime?: Date;\n\n  /**\n   * <p>The Amazon Resource Name (ARN) that identifies the entity recognizer.</p>\n   */\n  EntityRecognizerArn?: string;\n\n  /**\n   * <p>The input data configuration that you supplied when you created the entities detection\n   *       job.</p>\n   */\n  InputDataConfig?: InputDataConfig;\n\n  /**\n   * <p>The output data configuration that you supplied when you created the entities detection\n   *       job. </p>\n   */\n  OutputDataConfig?: OutputDataConfig;\n\n  /**\n   * <p>The language code of the input documents.</p>\n   */\n  LanguageCode?: LanguageCode | string;\n\n  /**\n   * <p>The Amazon Resource Name (ARN) that gives Amazon Comprehend read access to your input\n   *       data.</p>\n   */\n  DataAccessRoleArn?: string;\n\n  /**\n   * <p>ID for the AWS Key Management Service (KMS) key that Amazon Comprehend uses to encrypt\n   *       data on the storage volume attached to the ML compute instance(s) that process the analysis\n   *       job. The VolumeKmsKeyId can be either of the following formats:</p>\n   *          <ul>\n   *             <li>\n   *                <p>KMS Key ID: <code>\"1234abcd-12ab-34cd-56ef-1234567890ab\"</code>\n   *                </p>\n   *             </li>\n   *             <li>\n   *                <p>Amazon Resource Name (ARN) of a KMS Key:\n   *             <code>\"arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab\"</code>\n   *                </p>\n   *             </li>\n   *          </ul>\n   */\n  VolumeKmsKeyId?: string;\n\n  /**\n   * <p> Configuration parameters for a private Virtual Private Cloud (VPC) containing the\n   *       resources you are using for your entity detection job. For more information, see <a href=\"https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html\">Amazon\n   *         VPC</a>. </p>\n   */\n  VpcConfig?: VpcConfig;\n}\n\nexport namespace EntitiesDetectionJobProperties {\n  export const filterSensitiveLog = (obj: EntitiesDetectionJobProperties): any => ({\n    ...obj,\n  });\n}\n\nexport interface DescribeEntitiesDetectionJobResponse {\n  /**\n   * <p>An object that contains the properties associated with an entities detection job.</p>\n   */\n  EntitiesDetectionJobProperties?: EntitiesDetectionJobProperties;\n}\n\nexport namespace DescribeEntitiesDetectionJobResponse {\n  export const filterSensitiveLog = (obj: DescribeEntitiesDetectionJobResponse): any => ({\n    ...obj,\n  });\n}\n\nexport interface DescribeEntityRecognizerRequest {\n  /**\n   * <p>The Amazon Resource Name (ARN) that identifies the entity recognizer.</p>\n   */\n  EntityRecognizerArn: string | undefined;\n}\n\nexport namespace DescribeEntityRecognizerRequest {\n  export const filterSensitiveLog = (obj: DescribeEntityRecognizerRequest): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Detailed information about the accuracy of an entity recognizer for a specific entity\n *       type. </p>\n */\nexport interface EntityTypesEvaluationMetrics {\n  /**\n   * <p>A measure of the usefulness of the recognizer results for a specific entity type in the\n   *       test data. High precision means that the recognizer returned substantially more relevant\n   *       results than irrelevant ones. </p>\n   */\n  Precision?: number;\n\n  /**\n   * <p>A measure of how complete the recognizer results are for a specific entity type in the\n   *       test data. High recall means that the recognizer returned most of the relevant results.</p>\n   */\n  Recall?: number;\n\n  /**\n   * <p>A measure of how accurate the recognizer results are for a specific entity type in the\n   *       test data. It is derived from the <code>Precision</code> and <code>Recall</code> values. The\n   *         <code>F1Score</code> is the harmonic average of the two scores. The highest score is 1, and\n   *       the worst score is 0. </p>\n   */\n  F1Score?: number;\n}\n\nexport namespace EntityTypesEvaluationMetrics {\n  export const filterSensitiveLog = (obj: EntityTypesEvaluationMetrics): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Individual item from the list of entity types in the metadata of an entity\n *       recognizer.</p>\n */\nexport interface EntityRecognizerMetadataEntityTypesListItem {\n  /**\n   * <p>Type of entity from the list of entity types in the metadata of an entity recognizer.\n   *     </p>\n   */\n  Type?: string;\n\n  /**\n   * <p>Detailed information about the accuracy of the entity recognizer for a specific item on\n   *       the list of entity types. </p>\n   */\n  EvaluationMetrics?: EntityTypesEvaluationMetrics;\n\n  /**\n   * <p>Indicates the number of times the given entity type was seen in the training data. </p>\n   */\n  NumberOfTrainMentions?: number;\n}\n\nexport namespace EntityRecognizerMetadataEntityTypesListItem {\n  export const filterSensitiveLog = (obj: EntityRecognizerMetadataEntityTypesListItem): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Detailed information about the accuracy of an entity recognizer. </p>\n */\nexport interface EntityRecognizerEvaluationMetrics {\n  /**\n   * <p>A measure of the usefulness of the recognizer results in the test data. High precision\n   *       means that the recognizer returned substantially more relevant results than irrelevant ones.\n   *     </p>\n   */\n  Precision?: number;\n\n  /**\n   * <p>A measure of how complete the recognizer results are for the test data. High recall means\n   *       that the recognizer returned most of the relevant results.</p>\n   */\n  Recall?: number;\n\n  /**\n   * <p>A measure of how accurate the recognizer results are for the test data. It is derived from\n   *       the <code>Precision</code> and <code>Recall</code> values. The <code>F1Score</code> is the\n   *       harmonic average of the two scores. The highest score is 1, and the worst score is 0. </p>\n   */\n  F1Score?: number;\n}\n\nexport namespace EntityRecognizerEvaluationMetrics {\n  export const filterSensitiveLog = (obj: EntityRecognizerEvaluationMetrics): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Detailed information about an entity recognizer.</p>\n */\nexport interface EntityRecognizerMetadata {\n  /**\n   * <p> The number of documents in the input data that were used to train the entity recognizer.\n   *       Typically this is 80 to 90 percent of the input documents.</p>\n   */\n  NumberOfTrainedDocuments?: number;\n\n  /**\n   * <p> The number of documents in the input data that were used to test the entity recognizer.\n   *       Typically this is 10 to 20 percent of the input documents.</p>\n   */\n  NumberOfTestDocuments?: number;\n\n  /**\n   * <p>Detailed information about the accuracy of an entity recognizer.</p>\n   */\n  EvaluationMetrics?: EntityRecognizerEvaluationMetrics;\n\n  /**\n   * <p>Entity types from the metadata of an entity recognizer.</p>\n   */\n  EntityTypes?: EntityRecognizerMetadataEntityTypesListItem[];\n}\n\nexport namespace EntityRecognizerMetadata {\n  export const filterSensitiveLog = (obj: EntityRecognizerMetadata): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Describes information about an entity recognizer.</p>\n */\nexport interface EntityRecognizerProperties {\n  /**\n   * <p>The Amazon Resource Name (ARN) that identifies the entity recognizer.</p>\n   */\n  EntityRecognizerArn?: string;\n\n  /**\n   * <p> The language of the input documents. All documents must be in the same language. Only\n   *       English (\"en\") is currently supported.</p>\n   */\n  LanguageCode?: LanguageCode | string;\n\n  /**\n   * <p>Provides the status of the entity recognizer.</p>\n   */\n  Status?: ModelStatus | string;\n\n  /**\n   * <p> A description of the status of the recognizer.</p>\n   */\n  Message?: string;\n\n  /**\n   * <p>The time that the recognizer was submitted for processing.</p>\n   */\n  SubmitTime?: Date;\n\n  /**\n   * <p>The time that the recognizer creation completed.</p>\n   */\n  EndTime?: Date;\n\n  /**\n   * <p>The time that training of the entity recognizer started.</p>\n   */\n  TrainingStartTime?: Date;\n\n  /**\n   * <p>The time that training of the entity recognizer was completed.</p>\n   */\n  TrainingEndTime?: Date;\n\n  /**\n   * <p>The input data properties of an entity recognizer.</p>\n   */\n  InputDataConfig?: EntityRecognizerInputDataConfig;\n\n  /**\n   * <p> Provides information about an entity recognizer.</p>\n   */\n  RecognizerMetadata?: EntityRecognizerMetadata;\n\n  /**\n   * <p> The Amazon Resource Name (ARN) of the AWS Identity and Management (IAM) role that grants\n   *       Amazon Comprehend read access to your input data.</p>\n   */\n  DataAccessRoleArn?: string;\n\n  /**\n   * <p>ID for the AWS Key Management Service (KMS) key that Amazon Comprehend uses to encrypt\n   *       data on the storage volume attached to the ML compute instance(s) that process the analysis\n   *       job. The VolumeKmsKeyId can be either of the following formats:</p>\n   *          <ul>\n   *             <li>\n   *                <p>KMS Key ID: <code>\"1234abcd-12ab-34cd-56ef-1234567890ab\"</code>\n   *                </p>\n   *             </li>\n   *             <li>\n   *                <p>Amazon Resource Name (ARN) of a KMS Key:\n   *             <code>\"arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab\"</code>\n   *                </p>\n   *             </li>\n   *          </ul>\n   */\n  VolumeKmsKeyId?: string;\n\n  /**\n   * <p> Configuration parameters for a private Virtual Private Cloud (VPC) containing the\n   *       resources you are using for your custom entity recognizer. For more information, see <a href=\"https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html\">Amazon\n   *         VPC</a>. </p>\n   */\n  VpcConfig?: VpcConfig;\n}\n\nexport namespace EntityRecognizerProperties {\n  export const filterSensitiveLog = (obj: EntityRecognizerProperties): any => ({\n    ...obj,\n    ...(obj.RecognizerMetadata && { RecognizerMetadata: SENSITIVE_STRING }),\n  });\n}\n\nexport interface DescribeEntityRecognizerResponse {\n  /**\n   * <p>Describes information associated with an entity recognizer.</p>\n   */\n  EntityRecognizerProperties?: EntityRecognizerProperties;\n}\n\nexport namespace DescribeEntityRecognizerResponse {\n  export const filterSensitiveLog = (obj: DescribeEntityRecognizerResponse): any => ({\n    ...obj,\n    ...(obj.EntityRecognizerProperties && {\n      EntityRecognizerProperties: EntityRecognizerProperties.filterSensitiveLog(obj.EntityRecognizerProperties),\n    }),\n  });\n}\n\nexport interface DescribeEventsDetectionJobRequest {\n  /**\n   * <p>The identifier of the events detection job.</p>\n   */\n  JobId: string | undefined;\n}\n\nexport namespace DescribeEventsDetectionJobRequest {\n  export const filterSensitiveLog = (obj: DescribeEventsDetectionJobRequest): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Provides information about an events detection job.</p>\n */\nexport interface EventsDetectionJobProperties {\n  /**\n   * <p>The identifier assigned to the events detection job.</p>\n   */\n  JobId?: string;\n\n  /**\n   * <p>The name you assigned the events detection job.</p>\n   */\n  JobName?: string;\n\n  /**\n   * <p>The current status of the events detection job.</p>\n   */\n  JobStatus?: JobStatus | string;\n\n  /**\n   * <p>A description of the status of the events detection job.</p>\n   */\n  Message?: string;\n\n  /**\n   * <p>The time that the events detection job was submitted for processing.</p>\n   */\n  SubmitTime?: Date;\n\n  /**\n   * <p>The time that the events detection job completed.</p>\n   */\n  EndTime?: Date;\n\n  /**\n   * <p>The input data configuration that you supplied when you created the events detection job.</p>\n   */\n  InputDataConfig?: InputDataConfig;\n\n  /**\n   * <p>The output data configuration that you supplied when you created the events detection job.</p>\n   */\n  OutputDataConfig?: OutputDataConfig;\n\n  /**\n   * <p>The language code of the input documents.</p>\n   */\n  LanguageCode?: LanguageCode | string;\n\n  /**\n   * <p>The Amazon Resource Name (ARN) of the AWS Identify and Access Management (IAM) role that\n   *       grants Amazon Comprehend read access to your input data.</p>\n   */\n  DataAccessRoleArn?: string;\n\n  /**\n   * <p>The types of events that are detected by the job.</p>\n   */\n  TargetEventTypes?: string[];\n}\n\nexport namespace EventsDetectionJobProperties {\n  export const filterSensitiveLog = (obj: EventsDetectionJobProperties): any => ({\n    ...obj,\n  });\n}\n\nexport interface DescribeEventsDetectionJobResponse {\n  /**\n   * <p>An object that contains the properties associated with an event detection job.</p>\n   */\n  EventsDetectionJobProperties?: EventsDetectionJobProperties;\n}\n\nexport namespace DescribeEventsDetectionJobResponse {\n  export const filterSensitiveLog = (obj: DescribeEventsDetectionJobResponse): any => ({\n    ...obj,\n  });\n}\n\nexport interface DescribeKeyPhrasesDetectionJobRequest {\n  /**\n   * <p>The identifier that Amazon Comprehend generated for the job. The  operation returns this identifier in its\n   *       response.</p>\n   */\n  JobId: string | undefined;\n}\n\nexport namespace DescribeKeyPhrasesDetectionJobRequest {\n  export const filterSensitiveLog = (obj: DescribeKeyPhrasesDetectionJobRequest): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Provides information about a key phrases detection job.</p>\n */\nexport interface KeyPhrasesDetectionJobProperties {\n  /**\n   * <p>The identifier assigned to the key phrases detection job.</p>\n   */\n  JobId?: string;\n\n  /**\n   * <p>The name that you assigned the key phrases detection job.</p>\n   */\n  JobName?: string;\n\n  /**\n   * <p>The current status of the key phrases detection job. If the status is <code>FAILED</code>,\n   *       the <code>Message</code> field shows the reason for the failure.</p>\n   */\n  JobStatus?: JobStatus | string;\n\n  /**\n   * <p>A description of the status of a job.</p>\n   */\n  Message?: string;\n\n  /**\n   * <p>The time that the key phrases detection job was submitted for processing.</p>\n   */\n  SubmitTime?: Date;\n\n  /**\n   * <p>The time that the key phrases detection job completed.</p>\n   */\n  EndTime?: Date;\n\n  /**\n   * <p>The input data configuration that you supplied when you created the key phrases detection\n   *       job.</p>\n   */\n  InputDataConfig?: InputDataConfig;\n\n  /**\n   * <p>The output data configuration that you supplied when you created the key phrases detection\n   *       job.</p>\n   */\n  OutputDataConfig?: OutputDataConfig;\n\n  /**\n   * <p>The language code of the input documents.</p>\n   */\n  LanguageCode?: LanguageCode | string;\n\n  /**\n   * <p>The Amazon Resource Name (ARN) that gives Amazon Comprehend read access to your input\n   *       data.</p>\n   */\n  DataAccessRoleArn?: string;\n\n  /**\n   * <p>ID for the AWS Key Management Service (KMS) key that Amazon Comprehend uses to encrypt\n   *       data on the storage volume attached to the ML compute instance(s) that process the analysis\n   *       job. The VolumeKmsKeyId can be either of the following formats:</p>\n   *          <ul>\n   *             <li>\n   *                <p>KMS Key ID: <code>\"1234abcd-12ab-34cd-56ef-1234567890ab\"</code>\n   *                </p>\n   *             </li>\n   *             <li>\n   *                <p>Amazon Resource Name (ARN) of a KMS Key:\n   *             <code>\"arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab\"</code>\n   *                </p>\n   *             </li>\n   *          </ul>\n   */\n  VolumeKmsKeyId?: string;\n\n  /**\n   * <p> Configuration parameters for a private Virtual Private Cloud (VPC) containing the\n   *       resources you are using for your key phrases detection job. For more information, see <a href=\"https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html\">Amazon\n   *         VPC</a>. </p>\n   */\n  VpcConfig?: VpcConfig;\n}\n\nexport namespace KeyPhrasesDetectionJobProperties {\n  export const filterSensitiveLog = (obj: KeyPhrasesDetectionJobProperties): any => ({\n    ...obj,\n  });\n}\n\nexport interface DescribeKeyPhrasesDetectionJobResponse {\n  /**\n   * <p>An object that contains the properties associated with a key phrases detection job.\n   *     </p>\n   */\n  KeyPhrasesDetectionJobProperties?: KeyPhrasesDetectionJobProperties;\n}\n\nexport namespace DescribeKeyPhrasesDetectionJobResponse {\n  export const filterSensitiveLog = (obj: DescribeKeyPhrasesDetectionJobResponse): any => ({\n    ...obj,\n  });\n}\n\nexport interface DescribePiiEntitiesDetectionJobRequest {\n  /**\n   * <p>The identifier that Amazon Comprehend generated for the job. The  operation returns this identifier in its\n   *       response.</p>\n   */\n  JobId: string | undefined;\n}\n\nexport namespace DescribePiiEntitiesDetectionJobRequest {\n  export const filterSensitiveLog = (obj: DescribePiiEntitiesDetectionJobRequest): any => ({\n    ...obj,\n  });\n}\n\nexport enum PiiEntitiesDetectionMode {\n  ONLY_OFFSETS = \"ONLY_OFFSETS\",\n  ONLY_REDACTION = \"ONLY_REDACTION\",\n}\n\n/**\n * <p>Provides configuration parameters for the output of PII entity detection jobs.</p>\n */\nexport interface PiiOutputDataConfig {\n  /**\n   * <p>When you use the <code>PiiOutputDataConfig</code> object with asynchronous operations,\n   *       you specify the Amazon S3 location where you want to write the output data. </p>\n   */\n  S3Uri: string | undefined;\n\n  /**\n   * <p>ID for the AWS Key Management Service (KMS) key that Amazon Comprehend uses to encrypt the\n   *       output results from an analysis job.</p>\n   */\n  KmsKeyId?: string;\n}\n\nexport namespace PiiOutputDataConfig {\n  export const filterSensitiveLog = (obj: PiiOutputDataConfig): any => ({\n    ...obj,\n  });\n}\n\nexport enum PiiEntitiesDetectionMaskMode {\n  MASK = \"MASK\",\n  REPLACE_WITH_PII_ENTITY_TYPE = \"REPLACE_WITH_PII_ENTITY_TYPE\",\n}\n\nexport enum PiiEntityType {\n  ADDRESS = \"ADDRESS\",\n  AGE = \"AGE\",\n  ALL = \"ALL\",\n  AWS_ACCESS_KEY = \"AWS_ACCESS_KEY\",\n  AWS_SECRET_KEY = \"AWS_SECRET_KEY\",\n  BANK_ACCOUNT_NUMBER = \"BANK_ACCOUNT_NUMBER\",\n  BANK_ROUTING = \"BANK_ROUTING\",\n  CREDIT_DEBIT_CVV = \"CREDIT_DEBIT_CVV\",\n  CREDIT_DEBIT_EXPIRY = \"CREDIT_DEBIT_EXPIRY\",\n  CREDIT_DEBIT_NUMBER = \"CREDIT_DEBIT_NUMBER\",\n  DATE_TIME = \"DATE_TIME\",\n  DRIVER_ID = \"DRIVER_ID\",\n  EMAIL = \"EMAIL\",\n  IP_ADDRESS = \"IP_ADDRESS\",\n  MAC_ADDRESS = \"MAC_ADDRESS\",\n  NAME = \"NAME\",\n  PASSPORT_NUMBER = \"PASSPORT_NUMBER\",\n  PASSWORD = \"PASSWORD\",\n  PHONE = \"PHONE\",\n  PIN = \"PIN\",\n  SSN = \"SSN\",\n  URL = \"URL\",\n  USERNAME = \"USERNAME\",\n}\n\n/**\n * <p>Provides configuration parameters for PII entity redaction.</p>\n */\nexport interface RedactionConfig {\n  /**\n   * <p>An array of the types of PII entities that Amazon Comprehend detects in the input text for\n   *       your request.</p>\n   */\n  PiiEntityTypes?: (PiiEntityType | string)[];\n\n  /**\n   * <p>Specifies whether the PII entity is redacted with the mask character or the entity\n   *       type.</p>\n   */\n  MaskMode?: PiiEntitiesDetectionMaskMode | string;\n\n  /**\n   * <p>A character that replaces each character in the redacted PII entity.</p>\n   */\n  MaskCharacter?: string;\n}\n\nexport namespace RedactionConfig {\n  export const filterSensitiveLog = (obj: RedactionConfig): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Provides information about a PII entities detection job.</p>\n */\nexport interface PiiEntitiesDetectionJobProperties {\n  /**\n   * <p>The identifier assigned to the PII entities detection job.</p>\n   */\n  JobId?: string;\n\n  /**\n   * <p>The name that you assigned the PII entities detection job.</p>\n   */\n  JobName?: string;\n\n  /**\n   * <p>The current status of the PII entities detection job. If the status is\n   *       <code>FAILED</code>, the <code>Message</code> field shows the reason for the failure.</p>\n   */\n  JobStatus?: JobStatus | string;\n\n  /**\n   * <p>A description of the status of a job.</p>\n   */\n  Message?: string;\n\n  /**\n   * <p>The time that the PII entities detection job was submitted for processing.</p>\n   */\n  SubmitTime?: Date;\n\n  /**\n   * <p>The time that the PII entities detection job completed.</p>\n   */\n  EndTime?: Date;\n\n  /**\n   * <p>The input properties for a PII entities detection job.</p>\n   */\n  InputDataConfig?: InputDataConfig;\n\n  /**\n   * <p>The output data configuration that you supplied when you created the PII entities\n   *       detection job.</p>\n   */\n  OutputDataConfig?: PiiOutputDataConfig;\n\n  /**\n   * <p>Provides configuration parameters for PII entity redaction.</p>\n   *          <p>This parameter is required if you set the <code>Mode</code> parameter to\n   *         <code>ONLY_REDACTION</code>. In that case, you must provide a <code>RedactionConfig</code>\n   *       definition that includes the <code>PiiEntityTypes</code> parameter.</p>\n   */\n  RedactionConfig?: RedactionConfig;\n\n  /**\n   * <p>The language code of the input documents</p>\n   */\n  LanguageCode?: LanguageCode | string;\n\n  /**\n   * <p>The Amazon Resource Name (ARN) that gives Amazon Comprehend read access to your input\n   *       data.</p>\n   */\n  DataAccessRoleArn?: string;\n\n  /**\n   * <p>Specifies whether the output provides the locations (offsets) of PII entities or a file in\n   *       which PII entities are redacted.</p>\n   */\n  Mode?: PiiEntitiesDetectionMode | string;\n}\n\nexport namespace PiiEntitiesDetectionJobProperties {\n  export const filterSensitiveLog = (obj: PiiEntitiesDetectionJobProperties): any => ({\n    ...obj,\n  });\n}\n\nexport interface DescribePiiEntitiesDetectionJobResponse {\n  /**\n   * <p>Provides information about a PII entities detection job.</p>\n   */\n  PiiEntitiesDetectionJobProperties?: PiiEntitiesDetectionJobProperties;\n}\n\nexport namespace DescribePiiEntitiesDetectionJobResponse {\n  export const filterSensitiveLog = (obj: DescribePiiEntitiesDetectionJobResponse): any => ({\n    ...obj,\n  });\n}\n\nexport interface DescribeSentimentDetectionJobRequest {\n  /**\n   * <p>The identifier that Amazon Comprehend generated for the job. The  operation returns this identifier in its\n   *       response.</p>\n   */\n  JobId: string | undefined;\n}\n\nexport namespace DescribeSentimentDetectionJobRequest {\n  export const filterSensitiveLog = (obj: DescribeSentimentDetectionJobRequest): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Provides information about a sentiment detection job.</p>\n */\nexport interface SentimentDetectionJobProperties {\n  /**\n   * <p>The identifier assigned to the sentiment detection job.</p>\n   */\n  JobId?: string;\n\n  /**\n   * <p>The name that you assigned to the sentiment detection job</p>\n   */\n  JobName?: string;\n\n  /**\n   * <p>The current status of the sentiment detection job. If the status is <code>FAILED</code>,\n   *       the <code>Messages</code> field shows the reason for the failure.</p>\n   */\n  JobStatus?: JobStatus | string;\n\n  /**\n   * <p>A description of the status of a job.</p>\n   */\n  Message?: string;\n\n  /**\n   * <p>The time that the sentiment detection job was submitted for processing.</p>\n   */\n  SubmitTime?: Date;\n\n  /**\n   * <p>The time that the sentiment detection job ended.</p>\n   */\n  EndTime?: Date;\n\n  /**\n   * <p>The input data configuration that you supplied when you created the sentiment detection\n   *       job.</p>\n   */\n  InputDataConfig?: InputDataConfig;\n\n  /**\n   * <p>The output data configuration that you supplied when you created the sentiment detection\n   *       job.</p>\n   */\n  OutputDataConfig?: OutputDataConfig;\n\n  /**\n   * <p>The language code of the input documents.</p>\n   */\n  LanguageCode?: LanguageCode | string;\n\n  /**\n   * <p>The Amazon Resource Name (ARN) that gives Amazon Comprehend read access to your input\n   *       data.</p>\n   */\n  DataAccessRoleArn?: string;\n\n  /**\n   * <p>ID for the AWS Key Management Service (KMS) key that Amazon Comprehend uses to encrypt\n   *       data on the storage volume attached to the ML compute instance(s) that process the analysis\n   *       job. The VolumeKmsKeyId can be either of the following formats:</p>\n   *          <ul>\n   *             <li>\n   *                <p>KMS Key ID: <code>\"1234abcd-12ab-34cd-56ef-1234567890ab\"</code>\n   *                </p>\n   *             </li>\n   *             <li>\n   *                <p>Amazon Resource Name (ARN) of a KMS Key:\n   *             <code>\"arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab\"</code>\n   *                </p>\n   *             </li>\n   *          </ul>\n   */\n  VolumeKmsKeyId?: string;\n\n  /**\n   * <p> Configuration parameters for a private Virtual Private Cloud (VPC) containing the\n   *       resources you are using for your sentiment detection job. For more information, see <a href=\"https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html\">Amazon\n   *         VPC</a>. </p>\n   */\n  VpcConfig?: VpcConfig;\n}\n\nexport namespace SentimentDetectionJobProperties {\n  export const filterSensitiveLog = (obj: SentimentDetectionJobProperties): any => ({\n    ...obj,\n  });\n}\n\nexport interface DescribeSentimentDetectionJobResponse {\n  /**\n   * <p>An object that contains the properties associated with a sentiment detection job.</p>\n   */\n  SentimentDetectionJobProperties?: SentimentDetectionJobProperties;\n}\n\nexport namespace DescribeSentimentDetectionJobResponse {\n  export const filterSensitiveLog = (obj: DescribeSentimentDetectionJobResponse): any => ({\n    ...obj,\n  });\n}\n\nexport interface DescribeTopicsDetectionJobRequest {\n  /**\n   * <p>The identifier assigned by the user to the detection job.</p>\n   */\n  JobId: string | undefined;\n}\n\nexport namespace DescribeTopicsDetectionJobRequest {\n  export const filterSensitiveLog = (obj: DescribeTopicsDetectionJobRequest): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Provides information about a topic detection job.</p>\n */\nexport interface TopicsDetectionJobProperties {\n  /**\n   * <p>The identifier assigned to the topic detection job.</p>\n   */\n  JobId?: string;\n\n  /**\n   * <p>The name of the topic detection job.</p>\n   */\n  JobName?: string;\n\n  /**\n   * <p>The current status of the topic detection job. If the status is <code>Failed</code>,\n   *       the reason for the failure is shown in the <code>Message</code> field.</p>\n   */\n  JobStatus?: JobStatus | string;\n\n  /**\n   * <p>A description for the status of a job.</p>\n   */\n  Message?: string;\n\n  /**\n   * <p>The time that the topic detection job was submitted for processing.</p>\n   */\n  SubmitTime?: Date;\n\n  /**\n   * <p>The time that the topic detection job was completed.</p>\n   */\n  EndTime?: Date;\n\n  /**\n   * <p>The input data configuration supplied when you created the topic detection\n   *       job.</p>\n   */\n  InputDataConfig?: InputDataConfig;\n\n  /**\n   * <p>The output data configuration supplied when you created the topic detection\n   *       job.</p>\n   */\n  OutputDataConfig?: OutputDataConfig;\n\n  /**\n   * <p>The number of topics to detect supplied when you created the topic detection job. The\n   *       default is 10. </p>\n   */\n  NumberOfTopics?: number;\n\n  /**\n   * <p>The Amazon Resource Name (ARN) of the AWS Identity and Management (IAM) role that grants\n   *       Amazon Comprehend read access to your job data. </p>\n   */\n  DataAccessRoleArn?: string;\n\n  /**\n   * <p>ID for the AWS Key Management Service (KMS) key that Amazon Comprehend uses to encrypt\n   *       data on the storage volume attached to the ML compute instance(s) that process the analysis\n   *       job. The VolumeKmsKeyId can be either of the following formats:</p>\n   *          <ul>\n   *             <li>\n   *                <p>KMS Key ID: <code>\"1234abcd-12ab-34cd-56ef-1234567890ab\"</code>\n   *                </p>\n   *             </li>\n   *             <li>\n   *                <p>Amazon Resource Name (ARN) of a KMS Key:\n   *             <code>\"arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab\"</code>\n   *                </p>\n   *             </li>\n   *          </ul>\n   */\n  VolumeKmsKeyId?: string;\n\n  /**\n   * <p>Configuration parameters for a private Virtual Private Cloud (VPC) containing the\n   *       resources you are using for your topic detection job. For more information, see <a href=\"https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html\">Amazon\n   *         VPC</a>. </p>\n   */\n  VpcConfig?: VpcConfig;\n}\n\nexport namespace TopicsDetectionJobProperties {\n  export const filterSensitiveLog = (obj: TopicsDetectionJobProperties): any => ({\n    ...obj,\n  });\n}\n\nexport interface DescribeTopicsDetectionJobResponse {\n  /**\n   * <p>The list of properties for the requested job.</p>\n   */\n  TopicsDetectionJobProperties?: TopicsDetectionJobProperties;\n}\n\nexport namespace DescribeTopicsDetectionJobResponse {\n  export const filterSensitiveLog = (obj: DescribeTopicsDetectionJobResponse): any => ({\n    ...obj,\n  });\n}\n\nexport interface DetectDominantLanguageRequest {\n  /**\n   * <p>A UTF-8 text string. Each string should contain at least 20 characters and must contain\n   *       fewer that 5,000 bytes of UTF-8 encoded characters.</p>\n   */\n  Text: string | undefined;\n}\n\nexport namespace DetectDominantLanguageRequest {\n  export const filterSensitiveLog = (obj: DetectDominantLanguageRequest): any => ({\n    ...obj,\n    ...(obj.Text && { Text: SENSITIVE_STRING }),\n  });\n}\n\nexport interface DetectDominantLanguageResponse {\n  /**\n   * <p>The languages that Amazon Comprehend detected in the input text. For each language, the\n   *       response returns the RFC 5646 language code and the level of confidence that Amazon Comprehend\n   *       has in the accuracy of its inference. For more information about RFC 5646, see <a href=\"https://tools.ietf.org/html/rfc5646\">Tags for Identifying Languages</a> on the\n   *         <i>IETF Tools</i> web site.</p>\n   */\n  Languages?: DominantLanguage[];\n}\n\nexport namespace DetectDominantLanguageResponse {\n  export const filterSensitiveLog = (obj: DetectDominantLanguageResponse): any => ({\n    ...obj,\n  });\n}\n\nexport interface DetectEntitiesRequest {\n  /**\n   * <p>A UTF-8 text string. Each string must contain fewer that 5,000 bytes of UTF-8 encoded\n   *       characters.</p>\n   */\n  Text: string | undefined;\n\n  /**\n   * <p>The language of the input documents. You can specify any of the primary languages\n   *       supported by Amazon Comprehend. All documents must be in the same language.</p>\n   *          <p>If your request includes the endpoint for a custom entity recognition model, Amazon\n   *       Comprehend uses the language of your custom model, and it ignores any language code that you\n   *       specify here.</p>\n   */\n  LanguageCode?: LanguageCode | string;\n\n  /**\n   * <p>The Amazon Resource Name of an endpoint that is associated with a custom entity\n   *       recognition model. Provide an endpoint if you want to detect entities by using your own custom\n   *       model instead of the default model that is used by Amazon Comprehend.</p>\n   *          <p>If you specify an endpoint, Amazon Comprehend uses the language of your custom model, and\n   *       it ignores any language code that you provide in your request.</p>\n   */\n  EndpointArn?: string;\n}\n\nexport namespace DetectEntitiesRequest {\n  export const filterSensitiveLog = (obj: DetectEntitiesRequest): any => ({\n    ...obj,\n    ...(obj.Text && { Text: SENSITIVE_STRING }),\n  });\n}\n\nexport interface DetectEntitiesResponse {\n  /**\n   * <p>A collection of entities identified in the input text. For each entity, the response\n   *       provides the entity text, entity type, where the entity text begins and ends, and the level of\n   *       confidence that Amazon Comprehend has in the detection. </p>\n   *          <p>If your request uses a custom entity recognition model, Amazon Comprehend detects the\n   *       entities that the model is trained to recognize. Otherwise, it detects the default entity\n   *       types. For a list of default entity types, see <a>how-entities</a>.</p>\n   */\n  Entities?: Entity[];\n}\n\nexport namespace DetectEntitiesResponse {\n  export const filterSensitiveLog = (obj: DetectEntitiesResponse): any => ({\n    ...obj,\n  });\n}\n\nexport interface DetectKeyPhrasesRequest {\n  /**\n   * <p>A UTF-8 text string. Each string must contain fewer that 5,000 bytes of UTF-8 encoded\n   *       characters.</p>\n   */\n  Text: string | undefined;\n\n  /**\n   * <p>The language of the input documents. You can specify any of the primary languages\n   *       supported by Amazon Comprehend. All documents must be in the same language.</p>\n   */\n  LanguageCode: LanguageCode | string | undefined;\n}\n\nexport namespace DetectKeyPhrasesRequest {\n  export const filterSensitiveLog = (obj: DetectKeyPhrasesRequest): any => ({\n    ...obj,\n    ...(obj.Text && { Text: SENSITIVE_STRING }),\n  });\n}\n\nexport interface DetectKeyPhrasesResponse {\n  /**\n   * <p>A collection of key phrases that Amazon Comprehend identified in the input text. For\n   *       each key phrase, the response provides the text of the key phrase, where the key phrase begins\n   *       and ends, and the level of confidence that Amazon Comprehend has in the accuracy of the\n   *       detection. </p>\n   */\n  KeyPhrases?: KeyPhrase[];\n}\n\nexport namespace DetectKeyPhrasesResponse {\n  export const filterSensitiveLog = (obj: DetectKeyPhrasesResponse): any => ({\n    ...obj,\n  });\n}\n\nexport interface DetectPiiEntitiesRequest {\n  /**\n   * <p>A UTF-8 text string. Each string must contain fewer that 5,000 bytes of UTF-8 encoded\n   *       characters.</p>\n   */\n  Text: string | undefined;\n\n  /**\n   * <p>The language of the input documents.</p>\n   */\n  LanguageCode: LanguageCode | string | undefined;\n}\n\nexport namespace DetectPiiEntitiesRequest {\n  export const filterSensitiveLog = (obj: DetectPiiEntitiesRequest): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Provides information about a PII entity.</p>\n */\nexport interface PiiEntity {\n  /**\n   * <p>The level of confidence that Amazon Comprehend has in the accuracy of the\n   *       detection.</p>\n   */\n  Score?: number;\n\n  /**\n   * <p>The entity's type.</p>\n   */\n  Type?: PiiEntityType | string;\n\n  /**\n   * <p>A character offset in the input text that shows where the PII entity begins (the first\n   *       character is at position 0). The offset returns the position of each UTF-8 code point in the\n   *       string. A <i>code point</i> is the abstract character from a particular\n   *       graphical representation. For example, a multi-byte UTF-8 character maps to a single code\n   *       point.</p>\n   */\n  BeginOffset?: number;\n\n  /**\n   * <p>A character offset in the input text that shows where the PII entity ends. The offset\n   *       returns the position of each UTF-8 code point in the string. A <i>code point</i>\n   *       is the abstract character from a particular graphical representation. For example, a\n   *       multi-byte UTF-8 character maps to a single code point.</p>\n   */\n  EndOffset?: number;\n}\n\nexport namespace PiiEntity {\n  export const filterSensitiveLog = (obj: PiiEntity): any => ({\n    ...obj,\n  });\n}\n\nexport interface DetectPiiEntitiesResponse {\n  /**\n   * <p>A collection of PII entities identified in the input text. For each entity, the response\n   *       provides the entity type, where the entity text begins and ends, and the level of confidence\n   *       that Amazon Comprehend has in the detection.</p>\n   */\n  Entities?: PiiEntity[];\n}\n\nexport namespace DetectPiiEntitiesResponse {\n  export const filterSensitiveLog = (obj: DetectPiiEntitiesResponse): any => ({\n    ...obj,\n  });\n}\n\nexport interface DetectSentimentRequest {\n  /**\n   * <p>A UTF-8 text string. Each string must contain fewer that 5,000 bytes of UTF-8 encoded\n   *       characters.</p>\n   */\n  Text: string | undefined;\n\n  /**\n   * <p>The language of the input documents. You can specify any of the primary languages\n   *       supported by Amazon Comprehend. All documents must be in the same language.</p>\n   */\n  LanguageCode: LanguageCode | string | undefined;\n}\n\nexport namespace DetectSentimentRequest {\n  export const filterSensitiveLog = (obj: DetectSentimentRequest): any => ({\n    ...obj,\n    ...(obj.Text && { Text: SENSITIVE_STRING }),\n  });\n}\n\nexport interface DetectSentimentResponse {\n  /**\n   * <p>The inferred sentiment that Amazon Comprehend has the highest level of confidence\n   *       in.</p>\n   */\n  Sentiment?: SentimentType | string;\n\n  /**\n   * <p>An object that lists the sentiments, and their corresponding confidence\n   *       levels.</p>\n   */\n  SentimentScore?: SentimentScore;\n}\n\nexport namespace DetectSentimentResponse {\n  export const filterSensitiveLog = (obj: DetectSentimentResponse): any => ({\n    ...obj,\n  });\n}\n\nexport interface DetectSyntaxRequest {\n  /**\n   * <p>A UTF-8 string. Each string must contain fewer that 5,000 bytes of UTF encoded\n   *       characters.</p>\n   */\n  Text: string | undefined;\n\n  /**\n   * <p>The language code of the input documents. You can specify any of the following languages\n   *       supported by Amazon Comprehend: German (\"de\"), English (\"en\"), Spanish (\"es\"), French (\"fr\"),\n   *       Italian (\"it\"), or Portuguese (\"pt\").</p>\n   */\n  LanguageCode: SyntaxLanguageCode | string | undefined;\n}\n\nexport namespace DetectSyntaxRequest {\n  export const filterSensitiveLog = (obj: DetectSyntaxRequest): any => ({\n    ...obj,\n    ...(obj.Text && { Text: SENSITIVE_STRING }),\n  });\n}\n\nexport interface DetectSyntaxResponse {\n  /**\n   * <p>A collection of syntax tokens describing the text. For each token, the response provides\n   *       the text, the token type, where the text begins and ends, and the level of confidence that\n   *       Amazon Comprehend has that the token is correct. For a list of token types, see <a>how-syntax</a>.</p>\n   */\n  SyntaxTokens?: SyntaxToken[];\n}\n\nexport namespace DetectSyntaxResponse {\n  export const filterSensitiveLog = (obj: DetectSyntaxResponse): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The filter specified for the operation is invalid. Specify a different\n *       filter.</p>\n */\nexport interface InvalidFilterException extends __SmithyException, $MetadataBearer {\n  name: \"InvalidFilterException\";\n  $fault: \"client\";\n  Message?: string;\n}\n\nexport namespace InvalidFilterException {\n  export const filterSensitiveLog = (obj: InvalidFilterException): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Provides information for filtering a list of document classification jobs. For more\n *       information, see the  operation. You can\n *       provide only one filter parameter in each request.</p>\n */\nexport interface DocumentClassificationJobFilter {\n  /**\n   * <p>Filters on the name of the job.</p>\n   */\n  JobName?: string;\n\n  /**\n   * <p>Filters the list based on job status. Returns only jobs with the specified status.</p>\n   */\n  JobStatus?: JobStatus | string;\n\n  /**\n   * <p>Filters the list of jobs based on the time that the job was submitted for processing.\n   *       Returns only jobs submitted before the specified time. Jobs are returned in ascending order,\n   *       oldest to newest.</p>\n   */\n  SubmitTimeBefore?: Date;\n\n  /**\n   * <p>Filters the list of jobs based on the time that the job was submitted for processing.\n   *       Returns only jobs submitted after the specified time. Jobs are returned in descending order,\n   *       newest to oldest.</p>\n   */\n  SubmitTimeAfter?: Date;\n}\n\nexport namespace DocumentClassificationJobFilter {\n  export const filterSensitiveLog = (obj: DocumentClassificationJobFilter): any => ({\n    ...obj,\n  });\n}\n\nexport interface ListDocumentClassificationJobsRequest {\n  /**\n   * <p>Filters the jobs that are returned. You can filter jobs on their names, status, or the\n   *       date and time that they were submitted. You can only set one filter at a time.</p>\n   */\n  Filter?: DocumentClassificationJobFilter;\n\n  /**\n   * <p>Identifies the next page of results to return.</p>\n   */\n  NextToken?: string;\n\n  /**\n   * <p>The maximum number of results to return in each page. The default is 100.</p>\n   */\n  MaxResults?: number;\n}\n\nexport namespace ListDocumentClassificationJobsRequest {\n  export const filterSensitiveLog = (obj: ListDocumentClassificationJobsRequest): any => ({\n    ...obj,\n  });\n}\n\nexport interface ListDocumentClassificationJobsResponse {\n  /**\n   * <p>A list containing the properties of each job returned.</p>\n   */\n  DocumentClassificationJobPropertiesList?: DocumentClassificationJobProperties[];\n\n  /**\n   * <p>Identifies the next page of results to return.</p>\n   */\n  NextToken?: string;\n}\n\nexport namespace ListDocumentClassificationJobsResponse {\n  export const filterSensitiveLog = (obj: ListDocumentClassificationJobsResponse): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Provides information for filtering a list of document classifiers. You can only specify\n *       one filtering parameter in a request. For more information, see the  operation.</p>\n */\nexport interface DocumentClassifierFilter {\n  /**\n   * <p>Filters the list of classifiers based on status.</p>\n   */\n  Status?: ModelStatus | string;\n\n  /**\n   * <p>Filters the list of classifiers based on the time that the classifier was submitted for\n   *       processing. Returns only classifiers submitted before the specified time. Classifiers are\n   *       returned in ascending order, oldest to newest.</p>\n   */\n  SubmitTimeBefore?: Date;\n\n  /**\n   * <p>Filters the list of classifiers based on the time that the classifier was submitted for\n   *       processing. Returns only classifiers submitted after the specified time. Classifiers are\n   *       returned in descending order, newest to oldest.</p>\n   */\n  SubmitTimeAfter?: Date;\n}\n\nexport namespace DocumentClassifierFilter {\n  export const filterSensitiveLog = (obj: DocumentClassifierFilter): any => ({\n    ...obj,\n  });\n}\n\nexport interface ListDocumentClassifiersRequest {\n  /**\n   * <p>Filters the jobs that are returned. You can filter jobs on their name, status, or the date\n   *       and time that they were submitted. You can only set one filter at a time.</p>\n   */\n  Filter?: DocumentClassifierFilter;\n\n  /**\n   * <p>Identifies the next page of results to return.</p>\n   */\n  NextToken?: string;\n\n  /**\n   * <p>The maximum number of results to return in each page. The default is 100.</p>\n   */\n  MaxResults?: number;\n}\n\nexport namespace ListDocumentClassifiersRequest {\n  export const filterSensitiveLog = (obj: ListDocumentClassifiersRequest): any => ({\n    ...obj,\n  });\n}\n\nexport interface ListDocumentClassifiersResponse {\n  /**\n   * <p>A list containing the properties of each job returned.</p>\n   */\n  DocumentClassifierPropertiesList?: DocumentClassifierProperties[];\n\n  /**\n   * <p>Identifies the next page of results to return.</p>\n   */\n  NextToken?: string;\n}\n\nexport namespace ListDocumentClassifiersResponse {\n  export const filterSensitiveLog = (obj: ListDocumentClassifiersResponse): any => ({\n    ...obj,\n    ...(obj.DocumentClassifierPropertiesList && {\n      DocumentClassifierPropertiesList: obj.DocumentClassifierPropertiesList.map((item) =>\n        DocumentClassifierProperties.filterSensitiveLog(item)\n      ),\n    }),\n  });\n}\n\n/**\n * <p>Provides information for filtering a list of dominant language detection jobs. For more\n *       information, see the  operation.</p>\n */\nexport interface DominantLanguageDetectionJobFilter {\n  /**\n   * <p>Filters on the name of the job.</p>\n   */\n  JobName?: string;\n\n  /**\n   * <p>Filters the list of jobs based on job status. Returns only jobs with the specified\n   *       status.</p>\n   */\n  JobStatus?: JobStatus | string;\n\n  /**\n   * <p>Filters the list of jobs based on the time that the job was submitted for processing.\n   *       Returns only jobs submitted before the specified time. Jobs are returned in ascending order,\n   *       oldest to newest.</p>\n   */\n  SubmitTimeBefore?: Date;\n\n  /**\n   * <p>Filters the list of jobs based on the time that the job was submitted for processing.\n   *       Returns only jobs submitted after the specified time. Jobs are returned in descending order,\n   *       newest to oldest.</p>\n   */\n  SubmitTimeAfter?: Date;\n}\n\nexport namespace DominantLanguageDetectionJobFilter {\n  export const filterSensitiveLog = (obj: DominantLanguageDetectionJobFilter): any => ({\n    ...obj,\n  });\n}\n\nexport interface ListDominantLanguageDetectionJobsRequest {\n  /**\n   * <p>Filters that jobs that are returned. You can filter jobs on their name, status, or the\n   *       date and time that they were submitted. You can only set one filter at a time.</p>\n   */\n  Filter?: DominantLanguageDetectionJobFilter;\n\n  /**\n   * <p>Identifies the next page of results to return.</p>\n   */\n  NextToken?: string;\n\n  /**\n   * <p>The maximum number of results to return in each page. The default is 100.</p>\n   */\n  MaxResults?: number;\n}\n\nexport namespace ListDominantLanguageDetectionJobsRequest {\n  export const filterSensitiveLog = (obj: ListDominantLanguageDetectionJobsRequest): any => ({\n    ...obj,\n  });\n}\n\nexport interface ListDominantLanguageDetectionJobsResponse {\n  /**\n   * <p>A list containing the properties of each job that is returned.</p>\n   */\n  DominantLanguageDetectionJobPropertiesList?: DominantLanguageDetectionJobProperties[];\n\n  /**\n   * <p>Identifies the next page of results to return.</p>\n   */\n  NextToken?: string;\n}\n\nexport namespace ListDominantLanguageDetectionJobsResponse {\n  export const filterSensitiveLog = (obj: ListDominantLanguageDetectionJobsResponse): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The filter used to determine which endpoints are returned. You can filter jobs on\n *       their name, model, status, or the date and time that they were created. You can only set one\n *       filter at a time. </p>\n */\nexport interface EndpointFilter {\n  /**\n   * <p>The Amazon Resource Number (ARN) of the model to which the endpoint is attached.</p>\n   */\n  ModelArn?: string;\n\n  /**\n   * <p>Specifies the status of the endpoint being returned. Possible values are: Creating, Ready,\n   *       Updating, Deleting, Failed.</p>\n   */\n  Status?: EndpointStatus | string;\n\n  /**\n   * <p>Specifies a date before which the returned endpoint or endpoints were created.</p>\n   */\n  CreationTimeBefore?: Date;\n\n  /**\n   * <p>Specifies a date after which the returned endpoint or endpoints were created.</p>\n   */\n  CreationTimeAfter?: Date;\n}\n\nexport namespace EndpointFilter {\n  export const filterSensitiveLog = (obj: EndpointFilter): any => ({\n    ...obj,\n  });\n}\n\nexport interface ListEndpointsRequest {\n  /**\n   * <p>Filters the endpoints that are returned. You can filter endpoints on their name, model,\n   *       status, or the date and time that they were created. You can only set one filter at a time.\n   *     </p>\n   */\n  Filter?: EndpointFilter;\n\n  /**\n   * <p>Identifies the next page of results to return.</p>\n   */\n  NextToken?: string;\n\n  /**\n   * <p>The maximum number of results to return in each page. The default is 100.</p>\n   */\n  MaxResults?: number;\n}\n\nexport namespace ListEndpointsRequest {\n  export const filterSensitiveLog = (obj: ListEndpointsRequest): any => ({\n    ...obj,\n  });\n}\n\nexport interface ListEndpointsResponse {\n  /**\n   * <p>Displays a list of endpoint properties being retrieved by the service in response to the\n   *       request.</p>\n   */\n  EndpointPropertiesList?: EndpointProperties[];\n\n  /**\n   * <p>Identifies the next page of results to return.</p>\n   */\n  NextToken?: string;\n}\n\nexport namespace ListEndpointsResponse {\n  export const filterSensitiveLog = (obj: ListEndpointsResponse): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Provides information for filtering a list of dominant language detection jobs. For more\n *       information, see the  operation.</p>\n */\nexport interface EntitiesDetectionJobFilter {\n  /**\n   * <p>Filters on the name of the job.</p>\n   */\n  JobName?: string;\n\n  /**\n   * <p>Filters the list of jobs based on job status. Returns only jobs with the specified\n   *       status.</p>\n   */\n  JobStatus?: JobStatus | string;\n\n  /**\n   * <p>Filters the list of jobs based on the time that the job was submitted for processing.\n   *       Returns only jobs submitted before the specified time. Jobs are returned in ascending order,\n   *       oldest to newest.</p>\n   */\n  SubmitTimeBefore?: Date;\n\n  /**\n   * <p>Filters the list of jobs based on the time that the job was submitted for processing.\n   *       Returns only jobs submitted after the specified time. Jobs are returned in descending order,\n   *       newest to oldest.</p>\n   */\n  SubmitTimeAfter?: Date;\n}\n\nexport namespace EntitiesDetectionJobFilter {\n  export const filterSensitiveLog = (obj: EntitiesDetectionJobFilter): any => ({\n    ...obj,\n  });\n}\n\nexport interface ListEntitiesDetectionJobsRequest {\n  /**\n   * <p>Filters the jobs that are returned. You can filter jobs on their name, status, or the date\n   *       and time that they were submitted. You can only set one filter at a time.</p>\n   */\n  Filter?: EntitiesDetectionJobFilter;\n\n  /**\n   * <p>Identifies the next page of results to return.</p>\n   */\n  NextToken?: string;\n\n  /**\n   * <p>The maximum number of results to return in each page. The default is 100.</p>\n   */\n  MaxResults?: number;\n}\n\nexport namespace ListEntitiesDetectionJobsRequest {\n  export const filterSensitiveLog = (obj: ListEntitiesDetectionJobsRequest): any => ({\n    ...obj,\n  });\n}\n\nexport interface ListEntitiesDetectionJobsResponse {\n  /**\n   * <p>A list containing the properties of each job that is returned.</p>\n   */\n  EntitiesDetectionJobPropertiesList?: EntitiesDetectionJobProperties[];\n\n  /**\n   * <p>Identifies the next page of results to return.</p>\n   */\n  NextToken?: string;\n}\n\nexport namespace ListEntitiesDetectionJobsResponse {\n  export const filterSensitiveLog = (obj: ListEntitiesDetectionJobsResponse): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Provides information for filtering a list of entity recognizers. You can only specify one\n *       filtering parameter in a request. For more information, see the  operation./></p>\n */\nexport interface EntityRecognizerFilter {\n  /**\n   * <p>The status of an entity recognizer.</p>\n   */\n  Status?: ModelStatus | string;\n\n  /**\n   * <p>Filters the list of entities based on the time that the list was submitted for processing.\n   *       Returns only jobs submitted before the specified time. Jobs are returned in descending order,\n   *       newest to oldest.</p>\n   */\n  SubmitTimeBefore?: Date;\n\n  /**\n   * <p>Filters the list of entities based on the time that the list was submitted for processing.\n   *       Returns only jobs submitted after the specified time. Jobs are returned in ascending order,\n   *       oldest to newest.</p>\n   */\n  SubmitTimeAfter?: Date;\n}\n\nexport namespace EntityRecognizerFilter {\n  export const filterSensitiveLog = (obj: EntityRecognizerFilter): any => ({\n    ...obj,\n  });\n}\n\nexport interface ListEntityRecognizersRequest {\n  /**\n   * <p>Filters the list of entities returned. You can filter on <code>Status</code>,\n   *         <code>SubmitTimeBefore</code>, or <code>SubmitTimeAfter</code>. You can only set one filter\n   *       at a time.</p>\n   */\n  Filter?: EntityRecognizerFilter;\n\n  /**\n   * <p>Identifies the next page of results to return.</p>\n   */\n  NextToken?: string;\n\n  /**\n   * <p> The maximum number of results to return on each page. The default is 100.</p>\n   */\n  MaxResults?: number;\n}\n\nexport namespace ListEntityRecognizersRequest {\n  export const filterSensitiveLog = (obj: ListEntityRecognizersRequest): any => ({\n    ...obj,\n  });\n}\n\nexport interface ListEntityRecognizersResponse {\n  /**\n   * <p>The list of properties of an entity recognizer.</p>\n   */\n  EntityRecognizerPropertiesList?: EntityRecognizerProperties[];\n\n  /**\n   * <p>Identifies the next page of results to return.</p>\n   */\n  NextToken?: string;\n}\n\nexport namespace ListEntityRecognizersResponse {\n  export const filterSensitiveLog = (obj: ListEntityRecognizersResponse): any => ({\n    ...obj,\n    ...(obj.EntityRecognizerPropertiesList && {\n      EntityRecognizerPropertiesList: obj.EntityRecognizerPropertiesList.map((item) =>\n        EntityRecognizerProperties.filterSensitiveLog(item)\n      ),\n    }),\n  });\n}\n\n/**\n * <p>Provides information for filtering a list of event detection jobs.</p>\n */\nexport interface EventsDetectionJobFilter {\n  /**\n   * <p>Filters on the name of the events detection job.</p>\n   */\n  JobName?: string;\n\n  /**\n   * <p>Filters the list of jobs based on job status. Returns only jobs with the specified\n   *       status.</p>\n   */\n  JobStatus?: JobStatus | string;\n\n  /**\n   * <p>Filters the list of jobs based on the time that the job was submitted for processing.\n   *       Returns only jobs submitted before the specified time. Jobs are returned in ascending order,\n   *       oldest to newest.</p>\n   */\n  SubmitTimeBefore?: Date;\n\n  /**\n   * <p>Filters the list of jobs based on the time that the job was submitted for processing.\n   *       Returns only jobs submitted after the specified time. Jobs are returned in descending order,\n   *       newest to oldest.</p>\n   */\n  SubmitTimeAfter?: Date;\n}\n\nexport namespace EventsDetectionJobFilter {\n  export const filterSensitiveLog = (obj: EventsDetectionJobFilter): any => ({\n    ...obj,\n  });\n}\n\nexport interface ListEventsDetectionJobsRequest {\n  /**\n   * <p>Filters the jobs that are returned. You can filter jobs on their name, status, or the date\n   *       and time that they were submitted. You can only set one filter at a time.</p>\n   */\n  Filter?: EventsDetectionJobFilter;\n\n  /**\n   * <p>Identifies the next page of results to return.</p>\n   */\n  NextToken?: string;\n\n  /**\n   * <p>The maximum number of results to return in each page.</p>\n   */\n  MaxResults?: number;\n}\n\nexport namespace ListEventsDetectionJobsRequest {\n  export const filterSensitiveLog = (obj: ListEventsDetectionJobsRequest): any => ({\n    ...obj,\n  });\n}\n\nexport interface ListEventsDetectionJobsResponse {\n  /**\n   * <p>A list containing the properties of each job that is returned.</p>\n   */\n  EventsDetectionJobPropertiesList?: EventsDetectionJobProperties[];\n\n  /**\n   * <p>Identifies the next page of results to return.</p>\n   */\n  NextToken?: string;\n}\n\nexport namespace ListEventsDetectionJobsResponse {\n  export const filterSensitiveLog = (obj: ListEventsDetectionJobsResponse): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Provides information for filtering a list of dominant language detection jobs. For more\n *       information, see the  operation.</p>\n */\nexport interface KeyPhrasesDetectionJobFilter {\n  /**\n   * <p>Filters on the name of the job.</p>\n   */\n  JobName?: string;\n\n  /**\n   * <p>Filters the list of jobs based on job status. Returns only jobs with the specified\n   *       status.</p>\n   */\n  JobStatus?: JobStatus | string;\n\n  /**\n   * <p>Filters the list of jobs based on the time that the job was submitted for processing.\n   *       Returns only jobs submitted before the specified time. Jobs are returned in ascending order,\n   *       oldest to newest.</p>\n   */\n  SubmitTimeBefore?: Date;\n\n  /**\n   * <p>Filters the list of jobs based on the time that the job was submitted for processing.\n   *       Returns only jobs submitted after the specified time. Jobs are returned in descending order,\n   *       newest to oldest.</p>\n   */\n  SubmitTimeAfter?: Date;\n}\n\nexport namespace KeyPhrasesDetectionJobFilter {\n  export const filterSensitiveLog = (obj: KeyPhrasesDetectionJobFilter): any => ({\n    ...obj,\n  });\n}\n\nexport interface ListKeyPhrasesDetectionJobsRequest {\n  /**\n   * <p>Filters the jobs that are returned. You can filter jobs on their name, status, or the date\n   *       and time that they were submitted. You can only set one filter at a time.</p>\n   */\n  Filter?: KeyPhrasesDetectionJobFilter;\n\n  /**\n   * <p>Identifies the next page of results to return.</p>\n   */\n  NextToken?: string;\n\n  /**\n   * <p>The maximum number of results to return in each page. The default is 100.</p>\n   */\n  MaxResults?: number;\n}\n\nexport namespace ListKeyPhrasesDetectionJobsRequest {\n  export const filterSensitiveLog = (obj: ListKeyPhrasesDetectionJobsRequest): any => ({\n    ...obj,\n  });\n}\n\nexport interface ListKeyPhrasesDetectionJobsResponse {\n  /**\n   * <p>A list containing the properties of each job that is returned.</p>\n   */\n  KeyPhrasesDetectionJobPropertiesList?: KeyPhrasesDetectionJobProperties[];\n\n  /**\n   * <p>Identifies the next page of results to return.</p>\n   */\n  NextToken?: string;\n}\n\nexport namespace ListKeyPhrasesDetectionJobsResponse {\n  export const filterSensitiveLog = (obj: ListKeyPhrasesDetectionJobsResponse): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Provides information for filtering a list of PII entity detection jobs.</p>\n */\nexport interface PiiEntitiesDetectionJobFilter {\n  /**\n   * <p>Filters on the name of the job.</p>\n   */\n  JobName?: string;\n\n  /**\n   * <p>Filters the list of jobs based on job status. Returns only jobs with the specified\n   *       status.</p>\n   */\n  JobStatus?: JobStatus | string;\n\n  /**\n   * <p>Filters the list of jobs based on the time that the job was submitted for processing.\n   *       Returns only jobs submitted before the specified time. Jobs are returned in ascending order,\n   *       oldest to newest.</p>\n   */\n  SubmitTimeBefore?: Date;\n\n  /**\n   * <p>Filters the list of jobs based on the time that the job was submitted for processing.\n   *       Returns only jobs submitted after the specified time. Jobs are returned in descending order,\n   *       newest to oldest.</p>\n   */\n  SubmitTimeAfter?: Date;\n}\n\nexport namespace PiiEntitiesDetectionJobFilter {\n  export const filterSensitiveLog = (obj: PiiEntitiesDetectionJobFilter): any => ({\n    ...obj,\n  });\n}\n\nexport interface ListPiiEntitiesDetectionJobsRequest {\n  /**\n   * <p>Filters the jobs that are returned. You can filter jobs on their name, status, or the date\n   *       and time that they were submitted. You can only set one filter at a time.</p>\n   */\n  Filter?: PiiEntitiesDetectionJobFilter;\n\n  /**\n   * <p>Identifies the next page of results to return.</p>\n   */\n  NextToken?: string;\n\n  /**\n   * <p>The maximum number of results to return in each page.</p>\n   */\n  MaxResults?: number;\n}\n\nexport namespace ListPiiEntitiesDetectionJobsRequest {\n  export const filterSensitiveLog = (obj: ListPiiEntitiesDetectionJobsRequest): any => ({\n    ...obj,\n  });\n}\n\nexport interface ListPiiEntitiesDetectionJobsResponse {\n  /**\n   * <p>A list containing the properties of each job that is returned.</p>\n   */\n  PiiEntitiesDetectionJobPropertiesList?: PiiEntitiesDetectionJobProperties[];\n\n  /**\n   * <p>Identifies the next page of results to return.</p>\n   */\n  NextToken?: string;\n}\n\nexport namespace ListPiiEntitiesDetectionJobsResponse {\n  export const filterSensitiveLog = (obj: ListPiiEntitiesDetectionJobsResponse): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Provides information for filtering a list of dominant language detection jobs. For more\n *       information, see the  operation.</p>\n */\nexport interface SentimentDetectionJobFilter {\n  /**\n   * <p>Filters on the name of the job.</p>\n   */\n  JobName?: string;\n\n  /**\n   * <p>Filters the list of jobs based on job status. Returns only jobs with the specified\n   *       status.</p>\n   */\n  JobStatus?: JobStatus | string;\n\n  /**\n   * <p>Filters the list of jobs based on the time that the job was submitted for processing.\n   *       Returns only jobs submitted before the specified time. Jobs are returned in ascending order,\n   *       oldest to newest.</p>\n   */\n  SubmitTimeBefore?: Date;\n\n  /**\n   * <p>Filters the list of jobs based on the time that the job was submitted for processing.\n   *       Returns only jobs submitted after the specified time. Jobs are returned in descending order,\n   *       newest to oldest.</p>\n   */\n  SubmitTimeAfter?: Date;\n}\n\nexport namespace SentimentDetectionJobFilter {\n  export const filterSensitiveLog = (obj: SentimentDetectionJobFilter): any => ({\n    ...obj,\n  });\n}\n\nexport interface ListSentimentDetectionJobsRequest {\n  /**\n   * <p>Filters the jobs that are returned. You can filter jobs on their name, status, or the date\n   *       and time that they were submitted. You can only set one filter at a time.</p>\n   */\n  Filter?: SentimentDetectionJobFilter;\n\n  /**\n   * <p>Identifies the next page of results to return.</p>\n   */\n  NextToken?: string;\n\n  /**\n   * <p>The maximum number of results to return in each page. The default is 100.</p>\n   */\n  MaxResults?: number;\n}\n\nexport namespace ListSentimentDetectionJobsRequest {\n  export const filterSensitiveLog = (obj: ListSentimentDetectionJobsRequest): any => ({\n    ...obj,\n  });\n}\n\nexport interface ListSentimentDetectionJobsResponse {\n  /**\n   * <p>A list containing the properties of each job that is returned.</p>\n   */\n  SentimentDetectionJobPropertiesList?: SentimentDetectionJobProperties[];\n\n  /**\n   * <p>Identifies the next page of results to return.</p>\n   */\n  NextToken?: string;\n}\n\nexport namespace ListSentimentDetectionJobsResponse {\n  export const filterSensitiveLog = (obj: ListSentimentDetectionJobsResponse): any => ({\n    ...obj,\n  });\n}\n\nexport interface ListTagsForResourceRequest {\n  /**\n   * <p>The Amazon Resource Name (ARN) of the given Amazon Comprehend resource you are querying.\n   *     </p>\n   */\n  ResourceArn: string | undefined;\n}\n\nexport namespace ListTagsForResourceRequest {\n  export const filterSensitiveLog = (obj: ListTagsForResourceRequest): any => ({\n    ...obj,\n  });\n}\n\nexport interface ListTagsForResourceResponse {\n  /**\n   * <p>The Amazon Resource Name (ARN) of the given Amazon Comprehend resource you are\n   *       querying.</p>\n   */\n  ResourceArn?: string;\n\n  /**\n   * <p>Tags associated with the Amazon Comprehend resource being queried. A tag is a key-value\n   *       pair that adds as a metadata to a resource used by Amazon Comprehend. For example, a tag with\n   *       \"Sales\" as the key might be added to a resource to indicate its use by the sales department.\n   *     </p>\n   */\n  Tags?: Tag[];\n}\n\nexport namespace ListTagsForResourceResponse {\n  export const filterSensitiveLog = (obj: ListTagsForResourceResponse): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Provides information for filtering topic detection jobs. For more information, see\n *         .</p>\n */\nexport interface TopicsDetectionJobFilter {\n  /**\n   * <p></p>\n   */\n  JobName?: string;\n\n  /**\n   * <p>Filters the list of topic detection jobs based on job status. Returns only jobs with\n   *       the specified status.</p>\n   */\n  JobStatus?: JobStatus | string;\n\n  /**\n   * <p>Filters the list of jobs based on the time that the job was submitted for processing.\n   *       Only returns jobs submitted before the specified time. Jobs are returned in descending order,\n   *       newest to oldest.</p>\n   */\n  SubmitTimeBefore?: Date;\n\n  /**\n   * <p>Filters the list of jobs based on the time that the job was submitted for processing.\n   *       Only returns jobs submitted after the specified time. Jobs are returned in ascending order,\n   *       oldest to newest.</p>\n   */\n  SubmitTimeAfter?: Date;\n}\n\nexport namespace TopicsDetectionJobFilter {\n  export const filterSensitiveLog = (obj: TopicsDetectionJobFilter): any => ({\n    ...obj,\n  });\n}\n\nexport interface ListTopicsDetectionJobsRequest {\n  /**\n   * <p>Filters the jobs that are returned. Jobs can be filtered on their name, status, or the\n   *       date and time that they were submitted. You can set only one filter at a time.</p>\n   */\n  Filter?: TopicsDetectionJobFilter;\n\n  /**\n   * <p>Identifies the next page of results to return.</p>\n   */\n  NextToken?: string;\n\n  /**\n   * <p>The maximum number of results to return in each page. The default is 100.</p>\n   */\n  MaxResults?: number;\n}\n\nexport namespace ListTopicsDetectionJobsRequest {\n  export const filterSensitiveLog = (obj: ListTopicsDetectionJobsRequest): any => ({\n    ...obj,\n  });\n}\n\nexport interface ListTopicsDetectionJobsResponse {\n  /**\n   * <p>A list containing the properties of each job that is returned.</p>\n   */\n  TopicsDetectionJobPropertiesList?: TopicsDetectionJobProperties[];\n\n  /**\n   * <p>Identifies the next page of results to return.</p>\n   */\n  NextToken?: string;\n}\n\nexport namespace ListTopicsDetectionJobsResponse {\n  export const filterSensitiveLog = (obj: ListTopicsDetectionJobsResponse): any => ({\n    ...obj,\n  });\n}\n\nexport interface StartDocumentClassificationJobRequest {\n  /**\n   * <p>The identifier of the job.</p>\n   */\n  JobName?: string;\n\n  /**\n   * <p>The Amazon Resource Name (ARN) of the document classifier to use to process the\n   *       job.</p>\n   */\n  DocumentClassifierArn: string | undefined;\n\n  /**\n   * <p>Specifies the format and location of the input data for the job.</p>\n   */\n  InputDataConfig: InputDataConfig | undefined;\n\n  /**\n   * <p>Specifies where to send the output files.</p>\n   */\n  OutputDataConfig: OutputDataConfig | undefined;\n\n  /**\n   * <p>The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that\n   *       grants Amazon Comprehend read access to your input data.</p>\n   */\n  DataAccessRoleArn: string | undefined;\n\n  /**\n   * <p>A unique identifier for the request. If you do not set the client request token, Amazon\n   *       Comprehend generates one.</p>\n   */\n  ClientRequestToken?: string;\n\n  /**\n   * <p>ID for the AWS Key Management Service (KMS) key that Amazon Comprehend uses to encrypt\n   *       data on the storage volume attached to the ML compute instance(s) that process the analysis\n   *       job. The VolumeKmsKeyId can be either of the following formats:</p>\n   *          <ul>\n   *             <li>\n   *                <p>KMS Key ID: <code>\"1234abcd-12ab-34cd-56ef-1234567890ab\"</code>\n   *                </p>\n   *             </li>\n   *             <li>\n   *                <p>Amazon Resource Name (ARN) of a KMS Key:\n   *             <code>\"arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab\"</code>\n   *                </p>\n   *             </li>\n   *          </ul>\n   */\n  VolumeKmsKeyId?: string;\n\n  /**\n   * <p>Configuration parameters for an optional private Virtual Private Cloud (VPC) containing\n   *       the resources you are using for your document classification job. For more information, see\n   *         <a href=\"https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html\">Amazon\n   *         VPC</a>. </p>\n   */\n  VpcConfig?: VpcConfig;\n}\n\nexport namespace StartDocumentClassificationJobRequest {\n  export const filterSensitiveLog = (obj: StartDocumentClassificationJobRequest): any => ({\n    ...obj,\n  });\n}\n\nexport interface StartDocumentClassificationJobResponse {\n  /**\n   * <p>The identifier generated for the job. To get the status of the job, use this identifier\n   *       with the  operation.</p>\n   */\n  JobId?: string;\n\n  /**\n   * <p>The status of the job:</p>\n   *          <ul>\n   *             <li>\n   *                <p>SUBMITTED - The job has been received and queued for processing.</p>\n   *             </li>\n   *             <li>\n   *                <p>IN_PROGRESS - Amazon Comprehend is processing the job.</p>\n   *             </li>\n   *             <li>\n   *                <p>COMPLETED - The job was successfully completed and the output is available.</p>\n   *             </li>\n   *             <li>\n   *                <p>FAILED - The job did not complete. For details, use the  operation.</p>\n   *             </li>\n   *             <li>\n   *                <p>STOP_REQUESTED - Amazon Comprehend has received a stop request for the job and is\n   *           processing the request.</p>\n   *             </li>\n   *             <li>\n   *                <p>STOPPED - The job was successfully stopped without completing.</p>\n   *             </li>\n   *          </ul>\n   */\n  JobStatus?: JobStatus | string;\n}\n\nexport namespace StartDocumentClassificationJobResponse {\n  export const filterSensitiveLog = (obj: StartDocumentClassificationJobResponse): any => ({\n    ...obj,\n  });\n}\n\nexport interface StartDominantLanguageDetectionJobRequest {\n  /**\n   * <p>Specifies the format and location of the input data for the job.</p>\n   */\n  InputDataConfig: InputDataConfig | undefined;\n\n  /**\n   * <p>Specifies where to send the output files.</p>\n   */\n  OutputDataConfig: OutputDataConfig | undefined;\n\n  /**\n   * <p>The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that\n   *       grants Amazon Comprehend read access to your input data. For more information, see <a href=\"https://docs.aws.amazon.com/comprehend/latest/dg/access-control-managing-permissions.html#auth-role-permissions\">https://docs.aws.amazon.com/comprehend/latest/dg/access-control-managing-permissions.html#auth-role-permissions</a>.</p>\n   */\n  DataAccessRoleArn: string | undefined;\n\n  /**\n   * <p>An identifier for the job.</p>\n   */\n  JobName?: string;\n\n  /**\n   * <p>A unique identifier for the request. If you do not set the client request token, Amazon\n   *       Comprehend generates one.</p>\n   */\n  ClientRequestToken?: string;\n\n  /**\n   * <p>ID for the AWS Key Management Service (KMS) key that Amazon Comprehend uses to encrypt\n   *       data on the storage volume attached to the ML compute instance(s) that process the analysis\n   *       job. The VolumeKmsKeyId can be either of the following formats:</p>\n   *          <ul>\n   *             <li>\n   *                <p>KMS Key ID: <code>\"1234abcd-12ab-34cd-56ef-1234567890ab\"</code>\n   *                </p>\n   *             </li>\n   *             <li>\n   *                <p>Amazon Resource Name (ARN) of a KMS Key:\n   *             <code>\"arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab\"</code>\n   *                </p>\n   *             </li>\n   *          </ul>\n   */\n  VolumeKmsKeyId?: string;\n\n  /**\n   * <p>Configuration parameters for an optional private Virtual Private Cloud (VPC) containing\n   *       the resources you are using for your dominant language detection job. For more information,\n   *       see <a href=\"https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html\">Amazon VPC</a>. </p>\n   */\n  VpcConfig?: VpcConfig;\n}\n\nexport namespace StartDominantLanguageDetectionJobRequest {\n  export const filterSensitiveLog = (obj: StartDominantLanguageDetectionJobRequest): any => ({\n    ...obj,\n  });\n}\n\nexport interface StartDominantLanguageDetectionJobResponse {\n  /**\n   * <p>The identifier generated for the job. To get the status of a job, use this identifier with\n   *       the  operation.</p>\n   */\n  JobId?: string;\n\n  /**\n   * <p>The status of the job. </p>\n   *          <ul>\n   *             <li>\n   *                <p>SUBMITTED - The job has been received and is queued for processing.</p>\n   *             </li>\n   *             <li>\n   *                <p>IN_PROGRESS - Amazon Comprehend is processing the job.</p>\n   *             </li>\n   *             <li>\n   *                <p>COMPLETED - The job was successfully completed and the output is available.</p>\n   *             </li>\n   *             <li>\n   *                <p>FAILED - The job did not complete. To get details, use the  operation.</p>\n   *             </li>\n   *          </ul>\n   */\n  JobStatus?: JobStatus | string;\n}\n\nexport namespace StartDominantLanguageDetectionJobResponse {\n  export const filterSensitiveLog = (obj: StartDominantLanguageDetectionJobResponse): any => ({\n    ...obj,\n  });\n}\n\nexport interface StartEntitiesDetectionJobRequest {\n  /**\n   * <p>Specifies the format and location of the input data for the job.</p>\n   */\n  InputDataConfig: InputDataConfig | undefined;\n\n  /**\n   * <p>Specifies where to send the output files.</p>\n   */\n  OutputDataConfig: OutputDataConfig | undefined;\n\n  /**\n   * <p>The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that\n   *       grants Amazon Comprehend read access to your input data. For more information, see <a href=\"https://docs.aws.amazon.com/comprehend/latest/dg/access-control-managing-permissions.html#auth-role-permissions\">https://docs.aws.amazon.com/comprehend/latest/dg/access-control-managing-permissions.html#auth-role-permissions</a>.</p>\n   */\n  DataAccessRoleArn: string | undefined;\n\n  /**\n   * <p>The identifier of the job.</p>\n   */\n  JobName?: string;\n\n  /**\n   * <p>The Amazon Resource Name (ARN) that identifies the specific entity recognizer to be used\n   *       by the <code>StartEntitiesDetectionJob</code>. This ARN is optional and is only used for a\n   *       custom entity recognition job.</p>\n   */\n  EntityRecognizerArn?: string;\n\n  /**\n   * <p>The language of the input documents. All documents must be in the same language. You can\n   *       specify any of the languages supported by Amazon Comprehend. If custom entities recognition is\n   *       used, this parameter is ignored and the language used for training the model is used\n   *       instead.</p>\n   */\n  LanguageCode: LanguageCode | string | undefined;\n\n  /**\n   * <p>A unique identifier for the request. If you don't set the client request token, Amazon\n   *       Comprehend generates one.</p>\n   */\n  ClientRequestToken?: string;\n\n  /**\n   * <p>ID for the AWS Key Management Service (KMS) key that Amazon Comprehend uses to encrypt\n   *       data on the storage volume attached to the ML compute instance(s) that process the analysis\n   *       job. The VolumeKmsKeyId can be either of the following formats:</p>\n   *          <ul>\n   *             <li>\n   *                <p>KMS Key ID: <code>\"1234abcd-12ab-34cd-56ef-1234567890ab\"</code>\n   *                </p>\n   *             </li>\n   *             <li>\n   *                <p>Amazon Resource Name (ARN) of a KMS Key:\n   *             <code>\"arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab\"</code>\n   *                </p>\n   *             </li>\n   *          </ul>\n   */\n  VolumeKmsKeyId?: string;\n\n  /**\n   * <p>Configuration parameters for an optional private Virtual Private Cloud (VPC) containing\n   *       the resources you are using for your entity detection job. For more information, see <a href=\"https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html\">Amazon\n   *         VPC</a>. </p>\n   */\n  VpcConfig?: VpcConfig;\n}\n\nexport namespace StartEntitiesDetectionJobRequest {\n  export const filterSensitiveLog = (obj: StartEntitiesDetectionJobRequest): any => ({\n    ...obj,\n  });\n}\n\nexport interface StartEntitiesDetectionJobResponse {\n  /**\n   * <p>The identifier generated for the job. To get the status of job, use this identifier with\n   *       the  operation.</p>\n   */\n  JobId?: string;\n\n  /**\n   * <p>The status of the job. </p>\n   *          <ul>\n   *             <li>\n   *                <p>SUBMITTED - The job has been received and is queued for processing.</p>\n   *             </li>\n   *             <li>\n   *                <p>IN_PROGRESS - Amazon Comprehend is processing the job.</p>\n   *             </li>\n   *             <li>\n   *                <p>COMPLETED - The job was successfully completed and the output is available.</p>\n   *             </li>\n   *             <li>\n   *                <p>FAILED - The job did not complete. To get details, use the  operation.</p>\n   *             </li>\n   *             <li>\n   *                <p>STOP_REQUESTED - Amazon Comprehend has received a stop request for the job and is\n   *           processing the request.</p>\n   *             </li>\n   *             <li>\n   *                <p>STOPPED - The job was successfully stopped without completing.</p>\n   *             </li>\n   *          </ul>\n   */\n  JobStatus?: JobStatus | string;\n}\n\nexport namespace StartEntitiesDetectionJobResponse {\n  export const filterSensitiveLog = (obj: StartEntitiesDetectionJobResponse): any => ({\n    ...obj,\n  });\n}\n\nexport interface StartEventsDetectionJobRequest {\n  /**\n   * <p>Specifies the format and location of the input data for the job.</p>\n   */\n  InputDataConfig: InputDataConfig | undefined;\n\n  /**\n   * <p>Specifies where to send the output files.</p>\n   */\n  OutputDataConfig: OutputDataConfig | undefined;\n\n  /**\n   * <p>The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that\n   *       grants Amazon Comprehend read access to your input data.</p>\n   */\n  DataAccessRoleArn: string | undefined;\n\n  /**\n   * <p>The identifier of the events detection job.</p>\n   */\n  JobName?: string;\n\n  /**\n   * <p>The language code of the input documents.</p>\n   */\n  LanguageCode: LanguageCode | string | undefined;\n\n  /**\n   * <p>An unique identifier for the request. If you don't set the client request token, Amazon Comprehend generates one.</p>\n   */\n  ClientRequestToken?: string;\n\n  /**\n   * <p>The types of events to detect in the input documents.</p>\n   */\n  TargetEventTypes: string[] | undefined;\n}\n\nexport namespace StartEventsDetectionJobRequest {\n  export const filterSensitiveLog = (obj: StartEventsDetectionJobRequest): any => ({\n    ...obj,\n  });\n}\n\nexport interface StartEventsDetectionJobResponse {\n  /**\n   * <p>An unique identifier for the request. If you don't set the client request token, Amazon\n   *       Comprehend generates one.</p>\n   */\n  JobId?: string;\n\n  /**\n   * <p>The status of the events detection job.</p>\n   */\n  JobStatus?: JobStatus | string;\n}\n\nexport namespace StartEventsDetectionJobResponse {\n  export const filterSensitiveLog = (obj: StartEventsDetectionJobResponse): any => ({\n    ...obj,\n  });\n}\n\nexport interface StartKeyPhrasesDetectionJobRequest {\n  /**\n   * <p>Specifies the format and location of the input data for the job.</p>\n   */\n  InputDataConfig: InputDataConfig | undefined;\n\n  /**\n   * <p>Specifies where to send the output files.</p>\n   */\n  OutputDataConfig: OutputDataConfig | undefined;\n\n  /**\n   * <p>The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that\n   *       grants Amazon Comprehend read access to your input data. For more information, see <a href=\"https://docs.aws.amazon.com/comprehend/latest/dg/access-control-managing-permissions.html#auth-role-permissions\">https://docs.aws.amazon.com/comprehend/latest/dg/access-control-managing-permissions.html#auth-role-permissions</a>.</p>\n   */\n  DataAccessRoleArn: string | undefined;\n\n  /**\n   * <p>The identifier of the job.</p>\n   */\n  JobName?: string;\n\n  /**\n   * <p>The language of the input documents. You can specify any of the primary languages\n   *       supported by Amazon Comprehend. All documents must be in the same language.</p>\n   */\n  LanguageCode: LanguageCode | string | undefined;\n\n  /**\n   * <p>A unique identifier for the request. If you don't set the client request token, Amazon\n   *       Comprehend generates one.</p>\n   */\n  ClientRequestToken?: string;\n\n  /**\n   * <p>ID for the AWS Key Management Service (KMS) key that Amazon Comprehend uses to encrypt\n   *       data on the storage volume attached to the ML compute instance(s) that process the analysis\n   *       job. The VolumeKmsKeyId can be either of the following formats:</p>\n   *          <ul>\n   *             <li>\n   *                <p>KMS Key ID: <code>\"1234abcd-12ab-34cd-56ef-1234567890ab\"</code>\n   *                </p>\n   *             </li>\n   *             <li>\n   *                <p>Amazon Resource Name (ARN) of a KMS Key:\n   *             <code>\"arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab\"</code>\n   *                </p>\n   *             </li>\n   *          </ul>\n   */\n  VolumeKmsKeyId?: string;\n\n  /**\n   * <p> Configuration parameters for an optional private Virtual Private Cloud (VPC) containing\n   *       the resources you are using for your key phrases detection job. For more information, see\n   *         <a href=\"https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html\">Amazon\n   *         VPC</a>. </p>\n   */\n  VpcConfig?: VpcConfig;\n}\n\nexport namespace StartKeyPhrasesDetectionJobRequest {\n  export const filterSensitiveLog = (obj: StartKeyPhrasesDetectionJobRequest): any => ({\n    ...obj,\n  });\n}\n\nexport interface StartKeyPhrasesDetectionJobResponse {\n  /**\n   * <p>The identifier generated for the job. To get the status of a job, use this identifier with\n   *       the  operation.</p>\n   */\n  JobId?: string;\n\n  /**\n   * <p>The status of the job. </p>\n   *          <ul>\n   *             <li>\n   *                <p>SUBMITTED - The job has been received and is queued for processing.</p>\n   *             </li>\n   *             <li>\n   *                <p>IN_PROGRESS - Amazon Comprehend is processing the job.</p>\n   *             </li>\n   *             <li>\n   *                <p>COMPLETED - The job was successfully completed and the output is available.</p>\n   *             </li>\n   *             <li>\n   *                <p>FAILED - The job did not complete. To get details, use the  operation.</p>\n   *             </li>\n   *          </ul>\n   */\n  JobStatus?: JobStatus | string;\n}\n\nexport namespace StartKeyPhrasesDetectionJobResponse {\n  export const filterSensitiveLog = (obj: StartKeyPhrasesDetectionJobResponse): any => ({\n    ...obj,\n  });\n}\n\nexport interface StartPiiEntitiesDetectionJobRequest {\n  /**\n   * <p>The input properties for a PII entities detection job.</p>\n   */\n  InputDataConfig: InputDataConfig | undefined;\n\n  /**\n   * <p>Provides conﬁguration parameters for the output of PII entity detection jobs.</p>\n   */\n  OutputDataConfig: OutputDataConfig | undefined;\n\n  /**\n   * <p>Specifies whether the output provides the locations (offsets) of PII entities or a file in\n   *       which PII entities are redacted.</p>\n   */\n  Mode: PiiEntitiesDetectionMode | string | undefined;\n\n  /**\n   * <p>Provides configuration parameters for PII entity redaction.</p>\n   *          <p>This parameter is required if you set the <code>Mode</code> parameter to\n   *         <code>ONLY_REDACTION</code>. In that case, you must provide a <code>RedactionConfig</code>\n   *       definition that includes the <code>PiiEntityTypes</code> parameter.</p>\n   */\n  RedactionConfig?: RedactionConfig;\n\n  /**\n   * <p>The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that\n   *       grants Amazon Comprehend read access to your input data.</p>\n   */\n  DataAccessRoleArn: string | undefined;\n\n  /**\n   * <p>The identifier of the job.</p>\n   */\n  JobName?: string;\n\n  /**\n   * <p>The language of the input documents.</p>\n   */\n  LanguageCode: LanguageCode | string | undefined;\n\n  /**\n   * <p>A unique identifier for the request. If you don't set the client request token, Amazon\n   *       Comprehend generates one.</p>\n   */\n  ClientRequestToken?: string;\n}\n\nexport namespace StartPiiEntitiesDetectionJobRequest {\n  export const filterSensitiveLog = (obj: StartPiiEntitiesDetectionJobRequest): any => ({\n    ...obj,\n  });\n}\n\nexport interface StartPiiEntitiesDetectionJobResponse {\n  /**\n   * <p>The identifier generated for the job.</p>\n   */\n  JobId?: string;\n\n  /**\n   * <p>The status of the job.</p>\n   */\n  JobStatus?: JobStatus | string;\n}\n\nexport namespace StartPiiEntitiesDetectionJobResponse {\n  export const filterSensitiveLog = (obj: StartPiiEntitiesDetectionJobResponse): any => ({\n    ...obj,\n  });\n}\n\nexport interface StartSentimentDetectionJobRequest {\n  /**\n   * <p>Specifies the format and location of the input data for the job.</p>\n   */\n  InputDataConfig: InputDataConfig | undefined;\n\n  /**\n   * <p>Specifies where to send the output files. </p>\n   */\n  OutputDataConfig: OutputDataConfig | undefined;\n\n  /**\n   * <p>The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that\n   *       grants Amazon Comprehend read access to your input data. For more information, see <a href=\"https://docs.aws.amazon.com/comprehend/latest/dg/access-control-managing-permissions.html#auth-role-permissions\">https://docs.aws.amazon.com/comprehend/latest/dg/access-control-managing-permissions.html#auth-role-permissions</a>.</p>\n   */\n  DataAccessRoleArn: string | undefined;\n\n  /**\n   * <p>The identifier of the job.</p>\n   */\n  JobName?: string;\n\n  /**\n   * <p>The language of the input documents. You can specify any of the primary languages\n   *       supported by Amazon Comprehend. All documents must be in the same language.</p>\n   */\n  LanguageCode: LanguageCode | string | undefined;\n\n  /**\n   * <p>A unique identifier for the request. If you don't set the client request token, Amazon\n   *       Comprehend generates one.</p>\n   */\n  ClientRequestToken?: string;\n\n  /**\n   * <p>ID for the AWS Key Management Service (KMS) key that Amazon Comprehend uses to encrypt\n   *       data on the storage volume attached to the ML compute instance(s) that process the analysis\n   *       job. The VolumeKmsKeyId can be either of the following formats:</p>\n   *          <ul>\n   *             <li>\n   *                <p>KMS Key ID: <code>\"1234abcd-12ab-34cd-56ef-1234567890ab\"</code>\n   *                </p>\n   *             </li>\n   *             <li>\n   *                <p>Amazon Resource Name (ARN) of a KMS Key:\n   *             <code>\"arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab\"</code>\n   *                </p>\n   *             </li>\n   *          </ul>\n   */\n  VolumeKmsKeyId?: string;\n\n  /**\n   * <p>Configuration parameters for an optional private Virtual Private Cloud (VPC) containing\n   *       the resources you are using for your sentiment detection job. For more information, see <a href=\"https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html\">Amazon\n   *         VPC</a>. </p>\n   */\n  VpcConfig?: VpcConfig;\n}\n\nexport namespace StartSentimentDetectionJobRequest {\n  export const filterSensitiveLog = (obj: StartSentimentDetectionJobRequest): any => ({\n    ...obj,\n  });\n}\n\nexport interface StartSentimentDetectionJobResponse {\n  /**\n   * <p>The identifier generated for the job. To get the status of a job, use this identifier with\n   *       the  operation.</p>\n   */\n  JobId?: string;\n\n  /**\n   * <p>The status of the job. </p>\n   *          <ul>\n   *             <li>\n   *                <p>SUBMITTED - The job has been received and is queued for processing.</p>\n   *             </li>\n   *             <li>\n   *                <p>IN_PROGRESS - Amazon Comprehend is processing the job.</p>\n   *             </li>\n   *             <li>\n   *                <p>COMPLETED - The job was successfully completed and the output is available.</p>\n   *             </li>\n   *             <li>\n   *                <p>FAILED - The job did not complete. To get details, use the  operation.</p>\n   *             </li>\n   *          </ul>\n   */\n  JobStatus?: JobStatus | string;\n}\n\nexport namespace StartSentimentDetectionJobResponse {\n  export const filterSensitiveLog = (obj: StartSentimentDetectionJobResponse): any => ({\n    ...obj,\n  });\n}\n\nexport interface StartTopicsDetectionJobRequest {\n  /**\n   * <p>Specifies the format and location of the input data for the job.</p>\n   */\n  InputDataConfig: InputDataConfig | undefined;\n\n  /**\n   * <p>Specifies where to send the output files. The output is a compressed archive with two\n   *       files, <code>topic-terms.csv</code> that lists the terms associated with each topic, and\n   *         <code>doc-topics.csv</code> that lists the documents associated with each topic</p>\n   */\n  OutputDataConfig: OutputDataConfig | undefined;\n\n  /**\n   * <p>The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role\n   *       that grants Amazon Comprehend read access to your input data. For more information, see <a href=\"https://docs.aws.amazon.com/comprehend/latest/dg/access-control-managing-permissions.html#auth-role-permissions\">https://docs.aws.amazon.com/comprehend/latest/dg/access-control-managing-permissions.html#auth-role-permissions</a>.</p>\n   */\n  DataAccessRoleArn: string | undefined;\n\n  /**\n   * <p>The identifier of the job.</p>\n   */\n  JobName?: string;\n\n  /**\n   * <p>The number of topics to detect.</p>\n   */\n  NumberOfTopics?: number;\n\n  /**\n   * <p>A unique identifier for the request. If you do not set the client request token, Amazon\n   *       Comprehend generates one.</p>\n   */\n  ClientRequestToken?: string;\n\n  /**\n   * <p>ID for the AWS Key Management Service (KMS) key that Amazon Comprehend uses to encrypt\n   *       data on the storage volume attached to the ML compute instance(s) that process the analysis\n   *       job. The VolumeKmsKeyId can be either of the following formats:</p>\n   *          <ul>\n   *             <li>\n   *                <p>KMS Key ID: <code>\"1234abcd-12ab-34cd-56ef-1234567890ab\"</code>\n   *                </p>\n   *             </li>\n   *             <li>\n   *                <p>Amazon Resource Name (ARN) of a KMS Key:\n   *             <code>\"arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab\"</code>\n   *                </p>\n   *             </li>\n   *          </ul>\n   */\n  VolumeKmsKeyId?: string;\n\n  /**\n   * <p>Configuration parameters for an optional private Virtual Private Cloud (VPC) containing\n   *       the resources you are using for your topic detection job. For more information, see <a href=\"https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html\">Amazon\n   *         VPC</a>. </p>\n   */\n  VpcConfig?: VpcConfig;\n}\n\nexport namespace StartTopicsDetectionJobRequest {\n  export const filterSensitiveLog = (obj: StartTopicsDetectionJobRequest): any => ({\n    ...obj,\n  });\n}\n\nexport interface StartTopicsDetectionJobResponse {\n  /**\n   * <p>The identifier generated for the job. To get the status of the job, use this identifier\n   *       with the <code>DescribeTopicDetectionJob</code> operation.</p>\n   */\n  JobId?: string;\n\n  /**\n   * <p>The status of the job: </p>\n   *          <ul>\n   *             <li>\n   *                <p>SUBMITTED - The job has been received and is queued for processing.</p>\n   *             </li>\n   *             <li>\n   *                <p>IN_PROGRESS - Amazon Comprehend is processing the job.</p>\n   *             </li>\n   *             <li>\n   *                <p>COMPLETED - The job was successfully completed and the output is\n   *           available.</p>\n   *             </li>\n   *             <li>\n   *                <p>FAILED - The job did not complete. To get details, use the\n   *             <code>DescribeTopicDetectionJob</code> operation.</p>\n   *             </li>\n   *          </ul>\n   */\n  JobStatus?: JobStatus | string;\n}\n\nexport namespace StartTopicsDetectionJobResponse {\n  export const filterSensitiveLog = (obj: StartTopicsDetectionJobResponse): any => ({\n    ...obj,\n  });\n}\n\nexport interface StopDominantLanguageDetectionJobRequest {\n  /**\n   * <p>The identifier of the dominant language detection job to stop.</p>\n   */\n  JobId: string | undefined;\n}\n\nexport namespace StopDominantLanguageDetectionJobRequest {\n  export const filterSensitiveLog = (obj: StopDominantLanguageDetectionJobRequest): any => ({\n    ...obj,\n  });\n}\n\nexport interface StopDominantLanguageDetectionJobResponse {\n  /**\n   * <p>The identifier of the dominant language detection job to stop.</p>\n   */\n  JobId?: string;\n\n  /**\n   * <p>Either <code>STOP_REQUESTED</code> if the job is currently running, or\n   *         <code>STOPPED</code> if the job was previously stopped with the\n   *         <code>StopDominantLanguageDetectionJob</code> operation.</p>\n   */\n  JobStatus?: JobStatus | string;\n}\n\nexport namespace StopDominantLanguageDetectionJobResponse {\n  export const filterSensitiveLog = (obj: StopDominantLanguageDetectionJobResponse): any => ({\n    ...obj,\n  });\n}\n\nexport interface StopEntitiesDetectionJobRequest {\n  /**\n   * <p>The identifier of the entities detection job to stop.</p>\n   */\n  JobId: string | undefined;\n}\n\nexport namespace StopEntitiesDetectionJobRequest {\n  export const filterSensitiveLog = (obj: StopEntitiesDetectionJobRequest): any => ({\n    ...obj,\n  });\n}\n\nexport interface StopEntitiesDetectionJobResponse {\n  /**\n   * <p>The identifier of the entities detection job to stop.</p>\n   */\n  JobId?: string;\n\n  /**\n   * <p>Either <code>STOP_REQUESTED</code> if the job is currently running, or\n   *         <code>STOPPED</code> if the job was previously stopped with the\n   *         <code>StopEntitiesDetectionJob</code> operation.</p>\n   */\n  JobStatus?: JobStatus | string;\n}\n\nexport namespace StopEntitiesDetectionJobResponse {\n  export const filterSensitiveLog = (obj: StopEntitiesDetectionJobResponse): any => ({\n    ...obj,\n  });\n}\n\nexport interface StopEventsDetectionJobRequest {\n  /**\n   * <p>The identifier of the events detection job to stop.</p>\n   */\n  JobId: string | undefined;\n}\n\nexport namespace StopEventsDetectionJobRequest {\n  export const filterSensitiveLog = (obj: StopEventsDetectionJobRequest): any => ({\n    ...obj,\n  });\n}\n\nexport interface StopEventsDetectionJobResponse {\n  /**\n   * <p>The identifier of the events detection job to stop.</p>\n   */\n  JobId?: string;\n\n  /**\n   * <p>The status of the events detection job.</p>\n   */\n  JobStatus?: JobStatus | string;\n}\n\nexport namespace StopEventsDetectionJobResponse {\n  export const filterSensitiveLog = (obj: StopEventsDetectionJobResponse): any => ({\n    ...obj,\n  });\n}\n\nexport interface StopKeyPhrasesDetectionJobRequest {\n  /**\n   * <p>The identifier of the key phrases detection job to stop.</p>\n   */\n  JobId: string | undefined;\n}\n\nexport namespace StopKeyPhrasesDetectionJobRequest {\n  export const filterSensitiveLog = (obj: StopKeyPhrasesDetectionJobRequest): any => ({\n    ...obj,\n  });\n}\n\nexport interface StopKeyPhrasesDetectionJobResponse {\n  /**\n   * <p>The identifier of the key phrases detection job to stop.</p>\n   */\n  JobId?: string;\n\n  /**\n   * <p>Either <code>STOP_REQUESTED</code> if the job is currently running, or\n   *         <code>STOPPED</code> if the job was previously stopped with the\n   *         <code>StopKeyPhrasesDetectionJob</code> operation.</p>\n   */\n  JobStatus?: JobStatus | string;\n}\n\nexport namespace StopKeyPhrasesDetectionJobResponse {\n  export const filterSensitiveLog = (obj: StopKeyPhrasesDetectionJobResponse): any => ({\n    ...obj,\n  });\n}\n\nexport interface StopPiiEntitiesDetectionJobRequest {\n  /**\n   * <p>The identifier of the PII entities detection job to stop.</p>\n   */\n  JobId: string | undefined;\n}\n\nexport namespace StopPiiEntitiesDetectionJobRequest {\n  export const filterSensitiveLog = (obj: StopPiiEntitiesDetectionJobRequest): any => ({\n    ...obj,\n  });\n}\n\nexport interface StopPiiEntitiesDetectionJobResponse {\n  /**\n   * <p>The identifier of the PII entities detection job to stop.</p>\n   */\n  JobId?: string;\n\n  /**\n   * <p>The status of the PII entities detection job.</p>\n   */\n  JobStatus?: JobStatus | string;\n}\n\nexport namespace StopPiiEntitiesDetectionJobResponse {\n  export const filterSensitiveLog = (obj: StopPiiEntitiesDetectionJobResponse): any => ({\n    ...obj,\n  });\n}\n\nexport interface StopSentimentDetectionJobRequest {\n  /**\n   * <p>The identifier of the sentiment detection job to stop.</p>\n   */\n  JobId: string | undefined;\n}\n\nexport namespace StopSentimentDetectionJobRequest {\n  export const filterSensitiveLog = (obj: StopSentimentDetectionJobRequest): any => ({\n    ...obj,\n  });\n}\n\nexport interface StopSentimentDetectionJobResponse {\n  /**\n   * <p>The identifier of the sentiment detection job to stop.</p>\n   */\n  JobId?: string;\n\n  /**\n   * <p>Either <code>STOP_REQUESTED</code> if the job is currently running, or\n   *         <code>STOPPED</code> if the job was previously stopped with the\n   *         <code>StopSentimentDetectionJob</code> operation.</p>\n   */\n  JobStatus?: JobStatus | string;\n}\n\nexport namespace StopSentimentDetectionJobResponse {\n  export const filterSensitiveLog = (obj: StopSentimentDetectionJobResponse): any => ({\n    ...obj,\n  });\n}\n\nexport interface StopTrainingDocumentClassifierRequest {\n  /**\n   * <p>The Amazon Resource Name (ARN) that identifies the document classifier currently being\n   *       trained.</p>\n   */\n  DocumentClassifierArn: string | undefined;\n}\n\nexport namespace StopTrainingDocumentClassifierRequest {\n  export const filterSensitiveLog = (obj: StopTrainingDocumentClassifierRequest): any => ({\n    ...obj,\n  });\n}\n\nexport interface StopTrainingDocumentClassifierResponse {}\n\nexport namespace StopTrainingDocumentClassifierResponse {\n  export const filterSensitiveLog = (obj: StopTrainingDocumentClassifierResponse): any => ({\n    ...obj,\n  });\n}\n\nexport interface StopTrainingEntityRecognizerRequest {\n  /**\n   * <p>The Amazon Resource Name (ARN) that identifies the entity recognizer currently being\n   *       trained.</p>\n   */\n  EntityRecognizerArn: string | undefined;\n}\n\nexport namespace StopTrainingEntityRecognizerRequest {\n  export const filterSensitiveLog = (obj: StopTrainingEntityRecognizerRequest): any => ({\n    ...obj,\n  });\n}\n\nexport interface StopTrainingEntityRecognizerResponse {}\n\nexport namespace StopTrainingEntityRecognizerResponse {\n  export const filterSensitiveLog = (obj: StopTrainingEntityRecognizerResponse): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Concurrent modification of the tags associated with an Amazon Comprehend resource is not\n *       supported. </p>\n */\nexport interface ConcurrentModificationException extends __SmithyException, $MetadataBearer {\n  name: \"ConcurrentModificationException\";\n  $fault: \"client\";\n  Message?: string;\n}\n\nexport namespace ConcurrentModificationException {\n  export const filterSensitiveLog = (obj: ConcurrentModificationException): any => ({\n    ...obj,\n  });\n}\n\nexport interface TagResourceRequest {\n  /**\n   * <p>The Amazon Resource Name (ARN) of the given Amazon Comprehend resource to which you want\n   *       to associate the tags. </p>\n   */\n  ResourceArn: string | undefined;\n\n  /**\n   * <p>Tags being associated with a specific Amazon Comprehend resource. There can be a maximum\n   *       of 50 tags (both existing and pending) associated with a specific resource. </p>\n   */\n  Tags: Tag[] | undefined;\n}\n\nexport namespace TagResourceRequest {\n  export const filterSensitiveLog = (obj: TagResourceRequest): any => ({\n    ...obj,\n  });\n}\n\nexport interface TagResourceResponse {}\n\nexport namespace TagResourceResponse {\n  export const filterSensitiveLog = (obj: TagResourceResponse): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The request contains more tag keys than can be associated with a resource (50 tag keys per\n *       resource).</p>\n */\nexport interface TooManyTagKeysException extends __SmithyException, $MetadataBearer {\n  name: \"TooManyTagKeysException\";\n  $fault: \"client\";\n  Message?: string;\n}\n\nexport namespace TooManyTagKeysException {\n  export const filterSensitiveLog = (obj: TooManyTagKeysException): any => ({\n    ...obj,\n  });\n}\n\nexport interface UntagResourceRequest {\n  /**\n   * <p> The Amazon Resource Name (ARN) of the given Amazon Comprehend resource from which you\n   *       want to remove the tags. </p>\n   */\n  ResourceArn: string | undefined;\n\n  /**\n   * <p>The initial part of a key-value pair that forms a tag being removed from a given resource.\n   *       For example, a tag with \"Sales\" as the key might be added to a resource to indicate its use by\n   *       the sales department. Keys must be unique and cannot be duplicated for a particular resource.\n   *     </p>\n   */\n  TagKeys: string[] | undefined;\n}\n\nexport namespace UntagResourceRequest {\n  export const filterSensitiveLog = (obj: UntagResourceRequest): any => ({\n    ...obj,\n  });\n}\n\nexport interface UntagResourceResponse {}\n\nexport namespace UntagResourceResponse {\n  export const filterSensitiveLog = (obj: UntagResourceResponse): any => ({\n    ...obj,\n  });\n}\n\nexport interface UpdateEndpointRequest {\n  /**\n   * <p>The Amazon Resource Number (ARN) of the endpoint being updated.</p>\n   */\n  EndpointArn: string | undefined;\n\n  /**\n   * <p> The desired number of inference units to be used by the model using this endpoint.\n   *\n   *       Each inference unit represents of a throughput of 100 characters per second.</p>\n   */\n  DesiredInferenceUnits: number | undefined;\n}\n\nexport namespace UpdateEndpointRequest {\n  export const filterSensitiveLog = (obj: UpdateEndpointRequest): any => ({\n    ...obj,\n  });\n}\n\nexport interface UpdateEndpointResponse {}\n\nexport namespace UpdateEndpointResponse {\n  export const filterSensitiveLog = (obj: UpdateEndpointResponse): any => ({\n    ...obj,\n  });\n}\n"]},"metadata":{},"sourceType":"module"}