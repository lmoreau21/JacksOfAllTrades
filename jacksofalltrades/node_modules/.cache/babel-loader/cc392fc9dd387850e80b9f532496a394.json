{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { ConsoleLogger as Logger } from './Logger';\nvar logger = new Logger('Parser');\nexport var parseMobileHubConfig = function parseMobileHubConfig(config) {\n  var amplifyConfig = {}; // Analytics\n\n  if (config['aws_mobile_analytics_app_id']) {\n    var Analytics = {\n      AWSPinpoint: {\n        appId: config['aws_mobile_analytics_app_id'],\n        region: config['aws_mobile_analytics_app_region']\n      }\n    };\n    amplifyConfig.Analytics = Analytics;\n  } // Auth\n\n\n  if (config['aws_cognito_identity_pool_id'] || config['aws_user_pools_id']) {\n    amplifyConfig.Auth = {\n      userPoolId: config['aws_user_pools_id'],\n      userPoolWebClientId: config['aws_user_pools_web_client_id'],\n      region: config['aws_cognito_region'],\n      identityPoolId: config['aws_cognito_identity_pool_id'],\n      identityPoolRegion: config['aws_cognito_region'],\n      mandatorySignIn: config['aws_mandatory_sign_in'] === 'enable',\n      signUpVerificationMethod: config['aws_cognito_sign_up_verification_method'] || 'code'\n    };\n  } // Storage\n\n\n  var storageConfig;\n\n  if (config['aws_user_files_s3_bucket']) {\n    storageConfig = {\n      AWSS3: {\n        bucket: config['aws_user_files_s3_bucket'],\n        region: config['aws_user_files_s3_bucket_region'],\n        dangerouslyConnectToHttpEndpointForTesting: config['aws_user_files_s3_dangerously_connect_to_http_endpoint_for_testing']\n      }\n    };\n  } else {\n    storageConfig = config ? config.Storage || config : {};\n  } // Logging\n\n\n  if (config['Logging']) {\n    amplifyConfig.Logging = __assign(__assign({}, config['Logging']), {\n      region: config['aws_project_region']\n    });\n  } // Geo\n\n\n  if (config['geo']) {\n    amplifyConfig.Geo = Object.assign({}, config.geo);\n\n    if (config.geo['amazon_location_service']) {\n      amplifyConfig.Geo = {\n        AmazonLocationService: config.geo['amazon_location_service']\n      };\n    }\n  }\n\n  amplifyConfig.Analytics = Object.assign({}, amplifyConfig.Analytics, config.Analytics);\n  amplifyConfig.Auth = Object.assign({}, amplifyConfig.Auth, config.Auth);\n  amplifyConfig.Storage = Object.assign({}, storageConfig);\n  amplifyConfig.Logging = Object.assign({}, amplifyConfig.Logging, config.Logging);\n  logger.debug('parse config', config, 'to amplifyconfig', amplifyConfig);\n  return amplifyConfig;\n};\n/**\n * @deprecated use per-function export\n */\n\nvar Parser =\n/** @class */\nfunction () {\n  function Parser() {}\n\n  Parser.parseMobilehubConfig = parseMobileHubConfig;\n  return Parser;\n}();\n\nexport { Parser };\n/**\n * @deprecated use per-function export\n */\n\nexport default Parser;","map":{"version":3,"mappings":"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","names":["ConsoleLogger","Logger","logger","parseMobileHubConfig","config","amplifyConfig","Analytics","AWSPinpoint","appId","region","Auth","userPoolId","userPoolWebClientId","identityPoolId","identityPoolRegion","mandatorySignIn","signUpVerificationMethod","storageConfig","AWSS3","bucket","dangerouslyConnectToHttpEndpointForTesting","Storage","Logging","__assign","Geo","Object","assign","geo","AmazonLocationService","debug","Parser"],"sources":["C:\\Users\\lmore\\OneDrive\\Documents\\GitHub\\JacksOfAllTrades\\jacksofalltrades\\node_modules\\@aws-amplify\\core\\src\\Parser.ts"],"sourcesContent":["import { AmplifyConfig } from './types';\nimport { ConsoleLogger as Logger } from './Logger';\n\nconst logger = new Logger('Parser');\n\nexport const parseMobileHubConfig = (config): AmplifyConfig => {\n\tconst amplifyConfig: AmplifyConfig = {};\n\t// Analytics\n\tif (config['aws_mobile_analytics_app_id']) {\n\t\tconst Analytics = {\n\t\t\tAWSPinpoint: {\n\t\t\t\tappId: config['aws_mobile_analytics_app_id'],\n\t\t\t\tregion: config['aws_mobile_analytics_app_region'],\n\t\t\t},\n\t\t};\n\t\tamplifyConfig.Analytics = Analytics;\n\t}\n\n\t// Auth\n\tif (config['aws_cognito_identity_pool_id'] || config['aws_user_pools_id']) {\n\t\tamplifyConfig.Auth = {\n\t\t\tuserPoolId: config['aws_user_pools_id'],\n\t\t\tuserPoolWebClientId: config['aws_user_pools_web_client_id'],\n\t\t\tregion: config['aws_cognito_region'],\n\t\t\tidentityPoolId: config['aws_cognito_identity_pool_id'],\n\t\t\tidentityPoolRegion: config['aws_cognito_region'],\n\t\t\tmandatorySignIn: config['aws_mandatory_sign_in'] === 'enable',\n\t\t\tsignUpVerificationMethod:\n\t\t\t\tconfig['aws_cognito_sign_up_verification_method'] || 'code',\n\t\t};\n\t}\n\n\t// Storage\n\tlet storageConfig;\n\tif (config['aws_user_files_s3_bucket']) {\n\t\tstorageConfig = {\n\t\t\tAWSS3: {\n\t\t\t\tbucket: config['aws_user_files_s3_bucket'],\n\t\t\t\tregion: config['aws_user_files_s3_bucket_region'],\n\t\t\t\tdangerouslyConnectToHttpEndpointForTesting:\n\t\t\t\t\tconfig[\n\t\t\t\t\t\t'aws_user_files_s3_dangerously_connect_to_http_endpoint_for_testing'\n\t\t\t\t\t],\n\t\t\t},\n\t\t};\n\t} else {\n\t\tstorageConfig = config ? config.Storage || config : {};\n\t}\n\n\t// Logging\n\tif (config['Logging']) {\n\t\tamplifyConfig.Logging = {\n\t\t\t...config['Logging'],\n\t\t\tregion: config['aws_project_region'],\n\t\t};\n\t}\n\n\t// Geo\n\tif (config['geo']) {\n\t\tamplifyConfig.Geo = Object.assign({}, config.geo);\n\t\tif (config.geo['amazon_location_service']) {\n\t\t\tamplifyConfig.Geo = {\n\t\t\t\tAmazonLocationService: config.geo['amazon_location_service'],\n\t\t\t};\n\t\t}\n\t}\n\n\tamplifyConfig.Analytics = Object.assign(\n\t\t{},\n\t\tamplifyConfig.Analytics,\n\t\tconfig.Analytics\n\t);\n\tamplifyConfig.Auth = Object.assign({}, amplifyConfig.Auth, config.Auth);\n\tamplifyConfig.Storage = Object.assign({}, storageConfig);\n\tamplifyConfig.Logging = Object.assign(\n\t\t{},\n\t\tamplifyConfig.Logging,\n\t\tconfig.Logging\n\t);\n\tlogger.debug('parse config', config, 'to amplifyconfig', amplifyConfig);\n\treturn amplifyConfig;\n};\n\n/**\n * @deprecated use per-function export\n */\nexport class Parser {\n\tstatic parseMobilehubConfig = parseMobileHubConfig;\n}\n\n/**\n * @deprecated use per-function export\n */\nexport default Parser;\n"]},"metadata":{},"sourceType":"module"}