{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport maplibregl from \"maplibre-gl\";\nimport { Geo } from \"@aws-amplify/geo\";\nimport { drawGeofences } from \"../drawGeofences\";\nimport { isValidGeofenceId, getGeofenceFeatureFromPolygon, getGeofenceFeatureArray, isExistingGeofenceId, getDistanceBetweenCoordinates } from \"../geofenceUtils\";\nimport { GEOFENCE_COLOR, GEOFENCE_BORDER_COLOR } from \"../constants\";\nimport { AmplifyGeofenceControlUI } from \"./ui\";\nimport { AmplifyMapDraw } from \"./AmplifyMapDraw\";\nimport { createElement } from \"../utils\";\nconst FIT_BOUNDS_PADDING = {\n  left: 240\n}; // Default to 240px right now because of the left nav\n\nexport class AmplifyGeofenceControl {\n  constructor(options) {\n    this._geofenceCollectionId = options === null || options === void 0 ? void 0 : options.geofenceCollectionId;\n    this._loadedGeofences = {};\n    this._displayedGeofences = [];\n    this.changeMode = this.changeMode.bind(this);\n    this.loadInitialGeofences = this.loadInitialGeofences.bind(this);\n    this.loadMoreGeofences = this.loadMoreGeofences.bind(this);\n    this._loadGeofence = this._loadGeofence.bind(this);\n    this.updateInputRadius = this.updateInputRadius.bind(this);\n    this.saveGeofence = this.saveGeofence.bind(this);\n    this.editGeofence = this.editGeofence.bind(this);\n    this.deleteGeofence = this.deleteGeofence.bind(this);\n    this.displayAllGeofences = this.displayAllGeofences.bind(this);\n    this.hideAllGeofences = this.hideAllGeofences.bind(this);\n    this.addEditableGeofence = this.addEditableGeofence.bind(this);\n    this.setEditingModeEnabled = this.setEditingModeEnabled.bind(this);\n    this.displayHighlightedGeofence = this.displayHighlightedGeofence.bind(this);\n    this.hideHighlightedGeofence = this.hideHighlightedGeofence.bind(this);\n    this.displayGeofence = this.displayGeofence.bind(this);\n    this.hideGeofence = this.hideGeofence.bind(this);\n    this.fitGeofence = this.fitGeofence.bind(this);\n    this.fitAllGeofences = this.fitAllGeofences.bind(this);\n  }\n  /**********************************************************************\n   Public Methods for AmplifyGeofenceControl\n   **********************************************************************/\n\n\n  getDefaultPosition() {\n    return \"full-screen\";\n  }\n\n  onRemove() {\n    this._ui.removeElement(this._container);\n  } // Reorders MapLibre canvas class names to fix a mapbox draw bug - https://github.com/mapbox/mapbox-gl-draw/pull/1079\n\n\n  reorderMapLibreClassNames() {\n    const mapCanvas = document.getElementsByClassName(\"maplibregl-canvas\").item(0);\n\n    if (mapCanvas) {\n      mapCanvas.className = \"mapboxgl-canvas maplibregl-canvas\";\n    }\n  }\n\n  onAdd(map) {\n    this._map = map;\n    this.reorderMapLibreClassNames();\n    this._container = createElement(\"div\", \"geofence-ctrl maplibregl-ctrl\");\n    this._ui = AmplifyGeofenceControlUI(this, this._container);\n    this._amplifyDraw = new AmplifyMapDraw(map, this._ui);\n\n    this._ui.registerControlPosition(map, \"full-screen\");\n\n    this._ui.createGeofenceListContainer(); // Draw the geofences source to the map so we can update it on geofences load/creation\n\n\n    this._map.once(\"load\", function () {\n      // Prevents warnings on multiple re-renders, especially when rendered in react\n      if (this._map.getSource(\"displayedGeofences\")) {\n        return;\n      }\n\n      this._drawGeofencesOutput = drawGeofences(\"displayedGeofences\", [], this._map, {\n        fillColor: GEOFENCE_COLOR,\n        borderColor: GEOFENCE_BORDER_COLOR,\n        borderOpacity: 1\n      });\n      this._highlightedGeofenceOutput = drawGeofences(\"highlightedGeofence\", [], this._map, {\n        fillColor: GEOFENCE_COLOR,\n        borderColor: GEOFENCE_BORDER_COLOR,\n        borderOpacity: 1,\n        borderWidth: 6\n      });\n      this.loadInitialGeofences();\n      map.addControl(new maplibregl.NavigationControl({\n        showCompass: false\n      }), \"bottom-right\");\n    }.bind(this));\n\n    this._map.on(\"draw.update\", () => {\n      const coordinates = this._amplifyDraw._mapBoxDraw.getAll().features[0].geometry.coordinates[0];\n\n      const radius = getDistanceBetweenCoordinates(coordinates[0], coordinates[Math.floor(coordinates.length / 2)]) / 2;\n\n      this._ui.updateGeofenceRadius(radius.toFixed(2));\n    });\n\n    return this._container;\n  }\n\n  createGeofence(geofenceId) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!geofenceId || geofenceId.length === 0) {\n        this._ui.createAddGeofencePromptError(\"Geofence ID is empty.\");\n\n        return;\n      }\n\n      if (!isValidGeofenceId(geofenceId)) {\n        this._ui.createAddGeofencePromptError(\"Geofence ID contains special characters.\");\n\n        return;\n      }\n\n      if (isExistingGeofenceId(geofenceId, this._loadedGeofences)) {\n        this._ui.createAddGeofencePromptError(\"Geofence ID already exists.\");\n\n        return;\n      }\n\n      return this.saveGeofence(geofenceId);\n    });\n  }\n\n  saveGeofence(geofenceId) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const feature = this._amplifyDraw.get(this._editingGeofenceId);\n\n      const idToSave = geofenceId || this._editingGeofenceId;\n      const response = yield Geo.saveGeofences({\n        geofenceId: idToSave,\n        geometry: {\n          polygon: feature.geometry[\"coordinates\"]\n        }\n      });\n\n      if (response.errors[0]) {\n        const err = response.errors[0];\n        throw new Error(`There was an error saving geofence with id ${idToSave}: ${err.error.code} - ${err.error.message}`);\n      }\n\n      const success = response.successes[0];\n      const savedGeofence = {\n        geofenceId: success.geofenceId,\n        geometry: {\n          polygon: feature.geometry[\"coordinates\"]\n        }\n      }; // render geofence to the map and add it to the list\n\n      this._loadGeofence(savedGeofence);\n\n      this.displayGeofence(savedGeofence.geofenceId);\n      this.setEditingModeEnabled(false);\n      return savedGeofence.geofenceId;\n    });\n  } // Each page loads 100 geofences\n\n\n  loadInitialGeofences() {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const {\n          entries,\n          nextToken\n        } = yield Geo.listGeofences();\n        this._listGeofencesNextToken = nextToken;\n        const loadGeofence = this._loadGeofence;\n        entries.forEach(geofence => loadGeofence(geofence));\n\n        this._ui.updateGeofenceCount(Object.keys(this._loadedGeofences).length);\n      } catch (e) {\n        throw new Error(`Error calling listGeofences: ${e}`);\n      }\n    });\n  }\n\n  loadMoreGeofences() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this._listGeofencesNextToken) {\n        try {\n          const {\n            entries,\n            nextToken\n          } = yield Geo.listGeofences({\n            nextToken: this._listGeofencesNextToken\n          });\n          this._listGeofencesNextToken = nextToken;\n          const loadGeofence = this._loadGeofence;\n          entries.forEach(geofence => loadGeofence(geofence));\n\n          this._ui.updateGeofenceCount(Object.keys(this._loadedGeofences).length);\n        } catch (e) {\n          throw new Error(`Error calling listGeofences: ${e}`);\n        }\n      }\n    });\n  }\n\n  editGeofence(geofenceId) {\n    this.setEditingModeEnabled(true);\n    const geofence = this._loadedGeofences[geofenceId];\n\n    if (!geofence) {\n      throw new Error(`Geofence with id ${geofenceId} does not exist`);\n    } // render in mapboxdraw\n\n\n    const feature = getGeofenceFeatureFromPolygon(geofence.geometry.polygon);\n    const data = Object.assign({\n      id: geofence.geofenceId\n    }, feature);\n\n    this._amplifyDraw.add(data);\n\n    this._editingGeofenceId = geofence.geofenceId;\n  }\n\n  deleteGeofence(geofenceId) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const response = yield Geo.deleteGeofences(geofenceId);\n\n      if (response.errors[0]) {\n        const err = response.errors[0].error;\n        throw new Error(`There was an error deleting geofence with id ${geofenceId}: ${err.code} - ${err.message}`);\n      }\n\n      this._ui.removeGeofenceListItem(geofenceId);\n\n      delete this._loadedGeofences[geofenceId];\n\n      this._ui.updateGeofenceCount(Object.keys(this._loadedGeofences).length);\n\n      this._displayedGeofences = this._displayedGeofences.filter(geofence => geofence.geofenceId !== geofenceId);\n\n      this._updateDisplayedGeofences();\n\n      return geofenceId;\n    });\n  }\n\n  deleteSelectedGeofences() {\n    const idsToDelete = this._displayedGeofences.map(fence => fence.geofenceId); // FIXME: delete geofence api call here\n\n\n    idsToDelete.forEach(id => {\n      this._ui.removeGeofenceListItem(id);\n\n      delete this._loadedGeofences[id];\n    });\n    this._displayedGeofences = [];\n\n    this._updateDisplayedGeofences();\n  }\n  /**********************************************************************\n   Private methods for CRUD Geofences\n   **********************************************************************/\n\n\n  _loadGeofence(geofence) {\n    // If geofence exists remove it from displayed geofences\n    if (this._loadedGeofences[geofence.geofenceId]) {\n      this._displayedGeofences = this._displayedGeofences.filter(fence => fence.geofenceId !== geofence.geofenceId);\n    } else {\n      // If geofence doesn't exist render a new list item for it\n      this._ui.renderListItem(geofence);\n    }\n\n    this._loadedGeofences[geofence.geofenceId] = geofence;\n\n    this._ui.updateGeofenceCount(Object.keys(this._loadedGeofences).length);\n  }\n\n  displayGeofence(geofenceId) {\n    this._displayedGeofences.push(this._loadedGeofences[geofenceId]);\n\n    this._updateDisplayedGeofences();\n\n    this._ui.updateCheckbox(geofenceId, true);\n\n    this.fitAllGeofences();\n  }\n\n  displayAllGeofences() {\n    this._displayedGeofences.push(...Object.values(this._loadedGeofences));\n\n    this._updateDisplayedGeofences();\n\n    const checkboxes = document.getElementsByClassName(\"geofence-ctrl-list-item-checkbox\");\n    Array.from(checkboxes).forEach(checkbox => checkbox.checked = this._ui.getCheckboxAllValue());\n    this.fitAllGeofences();\n  }\n\n  fitGeofence(geofenceId) {\n    const mapBounds = this._map.getBounds();\n\n    const geofence = this._loadedGeofences[geofenceId];\n    geofence.geometry.polygon[0].forEach(coord => {\n      mapBounds.extend(coord);\n    });\n\n    this._map.fitBounds(mapBounds, {\n      padding: FIT_BOUNDS_PADDING\n    });\n  }\n\n  fitAllGeofences() {\n    let shouldFitBounds = false;\n\n    const mapBounds = this._map.getBounds();\n\n    this._displayedGeofences.forEach(geofence => {\n      geofence.geometry.polygon[0].forEach(coord => {\n        if (!mapBounds.contains(coord)) {\n          mapBounds.extend(coord);\n          shouldFitBounds = true;\n        }\n      });\n    });\n\n    if (shouldFitBounds) this._map.fitBounds(mapBounds, {\n      padding: FIT_BOUNDS_PADDING\n    });\n  }\n\n  hideGeofence(geofenceId) {\n    this._displayedGeofences = this._displayedGeofences.filter(geofence => geofence.geofenceId !== geofenceId);\n\n    this._updateDisplayedGeofences();\n\n    this._ui.updateCheckbox(geofenceId, false);\n  }\n\n  hideAllGeofences() {\n    this._displayedGeofences = [];\n\n    this._updateDisplayedGeofences();\n\n    const checkboxes = document.getElementsByClassName(\"geofence-ctrl-list-item-checkbox\");\n    Array.from(checkboxes).forEach(checkbox => checkbox.checked = this._ui.getCheckboxAllValue());\n  }\n\n  _updateDisplayedGeofences() {\n    const feature = getGeofenceFeatureArray(this._displayedGeofences);\n\n    this._drawGeofencesOutput.setData(feature);\n  }\n\n  displayHighlightedGeofence(geofenceId) {\n    const geofence = this._loadedGeofences[geofenceId];\n\n    if (!geofence) {\n      console.warn(`Geofence with id ${geofenceId} does not exist`);\n      return;\n    }\n\n    const feature = getGeofenceFeatureFromPolygon(geofence.geometry.polygon);\n\n    this._highlightedGeofenceOutput.setData(feature);\n\n    this._highlightedGeofenceOutput.show();\n  }\n\n  hideHighlightedGeofence() {\n    this._highlightedGeofenceOutput.hide();\n  }\n  /**********************************************************************\n   Methods for controlling amplify mapbox draw\n   **********************************************************************/\n\n\n  changeMode(mode) {\n    // erase existing mapbox draw content\n    this._amplifyDraw.delete(this._editingGeofenceId);\n\n    if (mode === \"draw_circle\") {\n      this._amplifyDraw.drawCircularGeofence(this._editingGeofenceId);\n    } else {\n      this._amplifyDraw.drawPolygonGeofence(this._editingGeofenceId);\n    }\n  }\n\n  resetGeofence() {\n    // erase existing mapbox draw content\n    this._amplifyDraw.delete(this._editingGeofenceId);\n\n    if (isExistingGeofenceId(this._editingGeofenceId, this._loadedGeofences)) {\n      this.editGeofence(this._editingGeofenceId);\n    } else {\n      this._amplifyDraw.drawPolygonGeofence(this._editingGeofenceId);\n    }\n  } // Disables add button and selecting items from geofence list\n\n\n  setEditingModeEnabled(enabled) {\n    enabled ? this._amplifyDraw.enable() : this._amplifyDraw.disable();\n    enabled ? this._drawGeofencesOutput.hide() : this._drawGeofencesOutput.show();\n\n    this._ui.setGeofenceListEnabled(!enabled);\n  }\n\n  updateInputRadius(event) {\n    const radiusString = event.target.value;\n    const radius = parseInt(radiusString);\n\n    if (isNaN(radius)) {\n      return;\n    }\n\n    this._amplifyDraw.drawCircularGeofence(this._editingGeofenceId, radius);\n  }\n\n  addEditableGeofence() {\n    this._editingGeofenceId = \"tempGeofence\";\n\n    this._amplifyDraw.drawCircularGeofence(\"tempGeofence\");\n\n    this.setEditingModeEnabled(true);\n  }\n\n}","map":{"version":3,"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","maplibregl","Geo","drawGeofences","isValidGeofenceId","getGeofenceFeatureFromPolygon","getGeofenceFeatureArray","isExistingGeofenceId","getDistanceBetweenCoordinates","GEOFENCE_COLOR","GEOFENCE_BORDER_COLOR","AmplifyGeofenceControlUI","AmplifyMapDraw","createElement","FIT_BOUNDS_PADDING","left","AmplifyGeofenceControl","constructor","options","_geofenceCollectionId","geofenceCollectionId","_loadedGeofences","_displayedGeofences","changeMode","bind","loadInitialGeofences","loadMoreGeofences","_loadGeofence","updateInputRadius","saveGeofence","editGeofence","deleteGeofence","displayAllGeofences","hideAllGeofences","addEditableGeofence","setEditingModeEnabled","displayHighlightedGeofence","hideHighlightedGeofence","displayGeofence","hideGeofence","fitGeofence","fitAllGeofences","getDefaultPosition","onRemove","_ui","removeElement","_container","reorderMapLibreClassNames","mapCanvas","document","getElementsByClassName","item","className","onAdd","map","_map","_amplifyDraw","registerControlPosition","createGeofenceListContainer","once","getSource","_drawGeofencesOutput","fillColor","borderColor","borderOpacity","_highlightedGeofenceOutput","borderWidth","addControl","NavigationControl","showCompass","on","coordinates","_mapBoxDraw","getAll","features","geometry","radius","Math","floor","length","updateGeofenceRadius","toFixed","createGeofence","geofenceId","createAddGeofencePromptError","feature","get","_editingGeofenceId","idToSave","response","saveGeofences","polygon","errors","err","Error","error","code","message","success","successes","savedGeofence","entries","nextToken","listGeofences","_listGeofencesNextToken","loadGeofence","forEach","geofence","updateGeofenceCount","Object","keys","data","assign","id","add","deleteGeofences","removeGeofenceListItem","filter","_updateDisplayedGeofences","deleteSelectedGeofences","idsToDelete","fence","renderListItem","push","updateCheckbox","values","checkboxes","Array","from","checkbox","checked","getCheckboxAllValue","mapBounds","getBounds","coord","extend","fitBounds","padding","shouldFitBounds","contains","setData","console","warn","show","hide","mode","delete","drawCircularGeofence","drawPolygonGeofence","resetGeofence","enabled","enable","disable","setGeofenceListEnabled","event","radiusString","target","parseInt","isNaN"],"sources":["C:/Users/lmore/OneDrive/Documents/GitHub/JacksOfAllTrades/jacksofalltrades/node_modules/maplibre-gl-js-amplify/lib/esm/AmplifyGeofenceControl/index.js"],"sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport maplibregl from \"maplibre-gl\";\nimport { Geo } from \"@aws-amplify/geo\";\nimport { drawGeofences } from \"../drawGeofences\";\nimport { isValidGeofenceId, getGeofenceFeatureFromPolygon, getGeofenceFeatureArray, isExistingGeofenceId, getDistanceBetweenCoordinates, } from \"../geofenceUtils\";\nimport { GEOFENCE_COLOR, GEOFENCE_BORDER_COLOR } from \"../constants\";\nimport { AmplifyGeofenceControlUI } from \"./ui\";\nimport { AmplifyMapDraw } from \"./AmplifyMapDraw\";\nimport { createElement } from \"../utils\";\nconst FIT_BOUNDS_PADDING = { left: 240 }; // Default to 240px right now because of the left nav\nexport class AmplifyGeofenceControl {\n    constructor(options) {\n        this._geofenceCollectionId = options === null || options === void 0 ? void 0 : options.geofenceCollectionId;\n        this._loadedGeofences = {};\n        this._displayedGeofences = [];\n        this.changeMode = this.changeMode.bind(this);\n        this.loadInitialGeofences = this.loadInitialGeofences.bind(this);\n        this.loadMoreGeofences = this.loadMoreGeofences.bind(this);\n        this._loadGeofence = this._loadGeofence.bind(this);\n        this.updateInputRadius = this.updateInputRadius.bind(this);\n        this.saveGeofence = this.saveGeofence.bind(this);\n        this.editGeofence = this.editGeofence.bind(this);\n        this.deleteGeofence = this.deleteGeofence.bind(this);\n        this.displayAllGeofences = this.displayAllGeofences.bind(this);\n        this.hideAllGeofences = this.hideAllGeofences.bind(this);\n        this.addEditableGeofence = this.addEditableGeofence.bind(this);\n        this.setEditingModeEnabled = this.setEditingModeEnabled.bind(this);\n        this.displayHighlightedGeofence =\n            this.displayHighlightedGeofence.bind(this);\n        this.hideHighlightedGeofence = this.hideHighlightedGeofence.bind(this);\n        this.displayGeofence = this.displayGeofence.bind(this);\n        this.hideGeofence = this.hideGeofence.bind(this);\n        this.fitGeofence = this.fitGeofence.bind(this);\n        this.fitAllGeofences = this.fitAllGeofences.bind(this);\n    }\n    /**********************************************************************\n     Public Methods for AmplifyGeofenceControl\n     **********************************************************************/\n    getDefaultPosition() {\n        return \"full-screen\";\n    }\n    onRemove() {\n        this._ui.removeElement(this._container);\n    }\n    // Reorders MapLibre canvas class names to fix a mapbox draw bug - https://github.com/mapbox/mapbox-gl-draw/pull/1079\n    reorderMapLibreClassNames() {\n        const mapCanvas = document\n            .getElementsByClassName(\"maplibregl-canvas\")\n            .item(0);\n        if (mapCanvas) {\n            mapCanvas.className = \"mapboxgl-canvas maplibregl-canvas\";\n        }\n    }\n    onAdd(map) {\n        this._map = map;\n        this.reorderMapLibreClassNames();\n        this._container = createElement(\"div\", \"geofence-ctrl maplibregl-ctrl\");\n        this._ui = AmplifyGeofenceControlUI(this, this._container);\n        this._amplifyDraw = new AmplifyMapDraw(map, this._ui);\n        this._ui.registerControlPosition(map, \"full-screen\");\n        this._ui.createGeofenceListContainer();\n        // Draw the geofences source to the map so we can update it on geofences load/creation\n        this._map.once(\"load\", function () {\n            // Prevents warnings on multiple re-renders, especially when rendered in react\n            if (this._map.getSource(\"displayedGeofences\")) {\n                return;\n            }\n            this._drawGeofencesOutput = drawGeofences(\"displayedGeofences\", [], this._map, {\n                fillColor: GEOFENCE_COLOR,\n                borderColor: GEOFENCE_BORDER_COLOR,\n                borderOpacity: 1,\n            });\n            this._highlightedGeofenceOutput = drawGeofences(\"highlightedGeofence\", [], this._map, {\n                fillColor: GEOFENCE_COLOR,\n                borderColor: GEOFENCE_BORDER_COLOR,\n                borderOpacity: 1,\n                borderWidth: 6,\n            });\n            this.loadInitialGeofences();\n            map.addControl(new maplibregl.NavigationControl({ showCompass: false }), \"bottom-right\");\n        }.bind(this));\n        this._map.on(\"draw.update\", () => {\n            const coordinates = this._amplifyDraw._mapBoxDraw.getAll().features[0].geometry.coordinates[0];\n            const radius = getDistanceBetweenCoordinates(coordinates[0], coordinates[Math.floor(coordinates.length / 2)]) / 2;\n            this._ui.updateGeofenceRadius(radius.toFixed(2));\n        });\n        return this._container;\n    }\n    createGeofence(geofenceId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!geofenceId || geofenceId.length === 0) {\n                this._ui.createAddGeofencePromptError(\"Geofence ID is empty.\");\n                return;\n            }\n            if (!isValidGeofenceId(geofenceId)) {\n                this._ui.createAddGeofencePromptError(\"Geofence ID contains special characters.\");\n                return;\n            }\n            if (isExistingGeofenceId(geofenceId, this._loadedGeofences)) {\n                this._ui.createAddGeofencePromptError(\"Geofence ID already exists.\");\n                return;\n            }\n            return this.saveGeofence(geofenceId);\n        });\n    }\n    saveGeofence(geofenceId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const feature = this._amplifyDraw.get(this._editingGeofenceId);\n            const idToSave = geofenceId || this._editingGeofenceId;\n            const response = yield Geo.saveGeofences({\n                geofenceId: idToSave,\n                geometry: { polygon: feature.geometry[\"coordinates\"] },\n            });\n            if (response.errors[0]) {\n                const err = response.errors[0];\n                throw new Error(`There was an error saving geofence with id ${idToSave}: ${err.error.code} - ${err.error.message}`);\n            }\n            const success = response.successes[0];\n            const savedGeofence = {\n                geofenceId: success.geofenceId,\n                geometry: { polygon: feature.geometry[\"coordinates\"] },\n            };\n            // render geofence to the map and add it to the list\n            this._loadGeofence(savedGeofence);\n            this.displayGeofence(savedGeofence.geofenceId);\n            this.setEditingModeEnabled(false);\n            return savedGeofence.geofenceId;\n        });\n    }\n    // Each page loads 100 geofences\n    loadInitialGeofences() {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const { entries, nextToken } = yield Geo.listGeofences();\n                this._listGeofencesNextToken = nextToken;\n                const loadGeofence = this._loadGeofence;\n                entries.forEach((geofence) => loadGeofence(geofence));\n                this._ui.updateGeofenceCount(Object.keys(this._loadedGeofences).length);\n            }\n            catch (e) {\n                throw new Error(`Error calling listGeofences: ${e}`);\n            }\n        });\n    }\n    loadMoreGeofences() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this._listGeofencesNextToken) {\n                try {\n                    const { entries, nextToken } = yield Geo.listGeofences({\n                        nextToken: this._listGeofencesNextToken,\n                    });\n                    this._listGeofencesNextToken = nextToken;\n                    const loadGeofence = this._loadGeofence;\n                    entries.forEach((geofence) => loadGeofence(geofence));\n                    this._ui.updateGeofenceCount(Object.keys(this._loadedGeofences).length);\n                }\n                catch (e) {\n                    throw new Error(`Error calling listGeofences: ${e}`);\n                }\n            }\n        });\n    }\n    editGeofence(geofenceId) {\n        this.setEditingModeEnabled(true);\n        const geofence = this._loadedGeofences[geofenceId];\n        if (!geofence) {\n            throw new Error(`Geofence with id ${geofenceId} does not exist`);\n        }\n        // render in mapboxdraw\n        const feature = getGeofenceFeatureFromPolygon(geofence.geometry.polygon);\n        const data = Object.assign({ id: geofence.geofenceId }, feature);\n        this._amplifyDraw.add(data);\n        this._editingGeofenceId = geofence.geofenceId;\n    }\n    deleteGeofence(geofenceId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const response = yield Geo.deleteGeofences(geofenceId);\n            if (response.errors[0]) {\n                const err = response.errors[0].error;\n                throw new Error(`There was an error deleting geofence with id ${geofenceId}: ${err.code} - ${err.message}`);\n            }\n            this._ui.removeGeofenceListItem(geofenceId);\n            delete this._loadedGeofences[geofenceId];\n            this._ui.updateGeofenceCount(Object.keys(this._loadedGeofences).length);\n            this._displayedGeofences = this._displayedGeofences.filter((geofence) => geofence.geofenceId !== geofenceId);\n            this._updateDisplayedGeofences();\n            return geofenceId;\n        });\n    }\n    deleteSelectedGeofences() {\n        const idsToDelete = this._displayedGeofences.map((fence) => fence.geofenceId);\n        // FIXME: delete geofence api call here\n        idsToDelete.forEach((id) => {\n            this._ui.removeGeofenceListItem(id);\n            delete this._loadedGeofences[id];\n        });\n        this._displayedGeofences = [];\n        this._updateDisplayedGeofences();\n    }\n    /**********************************************************************\n     Private methods for CRUD Geofences\n     **********************************************************************/\n    _loadGeofence(geofence) {\n        // If geofence exists remove it from displayed geofences\n        if (this._loadedGeofences[geofence.geofenceId]) {\n            this._displayedGeofences = this._displayedGeofences.filter((fence) => fence.geofenceId !== geofence.geofenceId);\n        }\n        else {\n            // If geofence doesn't exist render a new list item for it\n            this._ui.renderListItem(geofence);\n        }\n        this._loadedGeofences[geofence.geofenceId] = geofence;\n        this._ui.updateGeofenceCount(Object.keys(this._loadedGeofences).length);\n    }\n    displayGeofence(geofenceId) {\n        this._displayedGeofences.push(this._loadedGeofences[geofenceId]);\n        this._updateDisplayedGeofences();\n        this._ui.updateCheckbox(geofenceId, true);\n        this.fitAllGeofences();\n    }\n    displayAllGeofences() {\n        this._displayedGeofences.push(...Object.values(this._loadedGeofences));\n        this._updateDisplayedGeofences();\n        const checkboxes = document.getElementsByClassName(\"geofence-ctrl-list-item-checkbox\");\n        Array.from(checkboxes).forEach((checkbox) => (checkbox.checked = this._ui.getCheckboxAllValue()));\n        this.fitAllGeofences();\n    }\n    fitGeofence(geofenceId) {\n        const mapBounds = this._map.getBounds();\n        const geofence = this._loadedGeofences[geofenceId];\n        geofence.geometry.polygon[0].forEach((coord) => {\n            mapBounds.extend(coord);\n        });\n        this._map.fitBounds(mapBounds, { padding: FIT_BOUNDS_PADDING });\n    }\n    fitAllGeofences() {\n        let shouldFitBounds = false;\n        const mapBounds = this._map.getBounds();\n        this._displayedGeofences.forEach((geofence) => {\n            geofence.geometry.polygon[0].forEach((coord) => {\n                if (!mapBounds.contains(coord)) {\n                    mapBounds.extend(coord);\n                    shouldFitBounds = true;\n                }\n            });\n        });\n        if (shouldFitBounds)\n            this._map.fitBounds(mapBounds, { padding: FIT_BOUNDS_PADDING });\n    }\n    hideGeofence(geofenceId) {\n        this._displayedGeofences = this._displayedGeofences.filter((geofence) => geofence.geofenceId !== geofenceId);\n        this._updateDisplayedGeofences();\n        this._ui.updateCheckbox(geofenceId, false);\n    }\n    hideAllGeofences() {\n        this._displayedGeofences = [];\n        this._updateDisplayedGeofences();\n        const checkboxes = document.getElementsByClassName(\"geofence-ctrl-list-item-checkbox\");\n        Array.from(checkboxes).forEach((checkbox) => (checkbox.checked = this._ui.getCheckboxAllValue()));\n    }\n    _updateDisplayedGeofences() {\n        const feature = getGeofenceFeatureArray(this._displayedGeofences);\n        this._drawGeofencesOutput.setData(feature);\n    }\n    displayHighlightedGeofence(geofenceId) {\n        const geofence = this._loadedGeofences[geofenceId];\n        if (!geofence) {\n            console.warn(`Geofence with id ${geofenceId} does not exist`);\n            return;\n        }\n        const feature = getGeofenceFeatureFromPolygon(geofence.geometry.polygon);\n        this._highlightedGeofenceOutput.setData(feature);\n        this._highlightedGeofenceOutput.show();\n    }\n    hideHighlightedGeofence() {\n        this._highlightedGeofenceOutput.hide();\n    }\n    /**********************************************************************\n     Methods for controlling amplify mapbox draw\n     **********************************************************************/\n    changeMode(mode) {\n        // erase existing mapbox draw content\n        this._amplifyDraw.delete(this._editingGeofenceId);\n        if (mode === \"draw_circle\") {\n            this._amplifyDraw.drawCircularGeofence(this._editingGeofenceId);\n        }\n        else {\n            this._amplifyDraw.drawPolygonGeofence(this._editingGeofenceId);\n        }\n    }\n    resetGeofence() {\n        // erase existing mapbox draw content\n        this._amplifyDraw.delete(this._editingGeofenceId);\n        if (isExistingGeofenceId(this._editingGeofenceId, this._loadedGeofences)) {\n            this.editGeofence(this._editingGeofenceId);\n        }\n        else {\n            this._amplifyDraw.drawPolygonGeofence(this._editingGeofenceId);\n        }\n    }\n    // Disables add button and selecting items from geofence list\n    setEditingModeEnabled(enabled) {\n        enabled ? this._amplifyDraw.enable() : this._amplifyDraw.disable();\n        enabled\n            ? this._drawGeofencesOutput.hide()\n            : this._drawGeofencesOutput.show();\n        this._ui.setGeofenceListEnabled(!enabled);\n    }\n    updateInputRadius(event) {\n        const radiusString = event.target.value;\n        const radius = parseInt(radiusString);\n        if (isNaN(radius)) {\n            return;\n        }\n        this._amplifyDraw.drawCircularGeofence(this._editingGeofenceId, radius);\n    }\n    addEditableGeofence() {\n        this._editingGeofenceId = \"tempGeofence\";\n        this._amplifyDraw.drawCircularGeofence(\"tempGeofence\");\n        this.setEditingModeEnabled(true);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}