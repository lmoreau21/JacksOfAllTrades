{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { HttpRequest } from \"@aws-sdk/protocol-http\";\nexport function addExpectContinueMiddleware(options) {\n  var _this = this;\n\n  return function (next) {\n    return function (args) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var request;\n        return __generator(this, function (_a) {\n          request = args.request;\n\n          if (HttpRequest.isInstance(request) && request.body && options.runtime === \"node\") {\n            request.headers = __assign(__assign({}, request.headers), {\n              Expect: \"100-continue\"\n            });\n          }\n\n          return [2\n          /*return*/\n          , next(__assign(__assign({}, args), {\n            request: request\n          }))];\n        });\n      });\n    };\n  };\n}\nexport var addExpectContinueMiddlewareOptions = {\n  step: \"build\",\n  tags: [\"SET_EXPECT_HEADER\", \"EXPECT_HEADER\"],\n  name: \"addExpectContinueMiddleware\",\n  override: true\n};\nexport var getAddExpectContinuePlugin = function getAddExpectContinuePlugin(options) {\n  return {\n    applyToStack: function applyToStack(clientStack) {\n      clientStack.add(addExpectContinueMiddleware(options), addExpectContinueMiddlewareOptions);\n    }\n  };\n};","map":{"version":3,"mappings":";AAAA,SAASA,WAAT,QAA4B,wBAA5B;AAeA,OAAM,SAAUC,2BAAV,CAAsCC,OAAtC,EAAiE;EAAvE;;EACE,OAAO,UAAgCC,IAAhC,EAA+D;IAAgC,iBACpGC,IADoG,EACpE;MAAA;;;UAExBC,OAAO,GAAKD,IAAI,QAAhB;;UACR,IAAIJ,WAAW,CAACM,UAAZ,CAAuBD,OAAvB,KAAmCA,OAAO,CAACE,IAA3C,IAAmDL,OAAO,CAACM,OAAR,KAAoB,MAA3E,EAAmF;YACjFH,OAAO,CAACI,OAAR,GAAeC,sBACVL,OAAO,CAACI,OADE,GACK;cAClBE,MAAM,EAAE;YADU,CADL,CAAf;UAID;;UACD;UAAA;UAAA,EAAOR,IAAI,uBACNC,IADM,GACF;YACPC,OAAO;UADA,CADE,EAAX;;OATgC;IAajC,CAdqG;EAcrG,CAdD;AAeD;AAED,OAAO,IAAMO,kCAAkC,GAAwB;EACrEC,IAAI,EAAE,OAD+D;EAErEC,IAAI,EAAE,CAAC,mBAAD,EAAsB,eAAtB,CAF+D;EAGrEC,IAAI,EAAE,6BAH+D;EAIrEC,QAAQ,EAAE;AAJ2D,CAAhE;AAOP,OAAO,IAAMC,0BAA0B,GAAG,SAA7BA,0BAA6B,CAACf,OAAD,EAA4B;EAA0B,OAAC;IAC/FgB,YAAY,EAAE,sBAACC,WAAD,EAAY;MACxBA,WAAW,CAACC,GAAZ,CAAgBnB,2BAA2B,CAACC,OAAD,CAA3C,EAAsDU,kCAAtD;IACD;EAH8F,CAAD;AAI9F,CAJK","names":["HttpRequest","addExpectContinueMiddleware","options","next","args","request","isInstance","body","runtime","headers","__assign","Expect","addExpectContinueMiddlewareOptions","step","tags","name","override","getAddExpectContinuePlugin","applyToStack","clientStack","add"],"sources":["C:\\Users\\lmore\\OneDrive\\Documents\\GitHub\\JacksOfAllTrades\\jacksofalltrades\\node_modules\\@aws-sdk\\middleware-expect-continue\\src\\index.ts"],"sourcesContent":["import { HttpRequest } from \"@aws-sdk/protocol-http\";\nimport {\n  BuildHandler,\n  BuildHandlerArguments,\n  BuildHandlerOptions,\n  BuildHandlerOutput,\n  BuildMiddleware,\n  MetadataBearer,\n  Pluggable,\n} from \"@aws-sdk/types\";\n\ninterface PreviouslyResolved {\n  runtime: string;\n}\n\nexport function addExpectContinueMiddleware(options: PreviouslyResolved): BuildMiddleware<any, any> {\n  return <Output extends MetadataBearer>(next: BuildHandler<any, Output>): BuildHandler<any, Output> => async (\n    args: BuildHandlerArguments<any>\n  ): Promise<BuildHandlerOutput<Output>> => {\n    const { request } = args;\n    if (HttpRequest.isInstance(request) && request.body && options.runtime === \"node\") {\n      request.headers = {\n        ...request.headers,\n        Expect: \"100-continue\",\n      };\n    }\n    return next({\n      ...args,\n      request,\n    });\n  };\n}\n\nexport const addExpectContinueMiddlewareOptions: BuildHandlerOptions = {\n  step: \"build\",\n  tags: [\"SET_EXPECT_HEADER\", \"EXPECT_HEADER\"],\n  name: \"addExpectContinueMiddleware\",\n  override: true,\n};\n\nexport const getAddExpectContinuePlugin = (options: PreviouslyResolved): Pluggable<any, any> => ({\n  applyToStack: (clientStack) => {\n    clientStack.add(addExpectContinueMiddleware(options), addExpectContinueMiddlewareOptions);\n  },\n});\n"]},"metadata":{},"sourceType":"module"}