{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n/*\n * Copyright 2017-2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n\n\nimport { AbstractInteractionsProvider } from './InteractionsProvider';\nimport { LexRuntimeServiceClient, PostTextCommand, PostContentCommand } from '@aws-sdk/client-lex-runtime-service';\nimport { ConsoleLogger as Logger, Credentials, getAmplifyUserAgent } from '@aws-amplify/core';\nimport { convert } from './AWSLexProviderHelper/utils';\nvar logger = new Logger('AWSLexProvider');\n\nvar AWSLexProvider =\n/** @class */\nfunction (_super) {\n  __extends(AWSLexProvider, _super);\n\n  function AWSLexProvider(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var _this = _super.call(this, options) || this;\n\n    _this._botsCompleteCallback = {};\n    return _this;\n  }\n\n  AWSLexProvider.prototype.getProviderName = function () {\n    return 'AWSLexProvider';\n  };\n\n  AWSLexProvider.prototype.configure = function (config) {\n    if (config === void 0) {\n      config = {};\n    }\n\n    var propertiesToTest = ['name', 'alias', 'region'];\n    Object.keys(config).forEach(function (botKey) {\n      var botConfig = config[botKey]; // is bot config correct\n\n      if (!propertiesToTest.every(function (x) {\n        return x in botConfig;\n      })) {\n        throw new Error('invalid bot configuration');\n      }\n    });\n    return _super.prototype.configure.call(this, config);\n  };\n  /**\n   * @private\n   * @deprecated\n   * This is used internally by 'sendMessage' to call onComplete callback\n   * for a bot if configured\n   */\n\n\n  AWSLexProvider.prototype.reportBotStatus = function (data, botname) {\n    var _this = this; // Check if state is fulfilled to resolve onFullfilment promise\n\n\n    logger.debug('postContent state', data.dialogState);\n\n    if (data.dialogState === 'ReadyForFulfillment' || data.dialogState === 'Fulfilled') {\n      if (typeof this._botsCompleteCallback[botname] === 'function') {\n        setTimeout(function () {\n          return _this._botsCompleteCallback[botname](null, data);\n        }, 0);\n      }\n\n      if (this._config && typeof this._config[botname].onComplete === 'function') {\n        setTimeout(function () {\n          return _this._config[botname].onComplete(null, data);\n        }, 0);\n      }\n    }\n\n    if (data.dialogState === 'Failed') {\n      if (typeof this._botsCompleteCallback[botname] === 'function') {\n        setTimeout(function () {\n          return _this._botsCompleteCallback[botname]('Bot conversation failed');\n        }, 0);\n      }\n\n      if (this._config && typeof this._config[botname].onComplete === 'function') {\n        setTimeout(function () {\n          return _this._config[botname].onComplete('Bot conversation failed');\n        }, 0);\n      }\n    }\n  };\n\n  AWSLexProvider.prototype.sendMessage = function (botname, message) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentials, error_1, params, postTextCommand, data, err_1, content, messageType, inputStream, _a, postContentCommand, data, audioArray, _b, response, err_2;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            // check if bot exists\n            if (!this._config[botname]) {\n              return [2\n              /*return*/\n              , Promise.reject('Bot ' + botname + ' does not exist')];\n            }\n\n            _c.label = 1;\n\n          case 1:\n            _c.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , Credentials.get()];\n\n          case 2:\n            credentials = _c.sent();\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            error_1 = _c.sent();\n            return [2\n            /*return*/\n            , Promise.reject('No credentials')];\n\n          case 4:\n            this.lexRuntimeServiceClient = new LexRuntimeServiceClient({\n              region: this._config[botname].region,\n              credentials: credentials,\n              customUserAgent: getAmplifyUserAgent()\n            });\n            if (!(typeof message === 'string')) return [3\n            /*break*/\n            , 9];\n            params = {\n              botAlias: this._config[botname].alias,\n              botName: botname,\n              inputText: message,\n              userId: credentials.identityId\n            };\n            logger.debug('postText to lex', message);\n            _c.label = 5;\n\n          case 5:\n            _c.trys.push([5, 7,, 8]);\n\n            postTextCommand = new PostTextCommand(params);\n            return [4\n            /*yield*/\n            , this.lexRuntimeServiceClient.send(postTextCommand)];\n\n          case 6:\n            data = _c.sent();\n            this.reportBotStatus(data, botname);\n            return [2\n            /*return*/\n            , data];\n\n          case 7:\n            err_1 = _c.sent();\n            return [2\n            /*return*/\n            , Promise.reject(err_1)];\n\n          case 8:\n            return [3\n            /*break*/\n            , 21];\n\n          case 9:\n            content = message.content, messageType = message.options.messageType;\n            if (!(messageType === 'voice')) return [3\n            /*break*/\n            , 13];\n\n            if (typeof content !== 'object') {\n              return [2\n              /*return*/\n              , Promise.reject('invalid content type')];\n            }\n\n            if (!(content instanceof Uint8Array)) return [3\n            /*break*/\n            , 10];\n            _a = content;\n            return [3\n            /*break*/\n            , 12];\n\n          case 10:\n            return [4\n            /*yield*/\n            , convert(content)];\n\n          case 11:\n            _a = _c.sent();\n            _c.label = 12;\n\n          case 12:\n            inputStream = _a;\n            params = {\n              botAlias: this._config[botname].alias,\n              botName: botname,\n              contentType: 'audio/x-l16; sample-rate=16000; channel-count=1',\n              userId: credentials.identityId,\n              accept: 'audio/mpeg',\n              inputStream: inputStream\n            };\n            return [3\n            /*break*/\n            , 14];\n\n          case 13:\n            if (typeof content !== 'string') return [2\n            /*return*/\n            , Promise.reject('invalid content type')];\n            params = {\n              botAlias: this._config[botname].alias,\n              botName: botname,\n              contentType: 'text/plain; charset=utf-8',\n              inputStream: content,\n              userId: credentials.identityId,\n              accept: 'audio/mpeg'\n            };\n            _c.label = 14;\n\n          case 14:\n            logger.debug('postContent to lex', message);\n            _c.label = 15;\n\n          case 15:\n            _c.trys.push([15, 20,, 21]);\n\n            postContentCommand = new PostContentCommand(params);\n            return [4\n            /*yield*/\n            , this.lexRuntimeServiceClient.send(postContentCommand)];\n\n          case 16:\n            data = _c.sent();\n            if (!data.audioStream) return [3\n            /*break*/\n            , 18];\n            return [4\n            /*yield*/\n            , convert(data.audioStream)];\n\n          case 17:\n            _b = _c.sent();\n            return [3\n            /*break*/\n            , 19];\n\n          case 18:\n            _b = undefined;\n            _c.label = 19;\n\n          case 19:\n            audioArray = _b;\n            response = __assign(__assign({}, data), {\n              audioStream: audioArray\n            });\n            this.reportBotStatus(response, botname);\n            return [2\n            /*return*/\n            , response];\n\n          case 20:\n            err_2 = _c.sent();\n            return [2\n            /*return*/\n            , Promise.reject(err_2)];\n\n          case 21:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AWSLexProvider.prototype.onComplete = function (botname, callback) {\n    // does bot exist\n    if (!this._config[botname]) {\n      throw new Error('Bot ' + botname + ' does not exist');\n    }\n\n    this._botsCompleteCallback[botname] = callback;\n  };\n\n  return AWSLexProvider;\n}(AbstractInteractionsProvider);\n\nexport { AWSLexProvider };","map":{"version":3,"mappings":"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","names":["AbstractInteractionsProvider","LexRuntimeServiceClient","PostTextCommand","PostContentCommand","ConsoleLogger","Logger","Credentials","getAmplifyUserAgent","convert","logger","__extends","options","_super","_this","_botsCompleteCallback","AWSLexProvider","config","propertiesToTest","Object","keys","forEach","botConfig","botKey","every","Error","configure","call","data","botname","debug","dialogState","setTimeout","_config","onComplete","message","Promise","reject","get","credentials","_c","lexRuntimeServiceClient","region","customUserAgent","params","botAlias","alias","botName","inputText","userId","identityId","postTextCommand","send","reportBotStatus","err_1","content","messageType","Uint8Array","_a","inputStream","contentType","accept","postContentCommand","audioStream","_b","audioArray","response","err_2","callback"],"sources":["C:\\Users\\lmore\\OneDrive\\Documents\\GitHub\\JacksOfAllTrades\\jacksofalltrades\\node_modules\\@aws-amplify\\interactions\\src\\Providers\\AWSLexProvider.ts"],"sourcesContent":["/*\n * Copyright 2017-2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nimport { AbstractInteractionsProvider } from './InteractionsProvider';\nimport {\n\tInteractionsOptions,\n\tAWSLexProviderOptions,\n\tInteractionsResponse,\n\tInteractionsMessage,\n} from '../types';\nimport {\n\tLexRuntimeServiceClient,\n\tPostTextCommand,\n\tPostTextCommandInput,\n\tPostTextCommandOutput,\n\tPostContentCommand,\n\tPostContentCommandInput,\n\tPostContentCommandOutput,\n} from '@aws-sdk/client-lex-runtime-service';\nimport {\n\tConsoleLogger as Logger,\n\tCredentials,\n\tgetAmplifyUserAgent,\n} from '@aws-amplify/core';\nimport { convert } from './AWSLexProviderHelper/utils';\n\nconst logger = new Logger('AWSLexProvider');\n\ninterface PostContentCommandOutputFormatted\n\textends Omit<PostContentCommandOutput, 'audioStream'> {\n\taudioStream?: Uint8Array;\n}\n\ntype AWSLexProviderSendResponse =\n\t| PostTextCommandOutput\n\t| PostContentCommandOutputFormatted;\n\nexport class AWSLexProvider extends AbstractInteractionsProvider {\n\tprivate lexRuntimeServiceClient: LexRuntimeServiceClient;\n\tprivate _botsCompleteCallback: object;\n\n\tconstructor(options: InteractionsOptions = {}) {\n\t\tsuper(options);\n\t\tthis._botsCompleteCallback = {};\n\t}\n\n\tgetProviderName() {\n\t\treturn 'AWSLexProvider';\n\t}\n\n\tconfigure(config: AWSLexProviderOptions = {}): AWSLexProviderOptions {\n\t\tconst propertiesToTest = ['name', 'alias', 'region'];\n\n\t\tObject.keys(config).forEach(botKey => {\n\t\t\tconst botConfig = config[botKey];\n\n\t\t\t// is bot config correct\n\t\t\tif (!propertiesToTest.every(x => x in botConfig)) {\n\t\t\t\tthrow new Error('invalid bot configuration');\n\t\t\t}\n\t\t});\n\t\treturn super.configure(config);\n\t}\n\n\t/**\n\t * @private\n\t * @deprecated\n\t * This is used internally by 'sendMessage' to call onComplete callback\n\t * for a bot if configured\n\t */\n\treportBotStatus(data: AWSLexProviderSendResponse, botname: string) {\n\t\t// Check if state is fulfilled to resolve onFullfilment promise\n\t\tlogger.debug('postContent state', data.dialogState);\n\t\tif (\n\t\t\tdata.dialogState === 'ReadyForFulfillment' ||\n\t\t\tdata.dialogState === 'Fulfilled'\n\t\t) {\n\t\t\tif (typeof this._botsCompleteCallback[botname] === 'function') {\n\t\t\t\tsetTimeout(() => this._botsCompleteCallback[botname](null, data), 0);\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\tthis._config &&\n\t\t\t\ttypeof this._config[botname].onComplete === 'function'\n\t\t\t) {\n\t\t\t\tsetTimeout(() => this._config[botname].onComplete(null, data), 0);\n\t\t\t}\n\t\t}\n\n\t\tif (data.dialogState === 'Failed') {\n\t\t\tif (typeof this._botsCompleteCallback[botname] === 'function') {\n\t\t\t\tsetTimeout(\n\t\t\t\t\t() => this._botsCompleteCallback[botname]('Bot conversation failed'),\n\t\t\t\t\t0\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\tthis._config &&\n\t\t\t\ttypeof this._config[botname].onComplete === 'function'\n\t\t\t) {\n\t\t\t\tsetTimeout(\n\t\t\t\t\t() => this._config[botname].onComplete('Bot conversation failed'),\n\t\t\t\t\t0\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tasync sendMessage(\n\t\tbotname: string,\n\t\tmessage: string | InteractionsMessage\n\t): Promise<InteractionsResponse> {\n\t\t// check if bot exists\n\t\tif (!this._config[botname]) {\n\t\t\treturn Promise.reject('Bot ' + botname + ' does not exist');\n\t\t}\n\n\t\t// check if credentials are present\n\t\tlet credentials;\n\t\ttry {\n\t\t\tcredentials = await Credentials.get();\n\t\t} catch (error) {\n\t\t\treturn Promise.reject('No credentials');\n\t\t}\n\n\t\tthis.lexRuntimeServiceClient = new LexRuntimeServiceClient({\n\t\t\tregion: this._config[botname].region,\n\t\t\tcredentials,\n\t\t\tcustomUserAgent: getAmplifyUserAgent(),\n\t\t});\n\n\t\tlet params: PostTextCommandInput | PostContentCommandInput;\n\t\tif (typeof message === 'string') {\n\t\t\tparams = {\n\t\t\t\tbotAlias: this._config[botname].alias,\n\t\t\t\tbotName: botname,\n\t\t\t\tinputText: message,\n\t\t\t\tuserId: credentials.identityId,\n\t\t\t};\n\n\t\t\tlogger.debug('postText to lex', message);\n\t\t\ttry {\n\t\t\t\tconst postTextCommand = new PostTextCommand(params);\n\t\t\t\tconst data = await this.lexRuntimeServiceClient.send(postTextCommand);\n\n\t\t\t\tthis.reportBotStatus(data, botname);\n\t\t\t\treturn data;\n\t\t\t} catch (err) {\n\t\t\t\treturn Promise.reject(err);\n\t\t\t}\n\t\t} else {\n\t\t\tconst {\n\t\t\t\tcontent,\n\t\t\t\toptions: { messageType },\n\t\t\t} = message;\n\t\t\tif (messageType === 'voice') {\n\t\t\t\tif (typeof content !== 'object') {\n\t\t\t\t\treturn Promise.reject('invalid content type');\n\t\t\t\t}\n\t\t\t\tconst inputStream =\n\t\t\t\t\tcontent instanceof Uint8Array ? content : await convert(content);\n\n\t\t\t\tparams = {\n\t\t\t\t\tbotAlias: this._config[botname].alias,\n\t\t\t\t\tbotName: botname,\n\t\t\t\t\tcontentType: 'audio/x-l16; sample-rate=16000; channel-count=1',\n\t\t\t\t\tuserId: credentials.identityId,\n\t\t\t\t\taccept: 'audio/mpeg',\n\t\t\t\t\tinputStream,\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tif (typeof content !== 'string')\n\t\t\t\t\treturn Promise.reject('invalid content type');\n\n\t\t\t\tparams = {\n\t\t\t\t\tbotAlias: this._config[botname].alias,\n\t\t\t\t\tbotName: botname,\n\t\t\t\t\tcontentType: 'text/plain; charset=utf-8',\n\t\t\t\t\tinputStream: content,\n\t\t\t\t\tuserId: credentials.identityId,\n\t\t\t\t\taccept: 'audio/mpeg',\n\t\t\t\t};\n\t\t\t}\n\t\t\tlogger.debug('postContent to lex', message);\n\t\t\ttry {\n\t\t\t\tconst postContentCommand = new PostContentCommand(params);\n\t\t\t\tconst data = await this.lexRuntimeServiceClient.send(\n\t\t\t\t\tpostContentCommand\n\t\t\t\t);\n\n\t\t\t\tconst audioArray = data.audioStream\n\t\t\t\t\t? await convert(data.audioStream)\n\t\t\t\t\t: undefined;\n\n\t\t\t\tconst response = { ...data, ...{ audioStream: audioArray } };\n\n\t\t\t\tthis.reportBotStatus(response, botname);\n\t\t\t\treturn response;\n\t\t\t} catch (err) {\n\t\t\t\treturn Promise.reject(err);\n\t\t\t}\n\t\t}\n\t}\n\n\tonComplete(botname: string, callback: (err, confirmation) => void) {\n\t\t// does bot exist\n\t\tif (!this._config[botname]) {\n\t\t\tthrow new Error('Bot ' + botname + ' does not exist');\n\t\t}\n\t\tthis._botsCompleteCallback[botname] = callback;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}