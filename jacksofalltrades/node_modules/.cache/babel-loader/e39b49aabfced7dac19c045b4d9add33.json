{"ast":null,"code":"import { __values } from \"tslib\";\nimport { ALWAYS_UNSIGNABLE_HEADERS, PROXY_HEADER_PATTERN, SEC_HEADER_PATTERN } from \"./constants\";\n/**\n * @internal\n */\n\nexport function getCanonicalHeaders(_a, unsignableHeaders, signableHeaders) {\n  var e_1, _b;\n\n  var headers = _a.headers;\n  var canonical = {};\n\n  try {\n    for (var _c = __values(Object.keys(headers).sort()), _d = _c.next(); !_d.done; _d = _c.next()) {\n      var headerName = _d.value;\n      var canonicalHeaderName = headerName.toLowerCase();\n\n      if (canonicalHeaderName in ALWAYS_UNSIGNABLE_HEADERS || (unsignableHeaders === null || unsignableHeaders === void 0 ? void 0 : unsignableHeaders.has(canonicalHeaderName)) || PROXY_HEADER_PATTERN.test(canonicalHeaderName) || SEC_HEADER_PATTERN.test(canonicalHeaderName)) {\n        if (!signableHeaders || signableHeaders && !signableHeaders.has(canonicalHeaderName)) {\n          continue;\n        }\n      }\n\n      canonical[canonicalHeaderName] = headers[headerName].trim().replace(/\\s+/g, \" \");\n    }\n  } catch (e_1_1) {\n    e_1 = {\n      error: e_1_1\n    };\n  } finally {\n    try {\n      if (_d && !_d.done && (_b = _c.return)) _b.call(_c);\n    } finally {\n      if (e_1) throw e_1.error;\n    }\n  }\n\n  return canonical;\n}","map":{"version":3,"mappings":";AAEA,SAASA,yBAAT,EAAoCC,oBAApC,EAA0DC,kBAA1D,QAAoF,aAApF;AAEA;;;;AAGA,OAAM,SAAUC,mBAAV,CACJC,EADI,EAEJC,iBAFI,EAGJC,eAHI,EAGyB;;;MAF3BC,OAAO;EAIT,IAAMC,SAAS,GAAc,EAA7B;;;IACA,KAAyB,wBAAM,CAACC,IAAP,CAAYF,OAAZ,EAAqBG,IAArB,KAA2BC,cAApD,EAAoD,QAApD,EAAoDA,cAApD,EAAsD;MAAjD,IAAMC,UAAU,WAAhB;MACH,IAAMC,mBAAmB,GAAGD,UAAU,CAACE,WAAX,EAA5B;;MACA,IACED,mBAAmB,IAAIb,yBAAvB,KACAK,iBAAiB,SAAjB,qBAAiB,WAAjB,GAAiB,MAAjB,oBAAiB,CAAEU,GAAnB,CAAuBF,mBAAvB,CADA,KAEAZ,oBAAoB,CAACe,IAArB,CAA0BH,mBAA1B,CAFA,IAGAX,kBAAkB,CAACc,IAAnB,CAAwBH,mBAAxB,CAJF,EAKE;QACA,IAAI,CAACP,eAAD,IAAqBA,eAAe,IAAI,CAACA,eAAe,CAACS,GAAhB,CAAoBF,mBAApB,CAA7C,EAAwF;UACtF;QACD;MACF;;MAEDL,SAAS,CAACK,mBAAD,CAAT,GAAiCN,OAAO,CAACK,UAAD,CAAP,CAAoBK,IAApB,GAA2BC,OAA3B,CAAmC,MAAnC,EAA2C,GAA3C,CAAjC;IACD;;;;;;;;;;;;;EAED,OAAOV,SAAP;AACD","names":["ALWAYS_UNSIGNABLE_HEADERS","PROXY_HEADER_PATTERN","SEC_HEADER_PATTERN","getCanonicalHeaders","_a","unsignableHeaders","signableHeaders","headers","canonical","keys","sort","_d","headerName","canonicalHeaderName","toLowerCase","has","test","trim","replace"],"sources":["C:\\Users\\lmore\\OneDrive\\Documents\\GitHub\\JacksOfAllTrades\\jacksofalltrades\\node_modules\\@aws-sdk\\signature-v4\\src\\getCanonicalHeaders.ts"],"sourcesContent":["import { HeaderBag, HttpRequest } from \"@aws-sdk/types\";\n\nimport { ALWAYS_UNSIGNABLE_HEADERS, PROXY_HEADER_PATTERN, SEC_HEADER_PATTERN } from \"./constants\";\n\n/**\n * @internal\n */\nexport function getCanonicalHeaders(\n  { headers }: HttpRequest,\n  unsignableHeaders?: Set<string>,\n  signableHeaders?: Set<string>\n): HeaderBag {\n  const canonical: HeaderBag = {};\n  for (const headerName of Object.keys(headers).sort()) {\n    const canonicalHeaderName = headerName.toLowerCase();\n    if (\n      canonicalHeaderName in ALWAYS_UNSIGNABLE_HEADERS ||\n      unsignableHeaders?.has(canonicalHeaderName) ||\n      PROXY_HEADER_PATTERN.test(canonicalHeaderName) ||\n      SEC_HEADER_PATTERN.test(canonicalHeaderName)\n    ) {\n      if (!signableHeaders || (signableHeaders && !signableHeaders.has(canonicalHeaderName))) {\n        continue;\n      }\n    }\n\n    canonical[canonicalHeaderName] = headers[headerName].trim().replace(/\\s+/g, \" \");\n  }\n\n  return canonical;\n}\n"]},"metadata":{},"sourceType":"module"}