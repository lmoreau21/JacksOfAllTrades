{"ast":null,"code":"import { getFeaturesFromData } from \"./utils\";\nimport { drawClusterLayer } from \"./drawClusterLayer\";\nimport { drawUnclusteredLayer } from \"./drawUnclusteredLayer\";\n/**\n * DrawPoints utility function for adding points to a map based on coordinate data or a FeatureCollection. Will add clustered points and styled markers by default with options for popups and other styles\n * @param {String} sourceName A user defined name used for determining the maplibre data source and the maplibre layers\n * @param {Coordinate[] | Feature[]} data An array of coordinate data or GeoJSON Features used as the data source for maplibre\n * @param {maplibre-gl-js-Map} map A maplibre-gl-js [map](https://maplibre.org/maplibre-gl-js-docs/api/map/) on which the points will be drawn\n * @param {Object} options An object containing options for changing the styles and features of the points rendered to the map, see the options for more details on available settings\n * @param {String} options.showCluster Determines whether or not points close together should be clustered into a single point\n * @param {String} options.clusterOptions Object for determining cluster options, see [ClusterOptions](https://github.com/aws-amplify/maplibre-gl-js-amplify/blob/main/src/types.ts#L43) for more details\n * @param {String} options.unclusteredOptions Object for determining unclustered point options, see [UnclusteredOptions](https://github.com/aws-amplify/maplibre-gl-js-amplify/blob/main/src/types.ts#L8) for more details\n * @param {MAP_STYLE} mapStyle A required parameter that indicates the map style returned from Amazon Location Service. This is used to determine the default fonts to be used with maplibre-gl-js. View existing styles [here](https://github.com/aws-amplify/maplibre-gl-js-amplify/blob/main/src/constants.ts#L8)\n * @returns {DrawPointsOutput} output An object containing the string id's of the sources and layers used to draw the points to the map. This includes the sourceId, clusterLayerId, clusterSymbolLayerId, unclusteredLayerId.\n * @property {String} sourceId The [source](https://maplibre.org/maplibre-gl-js-docs/api/sources/) used to contain all of the coordinate/feature data\n * @property {String} clusterLayerId The [layer](https://maplibre.org/maplibre-gl-js-docs/style-spec/layers/) used for creating and styling the points that are clustered together\n * @property {String} clusterSymbolLayerId The [layer](https://maplibre.org/maplibre-gl-js-docs/style-spec/layers/#symbol) used for creating styling the number that shows the count of points in a cluster\n * @property {String} unclusteredLayerId The [layer](https://maplibre.org/maplibre-gl-js-docs/style-spec/layers) used for creating and styling the individual points on the map and the popup when clicking on a point\n */\n\nexport function drawPoints(sourceName, data, map) {\n  var _ref = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {},\n      _ref$showCluster = _ref.showCluster,\n      showCluster = _ref$showCluster === void 0 ? true : _ref$showCluster,\n      _ref$clusterOptions = _ref.clusterOptions,\n      clusterOptions = _ref$clusterOptions === void 0 ? {} : _ref$clusterOptions,\n      _ref$unclusteredOptio = _ref.unclusteredOptions,\n      unclusteredMarkerOptions = _ref$unclusteredOptio === void 0 ? {} : _ref$unclusteredOptio,\n      _ref$autoFit = _ref.autoFit,\n      autoFit = _ref$autoFit === void 0 ? true : _ref$autoFit;\n\n  var mapStyle = arguments.length > 4 ? arguments[4] : undefined;\n\n  var _a, _b;\n\n  if (!map || typeof map.addSource !== \"function\" || typeof map.addLayer !== \"function\") {\n    throw new Error(\"Please use a maplibre map\");\n  }\n  /*\n   * Convert data passed in as coordinates into features\n   */\n\n\n  var features = getFeaturesFromData(data);\n  /*\n   * Data source for features\n   */\n\n  var sourceId = sourceName;\n  map.addSource(sourceId, {\n    type: \"geojson\",\n    data: {\n      type: \"FeatureCollection\",\n      features: features\n    },\n    cluster: showCluster,\n    clusterMaxZoom: (_a = clusterOptions.clusterMaxZoom) !== null && _a !== void 0 ? _a : 14,\n    clusterRadius: (_b = clusterOptions.smCircleSize) !== null && _b !== void 0 ? _b : 60,\n    generateId: true\n  });\n  /*\n   * Draw ui layers for source data\n   */\n\n  var clusterLayerId, clusterSymbolLayerId;\n\n  if (showCluster) {\n    var _drawClusterLayer = drawClusterLayer(sourceId, map, clusterOptions, mapStyle);\n\n    clusterLayerId = _drawClusterLayer.clusterLayerId;\n    clusterSymbolLayerId = _drawClusterLayer.clusterSymbolLayerId;\n  }\n\n  var _drawUnclusteredLayer = drawUnclusteredLayer(sourceId, map, unclusteredMarkerOptions || {}),\n      unclusteredLayerId = _drawUnclusteredLayer.unclusteredLayerId;\n\n  if (autoFit) {\n    var mapBounds = map.getBounds();\n    features.forEach(function (feature) {\n      mapBounds.extend(feature.geometry.coordinates);\n    });\n    map.fitBounds(mapBounds);\n  } // utility function for setting layer visibility to none\n\n\n  var hide = function hide() {\n    map.setLayoutProperty(unclusteredLayerId, \"visibility\", \"none\");\n    if (clusterLayerId) map.setLayoutProperty(clusterLayerId, \"visibility\", \"none\");\n    if (clusterSymbolLayerId) map.setLayoutProperty(clusterSymbolLayerId, \"visibility\", \"none\");\n  }; // utility function for setting layer visibility to visible\n\n\n  var show = function show() {\n    map.setLayoutProperty(unclusteredLayerId, \"visibility\", \"visible\");\n    if (clusterLayerId) map.setLayoutProperty(clusterLayerId, \"visibility\", \"visible\");\n    if (clusterSymbolLayerId) map.setLayoutProperty(clusterSymbolLayerId, \"visibility\", \"visible\");\n  }; // utility function updating the data source\n\n\n  var setData = function setData(data) {\n    var features = getFeaturesFromData(data);\n    map.getSource(sourceId).setData({\n      type: \"FeatureCollection\",\n      features: features\n    });\n  };\n\n  return {\n    sourceId: sourceId,\n    unclusteredLayerId: unclusteredLayerId,\n    clusterLayerId: clusterLayerId,\n    clusterSymbolLayerId: clusterSymbolLayerId,\n    setData: setData,\n    show: show,\n    hide: hide\n  };\n}","map":{"version":3,"names":["getFeaturesFromData","drawClusterLayer","drawUnclusteredLayer","drawPoints","sourceName","data","map","showCluster","clusterOptions","unclusteredOptions","unclusteredMarkerOptions","autoFit","mapStyle","_a","_b","addSource","addLayer","Error","features","sourceId","type","cluster","clusterMaxZoom","clusterRadius","smCircleSize","generateId","clusterLayerId","clusterSymbolLayerId","unclusteredLayerId","mapBounds","getBounds","forEach","feature","extend","geometry","coordinates","fitBounds","hide","setLayoutProperty","show","setData","getSource"],"sources":["C:/Users/lmore/OneDrive/Documents/GitHub/JacksOfAllTrades/jacksofalltrades/node_modules/maplibre-gl-js-amplify/lib/esm/drawPoints.js"],"sourcesContent":["import { getFeaturesFromData } from \"./utils\";\nimport { drawClusterLayer } from \"./drawClusterLayer\";\nimport { drawUnclusteredLayer } from \"./drawUnclusteredLayer\";\n/**\n * DrawPoints utility function for adding points to a map based on coordinate data or a FeatureCollection. Will add clustered points and styled markers by default with options for popups and other styles\n * @param {String} sourceName A user defined name used for determining the maplibre data source and the maplibre layers\n * @param {Coordinate[] | Feature[]} data An array of coordinate data or GeoJSON Features used as the data source for maplibre\n * @param {maplibre-gl-js-Map} map A maplibre-gl-js [map](https://maplibre.org/maplibre-gl-js-docs/api/map/) on which the points will be drawn\n * @param {Object} options An object containing options for changing the styles and features of the points rendered to the map, see the options for more details on available settings\n * @param {String} options.showCluster Determines whether or not points close together should be clustered into a single point\n * @param {String} options.clusterOptions Object for determining cluster options, see [ClusterOptions](https://github.com/aws-amplify/maplibre-gl-js-amplify/blob/main/src/types.ts#L43) for more details\n * @param {String} options.unclusteredOptions Object for determining unclustered point options, see [UnclusteredOptions](https://github.com/aws-amplify/maplibre-gl-js-amplify/blob/main/src/types.ts#L8) for more details\n * @param {MAP_STYLE} mapStyle A required parameter that indicates the map style returned from Amazon Location Service. This is used to determine the default fonts to be used with maplibre-gl-js. View existing styles [here](https://github.com/aws-amplify/maplibre-gl-js-amplify/blob/main/src/constants.ts#L8)\n * @returns {DrawPointsOutput} output An object containing the string id's of the sources and layers used to draw the points to the map. This includes the sourceId, clusterLayerId, clusterSymbolLayerId, unclusteredLayerId.\n * @property {String} sourceId The [source](https://maplibre.org/maplibre-gl-js-docs/api/sources/) used to contain all of the coordinate/feature data\n * @property {String} clusterLayerId The [layer](https://maplibre.org/maplibre-gl-js-docs/style-spec/layers/) used for creating and styling the points that are clustered together\n * @property {String} clusterSymbolLayerId The [layer](https://maplibre.org/maplibre-gl-js-docs/style-spec/layers/#symbol) used for creating styling the number that shows the count of points in a cluster\n * @property {String} unclusteredLayerId The [layer](https://maplibre.org/maplibre-gl-js-docs/style-spec/layers) used for creating and styling the individual points on the map and the popup when clicking on a point\n */\nexport function drawPoints(sourceName, data, map, { showCluster = true, clusterOptions = {}, unclusteredOptions: unclusteredMarkerOptions = {}, autoFit = true, } = {}, mapStyle) {\n    var _a, _b;\n    if (!map ||\n        typeof map.addSource !== \"function\" ||\n        typeof map.addLayer !== \"function\") {\n        throw new Error(\"Please use a maplibre map\");\n    }\n    /*\n     * Convert data passed in as coordinates into features\n     */\n    const features = getFeaturesFromData(data);\n    /*\n     * Data source for features\n     */\n    const sourceId = sourceName;\n    map.addSource(sourceId, {\n        type: \"geojson\",\n        data: {\n            type: \"FeatureCollection\",\n            features,\n        },\n        cluster: showCluster,\n        clusterMaxZoom: (_a = clusterOptions.clusterMaxZoom) !== null && _a !== void 0 ? _a : 14,\n        clusterRadius: (_b = clusterOptions.smCircleSize) !== null && _b !== void 0 ? _b : 60,\n        generateId: true,\n    });\n    /*\n     * Draw ui layers for source data\n     */\n    let clusterLayerId, clusterSymbolLayerId;\n    if (showCluster) {\n        ({ clusterLayerId, clusterSymbolLayerId } = drawClusterLayer(sourceId, map, clusterOptions, mapStyle));\n    }\n    const { unclusteredLayerId } = drawUnclusteredLayer(sourceId, map, unclusteredMarkerOptions || {});\n    if (autoFit) {\n        const mapBounds = map.getBounds();\n        features.forEach(function (feature) {\n            mapBounds.extend(feature.geometry.coordinates);\n        });\n        map.fitBounds(mapBounds);\n    }\n    // utility function for setting layer visibility to none\n    const hide = () => {\n        map.setLayoutProperty(unclusteredLayerId, \"visibility\", \"none\");\n        if (clusterLayerId)\n            map.setLayoutProperty(clusterLayerId, \"visibility\", \"none\");\n        if (clusterSymbolLayerId)\n            map.setLayoutProperty(clusterSymbolLayerId, \"visibility\", \"none\");\n    };\n    // utility function for setting layer visibility to visible\n    const show = () => {\n        map.setLayoutProperty(unclusteredLayerId, \"visibility\", \"visible\");\n        if (clusterLayerId)\n            map.setLayoutProperty(clusterLayerId, \"visibility\", \"visible\");\n        if (clusterSymbolLayerId)\n            map.setLayoutProperty(clusterSymbolLayerId, \"visibility\", \"visible\");\n    };\n    // utility function updating the data source\n    const setData = (data) => {\n        const features = getFeaturesFromData(data);\n        map.getSource(sourceId).setData({\n            type: \"FeatureCollection\",\n            features,\n        });\n    };\n    return {\n        sourceId,\n        unclusteredLayerId,\n        clusterLayerId,\n        clusterSymbolLayerId,\n        setData,\n        show,\n        hide,\n    };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}