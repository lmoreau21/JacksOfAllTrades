{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spread = this && this.__spread || function () {\n  for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n\n  return ar;\n};\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nimport { Buffer } from 'buffer';\nimport { monotonicFactory } from 'ulid';\nimport { v4 as uuid } from 'uuid';\nimport { produce, applyPatches } from 'immer';\nimport { isPredicateGroup, isPredicateObj, SortDirection, isModelAttributeKey, isModelAttributePrimaryKey, isModelAttributeCompositeKey, LimitTimerRaceResolvedValues } from './types';\nimport { WordArray } from 'amazon-cognito-identity-js';\nexport var NAMESPACES;\n\n(function (NAMESPACES) {\n  NAMESPACES[\"DATASTORE\"] = \"datastore\";\n  NAMESPACES[\"USER\"] = \"user\";\n  NAMESPACES[\"SYNC\"] = \"sync\";\n  NAMESPACES[\"STORAGE\"] = \"storage\";\n})(NAMESPACES || (NAMESPACES = {}));\n\nvar DATASTORE = NAMESPACES.DATASTORE;\nvar USER = NAMESPACES.USER;\nvar SYNC = NAMESPACES.SYNC;\nvar STORAGE = NAMESPACES.STORAGE;\nexport { USER, SYNC, STORAGE, DATASTORE };\nexport var USER_AGENT_SUFFIX_DATASTORE = '/DataStore';\nexport var exhaustiveCheck = function (obj, throwOnError) {\n  if (throwOnError === void 0) {\n    throwOnError = true;\n  }\n\n  if (throwOnError) {\n    throw new Error(\"Invalid \" + obj);\n  }\n};\nexport var isNullOrUndefined = function (val) {\n  return typeof val === 'undefined' || val === undefined || val === null;\n};\nexport var validatePredicate = function (model, groupType, predicatesOrGroups) {\n  var filterType;\n  var isNegation = false;\n\n  if (predicatesOrGroups.length === 0) {\n    return true;\n  }\n\n  switch (groupType) {\n    case 'not':\n      filterType = 'every';\n      isNegation = true;\n      break;\n\n    case 'and':\n      filterType = 'every';\n      break;\n\n    case 'or':\n      filterType = 'some';\n      break;\n\n    default:\n      exhaustiveCheck(groupType);\n  }\n\n  var result = predicatesOrGroups[filterType](function (predicateOrGroup) {\n    if (isPredicateObj(predicateOrGroup)) {\n      var field = predicateOrGroup.field,\n          operator = predicateOrGroup.operator,\n          operand = predicateOrGroup.operand;\n      var value = model[field];\n      return validatePredicateField(value, operator, operand);\n    }\n\n    if (isPredicateGroup(predicateOrGroup)) {\n      var type = predicateOrGroup.type,\n          predicates = predicateOrGroup.predicates;\n      return validatePredicate(model, type, predicates);\n    }\n\n    throw new Error('Not a predicate or group');\n  });\n  return isNegation ? !result : result;\n};\nexport var validatePredicateField = function (value, operator, operand) {\n  switch (operator) {\n    case 'ne':\n      return value !== operand;\n\n    case 'eq':\n      return value === operand;\n\n    case 'le':\n      return value <= operand;\n\n    case 'lt':\n      return value < operand;\n\n    case 'ge':\n      return value >= operand;\n\n    case 'gt':\n      return value > operand;\n\n    case 'between':\n      var _c = __read(operand, 2),\n          min = _c[0],\n          max = _c[1];\n\n      return value >= min && value <= max;\n\n    case 'beginsWith':\n      return !isNullOrUndefined(value) && value.startsWith(operand);\n\n    case 'contains':\n      return !isNullOrUndefined(value) && value.indexOf(operand) > -1;\n\n    case 'notContains':\n      return isNullOrUndefined(value) || value.indexOf(operand) === -1;\n\n    default:\n      exhaustiveCheck(operator, false);\n      return false;\n  }\n};\nexport var isModelConstructor = function (obj) {\n  return obj && typeof obj.copyOf === 'function';\n};\nvar nonModelClasses = new WeakSet();\nexport function registerNonModelClass(clazz) {\n  nonModelClasses.add(clazz);\n}\nexport var isNonModelConstructor = function (obj) {\n  return nonModelClasses.has(obj);\n};\n/*\n  When we have GSI(s) with composite sort keys defined on a model\n    There are some very particular rules regarding which fields must be included in the update mutation input\n    The field selection becomes more complex as the number of GSIs with composite sort keys grows\n\n    To summarize: any time we update a field that is part of the composite sort key of a GSI, we must include:\n     1. all of the other fields in that composite sort key\n     2. all of the fields from any other composite sort key that intersect with the fields from 1.\n\n     E.g.,\n     Model @model\n        @key(name: 'key1' fields: ['hk', 'a', 'b', 'c'])\n        @key(name: 'key2' fields: ['hk', 'a', 'b', 'd'])\n        @key(name: 'key3' fields: ['hk', 'x', 'y', 'z'])\n\n    Model.a is updated => include ['a', 'b', 'c', 'd']\n    Model.c is updated => include ['a', 'b', 'c', 'd']\n    Model.d is updated => include ['a', 'b', 'c', 'd']\n    Model.x is updated => include ['x', 'y', 'z']\n\n    This function accepts a model's attributes and returns grouped sets of composite key fields\n    Using our example Model above, the function will return:\n    [\n        Set('a', 'b', 'c', 'd'),\n        Set('x', 'y', 'z'),\n    ]\n\n    This gives us the opportunity to correctly include the required fields for composite keys\n    When crafting the mutation input in Storage.getUpdateMutationInput\n\n    See 'processCompositeKeys' test in util.test.ts for more examples\n*/\n\nexport var processCompositeKeys = function (attributes) {\n  var extractCompositeSortKey = function (_c) {\n    var // ignore the HK (fields[0]) we only need to include the composite sort key fields[1...n]\n    _d = __read(_c.properties.fields),\n        sortKeyFields = _d.slice(1);\n\n    return sortKeyFields;\n  };\n\n  var compositeKeyFields = attributes.filter(isModelAttributeCompositeKey).map(extractCompositeSortKey);\n  /*\n      if 2 sets of fields have any intersecting fields => combine them into 1 union set\n      e.g., ['a', 'b', 'c'] and ['a', 'b', 'd'] => ['a', 'b', 'c', 'd']\n  */\n\n  var combineIntersecting = function (fields) {\n    return fields.reduce(function (combined, sortKeyFields) {\n      var sortKeyFieldsSet = new Set(sortKeyFields);\n\n      if (combined.length === 0) {\n        combined.push(sortKeyFieldsSet);\n        return combined;\n      } // does the current set share values with another set we've already added to `combined`?\n\n\n      var intersectingSetIdx = combined.findIndex(function (existingSet) {\n        return __spread(existingSet).some(function (f) {\n          return sortKeyFieldsSet.has(f);\n        });\n      });\n\n      if (intersectingSetIdx > -1) {\n        var union = new Set(__spread(combined[intersectingSetIdx], sortKeyFieldsSet)); // combine the current set with the intersecting set we found above\n\n        combined[intersectingSetIdx] = union;\n      } else {\n        // none of the sets in `combined` have intersecting values with the current set\n        combined.push(sortKeyFieldsSet);\n      }\n\n      return combined;\n    }, []);\n  };\n\n  var initial = combineIntersecting(compositeKeyFields); // a single pass pay not be enough to correctly combine all the fields\n  // call the function once more to get a final merged list of sets\n\n  var combined = combineIntersecting(initial);\n  return combined;\n};\nexport var establishRelationAndKeys = function (namespace) {\n  var relationship = {};\n  var keys = {};\n  Object.keys(namespace.models).forEach(function (mKey) {\n    var e_1, _c, e_2, _d;\n\n    relationship[mKey] = {\n      indexes: [],\n      relationTypes: []\n    };\n    keys[mKey] = {};\n    var model = namespace.models[mKey];\n    Object.keys(model.fields).forEach(function (attr) {\n      var fieldAttribute = model.fields[attr];\n\n      if (typeof fieldAttribute.type === 'object' && 'model' in fieldAttribute.type) {\n        var connectionType = fieldAttribute.association.connectionType;\n        relationship[mKey].relationTypes.push({\n          fieldName: fieldAttribute.name,\n          modelName: fieldAttribute.type.model,\n          relationType: connectionType,\n          targetName: fieldAttribute.association['targetName'],\n          associatedWith: fieldAttribute.association['associatedWith']\n        });\n\n        if (connectionType === 'BELONGS_TO') {\n          relationship[mKey].indexes.push(fieldAttribute.association['targetName']);\n        }\n      }\n    });\n\n    if (model.attributes) {\n      keys[mKey].compositeKeys = processCompositeKeys(model.attributes);\n\n      try {\n        for (var _e = __values(model.attributes), _f = _e.next(); !_f.done; _f = _e.next()) {\n          var attribute = _f.value;\n\n          if (!isModelAttributeKey(attribute)) {\n            continue;\n          }\n\n          if (isModelAttributePrimaryKey(attribute)) {\n            keys[mKey].primaryKey = attribute.properties.fields;\n          }\n\n          var fields = attribute.properties.fields;\n\n          try {\n            for (var fields_1 = (e_2 = void 0, __values(fields)), fields_1_1 = fields_1.next(); !fields_1_1.done; fields_1_1 = fields_1.next()) {\n              var field = fields_1_1.value; // only add index if it hasn't already been added\n\n              var exists = relationship[mKey].indexes.includes(field);\n\n              if (!exists) {\n                relationship[mKey].indexes.push(field);\n              }\n            }\n          } catch (e_2_1) {\n            e_2 = {\n              error: e_2_1\n            };\n          } finally {\n            try {\n              if (fields_1_1 && !fields_1_1.done && (_d = fields_1.return)) _d.call(fields_1);\n            } finally {\n              if (e_2) throw e_2.error;\n            }\n          }\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (_f && !_f.done && (_c = _e.return)) _c.call(_e);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n    }\n  });\n  return [relationship, keys];\n};\nvar topologicallySortedModels = new WeakMap();\nexport var traverseModel = function (srcModelName, instance, namespace, modelInstanceCreator, getModelConstructorByModelName) {\n  var relationships = namespace.relationships;\n  var modelConstructor = getModelConstructorByModelName(namespace.name, srcModelName);\n  var relation = relationships[srcModelName];\n  var result = [];\n  var newInstance = modelConstructor.copyOf(instance, function (draftInstance) {\n    relation.relationTypes.forEach(function (rItem) {\n      var modelConstructor = getModelConstructorByModelName(namespace.name, rItem.modelName);\n\n      switch (rItem.relationType) {\n        case 'HAS_ONE':\n          if (instance[rItem.fieldName]) {\n            var modelInstance = void 0;\n\n            try {\n              modelInstance = modelInstanceCreator(modelConstructor, instance[rItem.fieldName]);\n            } catch (error) {\n              // Do nothing\n              console.log(error);\n            }\n\n            result.push({\n              modelName: rItem.modelName,\n              item: instance[rItem.fieldName],\n              instance: modelInstance\n            }); // targetName will be defined for Has One if feature flag\n            // https://docs.amplify.aws/cli/reference/feature-flags/#useAppsyncModelgenPlugin\n            // is true (default as of 5/7/21)\n            // Making this conditional for backward-compatibility\n\n            if (rItem.targetName) {\n              draftInstance[rItem.targetName] = draftInstance[rItem.fieldName].id;\n              delete draftInstance[rItem.fieldName];\n            } else {\n              draftInstance[rItem.fieldName] = draftInstance[rItem.fieldName].id;\n            }\n          }\n\n          break;\n\n        case 'BELONGS_TO':\n          if (instance[rItem.fieldName]) {\n            var modelInstance = void 0;\n\n            try {\n              modelInstance = modelInstanceCreator(modelConstructor, instance[rItem.fieldName]);\n            } catch (error) {// Do nothing\n            }\n\n            var isDeleted = draftInstance[rItem.fieldName]._deleted;\n\n            if (!isDeleted) {\n              result.push({\n                modelName: rItem.modelName,\n                item: instance[rItem.fieldName],\n                instance: modelInstance\n              });\n            }\n          }\n\n          if (draftInstance[rItem.fieldName]) {\n            draftInstance[rItem.targetName] = draftInstance[rItem.fieldName].id;\n            delete draftInstance[rItem.fieldName];\n          }\n\n          break;\n\n        case 'HAS_MANY':\n          // Intentionally blank\n          break;\n\n        default:\n          exhaustiveCheck(rItem.relationType);\n          break;\n      }\n    });\n  });\n  result.unshift({\n    modelName: srcModelName,\n    item: newInstance,\n    instance: newInstance\n  });\n\n  if (!topologicallySortedModels.has(namespace)) {\n    topologicallySortedModels.set(namespace, Array.from(namespace.modelTopologicalOrdering.keys()));\n  }\n\n  var sortedModels = topologicallySortedModels.get(namespace);\n  result.sort(function (a, b) {\n    return sortedModels.indexOf(a.modelName) - sortedModels.indexOf(b.modelName);\n  });\n  return result;\n};\nexport var getIndex = function (rel, src) {\n  var index = '';\n  rel.some(function (relItem) {\n    if (relItem.modelName === src) {\n      index = relItem.targetName;\n    }\n  });\n  return index;\n};\nexport var getIndexFromAssociation = function (indexes, src) {\n  var index = indexes.find(function (idx) {\n    return idx === src;\n  });\n  return index;\n};\nvar privateModeCheckResult;\nexport var isPrivateMode = function () {\n  return new Promise(function (resolve) {\n    var dbname = uuid();\n    var db;\n\n    var isPrivate = function () {\n      privateModeCheckResult = false;\n      resolve(true);\n    };\n\n    var isNotPrivate = function () {\n      return __awaiter(void 0, void 0, void 0, function () {\n        return __generator(this, function (_c) {\n          switch (_c.label) {\n            case 0:\n              if (!(db && db.result && typeof db.result.close === 'function')) return [3\n              /*break*/\n              , 2];\n              return [4\n              /*yield*/\n              , db.result.close()];\n\n            case 1:\n              _c.sent();\n\n              _c.label = 2;\n\n            case 2:\n              return [4\n              /*yield*/\n              , indexedDB.deleteDatabase(dbname)];\n\n            case 3:\n              _c.sent();\n\n              privateModeCheckResult = true;\n              return [2\n              /*return*/\n              , resolve(false)];\n          }\n        });\n      });\n    };\n\n    if (privateModeCheckResult === true) {\n      return isNotPrivate();\n    }\n\n    if (privateModeCheckResult === false) {\n      return isPrivate();\n    }\n\n    if (indexedDB === null) return isPrivate();\n    db = indexedDB.open(dbname);\n    db.onerror = isPrivate;\n    db.onsuccess = isNotPrivate;\n  });\n};\n\nvar randomBytes = function (nBytes) {\n  return Buffer.from(new WordArray().random(nBytes).toString(), 'hex');\n};\n\nvar prng = function () {\n  return randomBytes(1).readUInt8(0) / 0xff;\n};\n\nexport function monotonicUlidFactory(seed) {\n  var ulid = monotonicFactory(prng);\n  return function () {\n    return ulid(seed);\n  };\n}\n/**\n * Uses performance.now() if available, otherwise, uses Date.now() (e.g. react native without a polyfill)\n *\n * The values returned by performance.now() always increase at a constant rate,\n * independent of the system clock (which might be adjusted manually or skewed\n * by software like NTP).\n *\n * Otherwise, performance.timing.navigationStart + performance.now() will be\n * approximately equal to Date.now()\n *\n * See: https://developer.mozilla.org/en-US/docs/Web/API/Performance/now#Example\n */\n\nexport function getNow() {\n  if (typeof performance !== 'undefined' && performance && typeof performance.now === 'function') {\n    return performance.now() | 0; // convert to integer\n  } else {\n    return Date.now();\n  }\n}\nexport function sortCompareFunction(sortPredicates) {\n  return function compareFunction(a, b) {\n    var e_3, _c;\n\n    try {\n      // enable multi-field sort by iterating over predicates until\n      // a comparison returns -1 or 1\n      for (var sortPredicates_1 = __values(sortPredicates), sortPredicates_1_1 = sortPredicates_1.next(); !sortPredicates_1_1.done; sortPredicates_1_1 = sortPredicates_1.next()) {\n        var predicate = sortPredicates_1_1.value;\n        var field = predicate.field,\n            sortDirection = predicate.sortDirection; // reverse result when direction is descending\n\n        var sortMultiplier = sortDirection === SortDirection.ASCENDING ? 1 : -1;\n\n        if (a[field] < b[field]) {\n          return -1 * sortMultiplier;\n        }\n\n        if (a[field] > b[field]) {\n          return 1 * sortMultiplier;\n        }\n      }\n    } catch (e_3_1) {\n      e_3 = {\n        error: e_3_1\n      };\n    } finally {\n      try {\n        if (sortPredicates_1_1 && !sortPredicates_1_1.done && (_c = sortPredicates_1.return)) _c.call(sortPredicates_1);\n      } finally {\n        if (e_3) throw e_3.error;\n      }\n    }\n\n    return 0;\n  };\n} // deep compare any 2 values\n// primitives or object types (including arrays, Sets, and Maps)\n// returns true if equal by value\n// if nullish is true, treat undefined and null values as equal\n// to normalize for GQL response values for undefined fields\n\nexport function valuesEqual(valA, valB, nullish) {\n  var e_4, _c;\n\n  if (nullish === void 0) {\n    nullish = false;\n  }\n\n  var a = valA;\n  var b = valB;\n\n  var nullishCompare = function (_a, _b) {\n    return (_a === undefined || _a === null) && (_b === undefined || _b === null);\n  }; // if one of the values is a primitive and the other is an object\n\n\n  if (a instanceof Object && !(b instanceof Object) || !(a instanceof Object) && b instanceof Object) {\n    return false;\n  } // compare primitive types\n\n\n  if (!(a instanceof Object)) {\n    if (nullish && nullishCompare(a, b)) {\n      return true;\n    }\n\n    return a === b;\n  } // make sure object types match\n\n\n  if (Array.isArray(a) && !Array.isArray(b) || Array.isArray(b) && !Array.isArray(a)) {\n    return false;\n  }\n\n  if (a instanceof Set && b instanceof Set) {\n    a = __spread(a);\n    b = __spread(b);\n  }\n\n  if (a instanceof Map && b instanceof Map) {\n    a = Object.fromEntries(a);\n    b = Object.fromEntries(b);\n  }\n\n  var aKeys = Object.keys(a);\n  var bKeys = Object.keys(b); // last condition is to ensure that [] !== [null] even if nullish. However [undefined] === [null] when nullish\n\n  if (aKeys.length !== bKeys.length && (!nullish || Array.isArray(a))) {\n    return false;\n  } // iterate through the longer set of keys\n  // e.g., for a nullish comparison of a={ a: 1 } and b={ a: 1, b: null }\n  // we want to iterate through bKeys\n\n\n  var keys = aKeys.length >= bKeys.length ? aKeys : bKeys;\n\n  try {\n    for (var keys_1 = __values(keys), keys_1_1 = keys_1.next(); !keys_1_1.done; keys_1_1 = keys_1.next()) {\n      var key = keys_1_1.value;\n      var aVal = a[key];\n      var bVal = b[key];\n\n      if (!valuesEqual(aVal, bVal, nullish)) {\n        return false;\n      }\n    }\n  } catch (e_4_1) {\n    e_4 = {\n      error: e_4_1\n    };\n  } finally {\n    try {\n      if (keys_1_1 && !keys_1_1.done && (_c = keys_1.return)) _c.call(keys_1);\n    } finally {\n      if (e_4) throw e_4.error;\n    }\n  }\n\n  return true;\n}\nexport var isAWSDate = function (val) {\n  return !!/^\\d{4}-\\d{2}-\\d{2}(Z|[+-]\\d{2}:\\d{2}($|:\\d{2}))?$/.exec(val);\n};\nexport var isAWSTime = function (val) {\n  return !!/^\\d{2}:\\d{2}(:\\d{2}(.\\d+)?)?(Z|[+-]\\d{2}:\\d{2}($|:\\d{2}))?$/.exec(val);\n};\nexport var isAWSDateTime = function (val) {\n  return !!/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}(:\\d{2}(.\\d+)?)?(Z|[+-]\\d{2}:\\d{2}($|:\\d{2}))?$/.exec(val);\n};\nexport var isAWSTimestamp = function (val) {\n  return !!/^\\d+$/.exec(String(val));\n};\nexport var isAWSEmail = function (val) {\n  return !!/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.exec(val);\n};\nexport var isAWSJSON = function (val) {\n  try {\n    JSON.parse(val);\n    return true;\n  } catch (_c) {\n    return false;\n  }\n};\nexport var isAWSURL = function (val) {\n  try {\n    return !!new URL(val);\n  } catch (_c) {\n    return false;\n  }\n};\nexport var isAWSPhone = function (val) {\n  return !!/^\\+?\\d[\\d\\s-]+$/.exec(val);\n};\nexport var isAWSIPAddress = function (val) {\n  return !!/((^((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))$)|(^((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(%.+)?$))$/.exec(val);\n};\n\nvar DeferredPromise =\n/** @class */\nfunction () {\n  function DeferredPromise() {\n    var self = this;\n    this.promise = new Promise(function (resolve, reject) {\n      self.resolve = resolve;\n      self.reject = reject;\n    });\n  }\n\n  return DeferredPromise;\n}();\n\nexport { DeferredPromise };\n\nvar DeferredCallbackResolver =\n/** @class */\nfunction () {\n  function DeferredCallbackResolver(options) {\n    this.limitPromise = new DeferredPromise();\n    this.raceInFlight = false;\n\n    this.callback = function () {};\n\n    this.defaultErrorHandler = function (msg) {\n      if (msg === void 0) {\n        msg = 'DeferredCallbackResolver error';\n      }\n\n      throw new Error(msg);\n    };\n\n    this.callback = options.callback;\n    this.errorHandler = options.errorHandler || this.defaultErrorHandler;\n    this.maxInterval = options.maxInterval || 2000;\n  }\n\n  DeferredCallbackResolver.prototype.startTimer = function () {\n    var _this = this;\n\n    this.timerPromise = new Promise(function (resolve, reject) {\n      _this.timer = setTimeout(function () {\n        resolve(LimitTimerRaceResolvedValues.TIMER);\n      }, _this.maxInterval);\n    });\n  };\n\n  DeferredCallbackResolver.prototype.racePromises = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var winner, err_1;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            _c.trys.push([0, 2, 3, 4]);\n\n            this.raceInFlight = true;\n            this.startTimer();\n            return [4\n            /*yield*/\n            , Promise.race([this.timerPromise, this.limitPromise.promise])];\n\n          case 1:\n            winner = _c.sent();\n            this.callback();\n            return [3\n            /*break*/\n            , 4];\n\n          case 2:\n            err_1 = _c.sent();\n            this.errorHandler(err_1);\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            // reset for the next race\n            this.clear();\n            this.raceInFlight = false;\n            this.limitPromise = new DeferredPromise();\n            return [2\n            /*return*/\n            , winner];\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  DeferredCallbackResolver.prototype.start = function () {\n    if (!this.raceInFlight) this.racePromises();\n  };\n\n  DeferredCallbackResolver.prototype.clear = function () {\n    clearTimeout(this.timer);\n  };\n\n  DeferredCallbackResolver.prototype.resolve = function () {\n    this.limitPromise.resolve(LimitTimerRaceResolvedValues.LIMIT);\n  };\n\n  return DeferredCallbackResolver;\n}();\n\nexport { DeferredCallbackResolver };\n/**\n * merge two sets of patches created by immer produce.\n * newPatches take precedent over oldPatches for patches modifying the same path.\n * In the case many consecutive pathces are merged the original model should\n * always be the root model.\n *\n * Example:\n * A -> B, patches1\n * B -> C, patches2\n *\n * mergePatches(A, patches1, patches2) to get patches for A -> C\n *\n * @param originalSource the original Model the patches should be applied to\n * @param oldPatches immer produce patch list\n * @param newPatches immer produce patch list (will take precedence)\n * @return merged patches\n */\n\nexport function mergePatches(originalSource, oldPatches, newPatches) {\n  var patchesToMerge = oldPatches.concat(newPatches);\n  var patches;\n  produce(originalSource, function (draft) {\n    applyPatches(draft, patchesToMerge);\n  }, function (p) {\n    patches = p;\n  });\n  return patches;\n}","map":{"version":3,"mappings":"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","names":["Buffer","monotonicFactory","v4","uuid","produce","applyPatches","isPredicateGroup","isPredicateObj","SortDirection","isModelAttributeKey","isModelAttributePrimaryKey","isModelAttributeCompositeKey","LimitTimerRaceResolvedValues","WordArray","NAMESPACES","DATASTORE","USER","SYNC","STORAGE","USER_AGENT_SUFFIX_DATASTORE","exhaustiveCheck","obj","throwOnError","Error","isNullOrUndefined","val","undefined","validatePredicate","model","groupType","predicatesOrGroups","filterType","isNegation","length","result","predicateOrGroup","operator","operand","value","field","validatePredicateField","predicates","type","min","max","startsWith","indexOf","isModelConstructor","copyOf","nonModelClasses","WeakSet","registerNonModelClass","clazz","add","isNonModelConstructor","has","processCompositeKeys","attributes","extractCompositeSortKey","_c","_d","sortKeyFields","compositeKeyFields","filter","map","combineIntersecting","fields","reduce","combined","sortKeyFieldsSet","Set","push","intersectingSetIdx","findIndex","__spread","existingSet","some","f","union","initial","establishRelationAndKeys","namespace","relationship","keys","Object","models","forEach","mKey","indexes","relationTypes","attr","fieldAttribute","connectionType","association","fieldName","name","modelName","relationType","targetName","associatedWith","compositeKeys","_f","attribute","primaryKey","properties","fields_1_1","exists","includes","topologicallySortedModels","WeakMap","traverseModel","srcModelName","instance","modelInstanceCreator","getModelConstructorByModelName","relationships","modelConstructor","relation","newInstance","rItem","modelInstance","error","console","log","item","draftInstance","id","isDeleted","_deleted","unshift","set","Array","from","modelTopologicalOrdering","sortedModels","get","sort","a","b","getIndex","rel","src","index","relItem","getIndexFromAssociation","find","privateModeCheckResult","isPrivateMode","Promise","dbname","db","isPrivate","resolve","isNotPrivate","close","indexedDB","deleteDatabase","open","onerror","onsuccess","randomBytes","nBytes","random","toString","prng","readUInt8","monotonicUlidFactory","seed","ulid","getNow","performance","now","Date","sortCompareFunction","sortPredicates","compareFunction","sortPredicates_1_1","predicate","sortDirection","sortMultiplier","ASCENDING","valuesEqual","valA","valB","nullish","nullishCompare","_a","_b","isArray","Map","fromEntries","aKeys","bKeys","keys_1_1","key","aVal","bVal","isAWSDate","exec","isAWSTime","isAWSDateTime","isAWSTimestamp","String","isAWSEmail","isAWSJSON","JSON","parse","isAWSURL","URL","isAWSPhone","isAWSIPAddress","self","promise","reject","options","DeferredPromise","msg","callback","errorHandler","defaultErrorHandler","maxInterval","DeferredCallbackResolver","timerPromise","_this","timer","setTimeout","TIMER","raceInFlight","startTimer","race","limitPromise","winner","err_1","clear","racePromises","clearTimeout","LIMIT","mergePatches","originalSource","oldPatches","newPatches","patchesToMerge","concat","patches","draft","p"],"sources":["C:\\Users\\lmore\\OneDrive\\Documents\\GitHub\\JacksOfAllTrades\\jacksofalltrades\\node_modules\\@aws-amplify\\datastore\\src\\util.ts"],"sourcesContent":["import { Buffer } from 'buffer';\nimport { monotonicFactory, ULID } from 'ulid';\nimport { v4 as uuid } from 'uuid';\nimport { produce, applyPatches, Patch } from 'immer';\nimport { ModelInstanceCreator } from './datastore/datastore';\nimport {\n\tAllOperators,\n\tisPredicateGroup,\n\tisPredicateObj,\n\tModelInstanceMetadata,\n\tPersistentModel,\n\tPersistentModelConstructor,\n\tPredicateGroups,\n\tPredicateObject,\n\tPredicatesGroup,\n\tRelationshipType,\n\tRelationType,\n\tModelKeys,\n\tModelAttributes,\n\tSchemaNamespace,\n\tSortPredicatesGroup,\n\tSortDirection,\n\tisModelAttributeKey,\n\tisModelAttributePrimaryKey,\n\tisModelAttributeCompositeKey,\n\tNonModelTypeConstructor,\n\tDeferredCallbackResolverOptions,\n\tLimitTimerRaceResolvedValues,\n} from './types';\nimport { WordArray } from 'amazon-cognito-identity-js';\n\nexport enum NAMESPACES {\n\tDATASTORE = 'datastore',\n\tUSER = 'user',\n\tSYNC = 'sync',\n\tSTORAGE = 'storage',\n}\n\nconst DATASTORE = NAMESPACES.DATASTORE;\nconst USER = NAMESPACES.USER;\nconst SYNC = NAMESPACES.SYNC;\nconst STORAGE = NAMESPACES.STORAGE;\n\nexport { USER, SYNC, STORAGE, DATASTORE };\nexport const USER_AGENT_SUFFIX_DATASTORE = '/DataStore';\n\nexport const exhaustiveCheck = (obj: never, throwOnError: boolean = true) => {\n\tif (throwOnError) {\n\t\tthrow new Error(`Invalid ${obj}`);\n\t}\n};\n\nexport const isNullOrUndefined = (val: any): boolean => {\n\treturn typeof val === 'undefined' || val === undefined || val === null;\n};\n\nexport const validatePredicate = <T extends PersistentModel>(\n\tmodel: T,\n\tgroupType: keyof PredicateGroups<T>,\n\tpredicatesOrGroups: (PredicateObject<T> | PredicatesGroup<T>)[]\n) => {\n\tlet filterType: keyof Pick<any[], 'every' | 'some'>;\n\tlet isNegation = false;\n\n\tif (predicatesOrGroups.length === 0) {\n\t\treturn true;\n\t}\n\n\tswitch (groupType) {\n\t\tcase 'not':\n\t\t\tfilterType = 'every';\n\t\t\tisNegation = true;\n\t\t\tbreak;\n\t\tcase 'and':\n\t\t\tfilterType = 'every';\n\t\t\tbreak;\n\t\tcase 'or':\n\t\t\tfilterType = 'some';\n\t\t\tbreak;\n\t\tdefault:\n\t\t\texhaustiveCheck(groupType);\n\t}\n\n\tconst result: boolean = predicatesOrGroups[filterType](predicateOrGroup => {\n\t\tif (isPredicateObj(predicateOrGroup)) {\n\t\t\tconst { field, operator, operand } = predicateOrGroup;\n\t\t\tconst value = model[field];\n\n\t\t\treturn validatePredicateField(value, operator, operand);\n\t\t}\n\n\t\tif (isPredicateGroup(predicateOrGroup)) {\n\t\t\tconst { type, predicates } = predicateOrGroup;\n\t\t\treturn validatePredicate(model, type, predicates);\n\t\t}\n\n\t\tthrow new Error('Not a predicate or group');\n\t});\n\n\treturn isNegation ? !result : result;\n};\n\nexport const validatePredicateField = <T>(\n\tvalue: T,\n\toperator: keyof AllOperators,\n\toperand: T | [T, T]\n) => {\n\tswitch (operator) {\n\t\tcase 'ne':\n\t\t\treturn value !== operand;\n\t\tcase 'eq':\n\t\t\treturn value === operand;\n\t\tcase 'le':\n\t\t\treturn value <= operand;\n\t\tcase 'lt':\n\t\t\treturn value < operand;\n\t\tcase 'ge':\n\t\t\treturn value >= operand;\n\t\tcase 'gt':\n\t\t\treturn value > operand;\n\t\tcase 'between':\n\t\t\tconst [min, max] = <[T, T]>operand;\n\t\t\treturn value >= min && value <= max;\n\t\tcase 'beginsWith':\n\t\t\treturn (\n\t\t\t\t!isNullOrUndefined(value) &&\n\t\t\t\t(<string>(<unknown>value)).startsWith(<string>(<unknown>operand))\n\t\t\t);\n\t\tcase 'contains':\n\t\t\treturn (\n\t\t\t\t!isNullOrUndefined(value) &&\n\t\t\t\t(<string>(<unknown>value)).indexOf(<string>(<unknown>operand)) > -1\n\t\t\t);\n\t\tcase 'notContains':\n\t\t\treturn (\n\t\t\t\tisNullOrUndefined(value) ||\n\t\t\t\t(<string>(<unknown>value)).indexOf(<string>(<unknown>operand)) === -1\n\t\t\t);\n\t\tdefault:\n\t\t\texhaustiveCheck(operator, false);\n\t\t\treturn false;\n\t}\n};\n\nexport const isModelConstructor = <T extends PersistentModel>(\n\tobj: any\n): obj is PersistentModelConstructor<T> => {\n\treturn (\n\t\tobj && typeof (<PersistentModelConstructor<T>>obj).copyOf === 'function'\n\t);\n};\n\nconst nonModelClasses = new WeakSet<NonModelTypeConstructor<any>>();\n\nexport function registerNonModelClass(clazz: NonModelTypeConstructor<any>) {\n\tnonModelClasses.add(clazz);\n}\n\nexport const isNonModelConstructor = (\n\tobj: any\n): obj is NonModelTypeConstructor<any> => {\n\treturn nonModelClasses.has(obj);\n};\n\n/*\n  When we have GSI(s) with composite sort keys defined on a model\n\tThere are some very particular rules regarding which fields must be included in the update mutation input\n\tThe field selection becomes more complex as the number of GSIs with composite sort keys grows\n\n\tTo summarize: any time we update a field that is part of the composite sort key of a GSI, we must include:\n\t 1. all of the other fields in that composite sort key\n\t 2. all of the fields from any other composite sort key that intersect with the fields from 1.\n\n\t E.g.,\n\t Model @model\n\t\t@key(name: 'key1' fields: ['hk', 'a', 'b', 'c'])\n\t\t@key(name: 'key2' fields: ['hk', 'a', 'b', 'd'])\n\t\t@key(name: 'key3' fields: ['hk', 'x', 'y', 'z'])\n\n\tModel.a is updated => include ['a', 'b', 'c', 'd']\n\tModel.c is updated => include ['a', 'b', 'c', 'd']\n\tModel.d is updated => include ['a', 'b', 'c', 'd']\n\tModel.x is updated => include ['x', 'y', 'z']\n\n\tThis function accepts a model's attributes and returns grouped sets of composite key fields\n\tUsing our example Model above, the function will return:\n\t[\n\t\tSet('a', 'b', 'c', 'd'),\n\t\tSet('x', 'y', 'z'),\n\t]\n\n\tThis gives us the opportunity to correctly include the required fields for composite keys\n\tWhen crafting the mutation input in Storage.getUpdateMutationInput\n\n\tSee 'processCompositeKeys' test in util.test.ts for more examples\n*/\nexport const processCompositeKeys = (\n\tattributes: ModelAttributes\n): Set<string>[] => {\n\tconst extractCompositeSortKey = ({\n\t\tproperties: {\n\t\t\t// ignore the HK (fields[0]) we only need to include the composite sort key fields[1...n]\n\t\t\tfields: [, ...sortKeyFields],\n\t\t},\n\t}) => sortKeyFields;\n\n\tconst compositeKeyFields = attributes\n\t\t.filter(isModelAttributeCompositeKey)\n\t\t.map(extractCompositeSortKey);\n\n\t/*\n\t\tif 2 sets of fields have any intersecting fields => combine them into 1 union set\n\t\te.g., ['a', 'b', 'c'] and ['a', 'b', 'd'] => ['a', 'b', 'c', 'd']\n\t*/\n\tconst combineIntersecting = (fields): Set<string>[] =>\n\t\tfields.reduce((combined, sortKeyFields) => {\n\t\t\tconst sortKeyFieldsSet = new Set(sortKeyFields);\n\n\t\t\tif (combined.length === 0) {\n\t\t\t\tcombined.push(sortKeyFieldsSet);\n\t\t\t\treturn combined;\n\t\t\t}\n\n\t\t\t// does the current set share values with another set we've already added to `combined`?\n\t\t\tconst intersectingSetIdx = combined.findIndex(existingSet => {\n\t\t\t\treturn [...existingSet].some(f => sortKeyFieldsSet.has(f));\n\t\t\t});\n\n\t\t\tif (intersectingSetIdx > -1) {\n\t\t\t\tconst union = new Set([\n\t\t\t\t\t...combined[intersectingSetIdx],\n\t\t\t\t\t...sortKeyFieldsSet,\n\t\t\t\t]);\n\t\t\t\t// combine the current set with the intersecting set we found above\n\t\t\t\tcombined[intersectingSetIdx] = union;\n\t\t\t} else {\n\t\t\t\t// none of the sets in `combined` have intersecting values with the current set\n\t\t\t\tcombined.push(sortKeyFieldsSet);\n\t\t\t}\n\n\t\t\treturn combined;\n\t\t}, []);\n\n\tconst initial = combineIntersecting(compositeKeyFields);\n\t// a single pass pay not be enough to correctly combine all the fields\n\t// call the function once more to get a final merged list of sets\n\tconst combined = combineIntersecting(initial);\n\n\treturn combined;\n};\n\nexport const establishRelationAndKeys = (\n\tnamespace: SchemaNamespace\n): [RelationshipType, ModelKeys] => {\n\tconst relationship: RelationshipType = {};\n\tconst keys: ModelKeys = {};\n\n\tObject.keys(namespace.models).forEach((mKey: string) => {\n\t\trelationship[mKey] = { indexes: [], relationTypes: [] };\n\t\tkeys[mKey] = {};\n\n\t\tconst model = namespace.models[mKey];\n\t\tObject.keys(model.fields).forEach((attr: string) => {\n\t\t\tconst fieldAttribute = model.fields[attr];\n\t\t\tif (\n\t\t\t\ttypeof fieldAttribute.type === 'object' &&\n\t\t\t\t'model' in fieldAttribute.type\n\t\t\t) {\n\t\t\t\tconst connectionType = fieldAttribute.association.connectionType;\n\t\t\t\trelationship[mKey].relationTypes.push({\n\t\t\t\t\tfieldName: fieldAttribute.name,\n\t\t\t\t\tmodelName: fieldAttribute.type.model,\n\t\t\t\t\trelationType: connectionType,\n\t\t\t\t\ttargetName: fieldAttribute.association['targetName'],\n\t\t\t\t\tassociatedWith: fieldAttribute.association['associatedWith'],\n\t\t\t\t});\n\n\t\t\t\tif (connectionType === 'BELONGS_TO') {\n\t\t\t\t\trelationship[mKey].indexes.push(\n\t\t\t\t\t\tfieldAttribute.association['targetName']\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tif (model.attributes) {\n\t\t\tkeys[mKey].compositeKeys = processCompositeKeys(model.attributes);\n\n\t\t\tfor (const attribute of model.attributes) {\n\t\t\t\tif (!isModelAttributeKey(attribute)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (isModelAttributePrimaryKey(attribute)) {\n\t\t\t\t\tkeys[mKey].primaryKey = attribute.properties.fields;\n\t\t\t\t}\n\n\t\t\t\tconst { fields } = attribute.properties;\n\t\t\t\tfor (const field of fields) {\n\t\t\t\t\t// only add index if it hasn't already been added\n\t\t\t\t\tconst exists = relationship[mKey].indexes.includes(field);\n\t\t\t\t\tif (!exists) {\n\t\t\t\t\t\trelationship[mKey].indexes.push(field);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\treturn [relationship, keys];\n};\n\nconst topologicallySortedModels = new WeakMap<SchemaNamespace, string[]>();\n\nexport const traverseModel = <T extends PersistentModel>(\n\tsrcModelName: string,\n\tinstance: T,\n\tnamespace: SchemaNamespace,\n\tmodelInstanceCreator: ModelInstanceCreator,\n\tgetModelConstructorByModelName: (\n\t\tnamsespaceName: string,\n\t\tmodelName: string\n\t) => PersistentModelConstructor<any>\n) => {\n\tconst relationships = namespace.relationships;\n\tconst modelConstructor = getModelConstructorByModelName(\n\t\tnamespace.name,\n\t\tsrcModelName\n\t);\n\n\tconst relation = relationships[srcModelName];\n\tconst result: {\n\t\tmodelName: string;\n\t\titem: T;\n\t\tinstance: T;\n\t}[] = [];\n\n\tconst newInstance = modelConstructor.copyOf(instance, draftInstance => {\n\t\trelation.relationTypes.forEach((rItem: RelationType) => {\n\t\t\tconst modelConstructor = getModelConstructorByModelName(\n\t\t\t\tnamespace.name,\n\t\t\t\trItem.modelName\n\t\t\t);\n\n\t\t\tswitch (rItem.relationType) {\n\t\t\t\tcase 'HAS_ONE':\n\t\t\t\t\tif (instance[rItem.fieldName]) {\n\t\t\t\t\t\tlet modelInstance: T;\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tmodelInstance = modelInstanceCreator(\n\t\t\t\t\t\t\t\tmodelConstructor,\n\t\t\t\t\t\t\t\tinstance[rItem.fieldName]\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t\t// Do nothing\n\t\t\t\t\t\t\tconsole.log(error);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresult.push({\n\t\t\t\t\t\t\tmodelName: rItem.modelName,\n\t\t\t\t\t\t\titem: instance[rItem.fieldName],\n\t\t\t\t\t\t\tinstance: modelInstance,\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\t// targetName will be defined for Has One if feature flag\n\t\t\t\t\t\t// https://docs.amplify.aws/cli/reference/feature-flags/#useAppsyncModelgenPlugin\n\t\t\t\t\t\t// is true (default as of 5/7/21)\n\t\t\t\t\t\t// Making this conditional for backward-compatibility\n\t\t\t\t\t\tif (rItem.targetName) {\n\t\t\t\t\t\t\t(<any>draftInstance)[rItem.targetName] = (<PersistentModel>(\n\t\t\t\t\t\t\t\tdraftInstance[rItem.fieldName]\n\t\t\t\t\t\t\t)).id;\n\t\t\t\t\t\t\tdelete draftInstance[rItem.fieldName];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t(<any>draftInstance)[rItem.fieldName] = (<PersistentModel>(\n\t\t\t\t\t\t\t\tdraftInstance[rItem.fieldName]\n\t\t\t\t\t\t\t)).id;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'BELONGS_TO':\n\t\t\t\t\tif (instance[rItem.fieldName]) {\n\t\t\t\t\t\tlet modelInstance: T;\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tmodelInstance = modelInstanceCreator(\n\t\t\t\t\t\t\t\tmodelConstructor,\n\t\t\t\t\t\t\t\tinstance[rItem.fieldName]\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t\t// Do nothing\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst isDeleted = (<ModelInstanceMetadata>(\n\t\t\t\t\t\t\tdraftInstance[rItem.fieldName]\n\t\t\t\t\t\t))._deleted;\n\n\t\t\t\t\t\tif (!isDeleted) {\n\t\t\t\t\t\t\tresult.push({\n\t\t\t\t\t\t\t\tmodelName: rItem.modelName,\n\t\t\t\t\t\t\t\titem: instance[rItem.fieldName],\n\t\t\t\t\t\t\t\tinstance: modelInstance,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (draftInstance[rItem.fieldName]) {\n\t\t\t\t\t\t(<any>draftInstance)[rItem.targetName] = (<PersistentModel>(\n\t\t\t\t\t\t\tdraftInstance[rItem.fieldName]\n\t\t\t\t\t\t)).id;\n\t\t\t\t\t\tdelete draftInstance[rItem.fieldName];\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'HAS_MANY':\n\t\t\t\t\t// Intentionally blank\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\texhaustiveCheck(rItem.relationType);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t});\n\t});\n\n\tresult.unshift({\n\t\tmodelName: srcModelName,\n\t\titem: newInstance,\n\t\tinstance: newInstance,\n\t});\n\n\tif (!topologicallySortedModels.has(namespace)) {\n\t\ttopologicallySortedModels.set(\n\t\t\tnamespace,\n\t\t\tArray.from(namespace.modelTopologicalOrdering.keys())\n\t\t);\n\t}\n\n\tconst sortedModels = topologicallySortedModels.get(namespace);\n\n\tresult.sort((a, b) => {\n\t\treturn (\n\t\t\tsortedModels.indexOf(a.modelName) - sortedModels.indexOf(b.modelName)\n\t\t);\n\t});\n\n\treturn result;\n};\n\nexport const getIndex = (rel: RelationType[], src: string): string => {\n\tlet index = '';\n\trel.some((relItem: RelationType) => {\n\t\tif (relItem.modelName === src) {\n\t\t\tindex = relItem.targetName;\n\t\t}\n\t});\n\treturn index;\n};\n\nexport const getIndexFromAssociation = (\n\tindexes: string[],\n\tsrc: string\n): string => {\n\tconst index = indexes.find(idx => idx === src);\n\treturn index;\n};\n\nlet privateModeCheckResult;\n\nexport const isPrivateMode = () => {\n\treturn new Promise(resolve => {\n\t\tconst dbname = uuid();\n\t\tlet db;\n\n\t\tconst isPrivate = () => {\n\t\t\tprivateModeCheckResult = false;\n\n\t\t\tresolve(true);\n\t\t};\n\n\t\tconst isNotPrivate = async () => {\n\t\t\tif (db && db.result && typeof db.result.close === 'function') {\n\t\t\t\tawait db.result.close();\n\t\t\t}\n\n\t\t\tawait indexedDB.deleteDatabase(dbname);\n\n\t\t\tprivateModeCheckResult = true;\n\n\t\t\treturn resolve(false);\n\t\t};\n\n\t\tif (privateModeCheckResult === true) {\n\t\t\treturn isNotPrivate();\n\t\t}\n\n\t\tif (privateModeCheckResult === false) {\n\t\t\treturn isPrivate();\n\t\t}\n\n\t\tif (indexedDB === null) return isPrivate();\n\n\t\tdb = indexedDB.open(dbname);\n\t\tdb.onerror = isPrivate;\n\t\tdb.onsuccess = isNotPrivate;\n\t});\n};\n\nconst randomBytes = (nBytes: number): Buffer => {\n\treturn Buffer.from(new WordArray().random(nBytes).toString(), 'hex');\n};\nconst prng = () => randomBytes(1).readUInt8(0) / 0xff;\nexport function monotonicUlidFactory(seed?: number): ULID {\n\tconst ulid = monotonicFactory(prng);\n\n\treturn () => {\n\t\treturn ulid(seed);\n\t};\n}\n\n/**\n * Uses performance.now() if available, otherwise, uses Date.now() (e.g. react native without a polyfill)\n *\n * The values returned by performance.now() always increase at a constant rate,\n * independent of the system clock (which might be adjusted manually or skewed\n * by software like NTP).\n *\n * Otherwise, performance.timing.navigationStart + performance.now() will be\n * approximately equal to Date.now()\n *\n * See: https://developer.mozilla.org/en-US/docs/Web/API/Performance/now#Example\n */\nexport function getNow() {\n\tif (\n\t\ttypeof performance !== 'undefined' &&\n\t\tperformance &&\n\t\ttypeof performance.now === 'function'\n\t) {\n\t\treturn performance.now() | 0; // convert to integer\n\t} else {\n\t\treturn Date.now();\n\t}\n}\n\nexport function sortCompareFunction<T extends PersistentModel>(\n\tsortPredicates: SortPredicatesGroup<T>\n) {\n\treturn function compareFunction(a, b) {\n\t\t// enable multi-field sort by iterating over predicates until\n\t\t// a comparison returns -1 or 1\n\t\tfor (const predicate of sortPredicates) {\n\t\t\tconst { field, sortDirection } = predicate;\n\n\t\t\t// reverse result when direction is descending\n\t\t\tconst sortMultiplier = sortDirection === SortDirection.ASCENDING ? 1 : -1;\n\n\t\t\tif (a[field] < b[field]) {\n\t\t\t\treturn -1 * sortMultiplier;\n\t\t\t}\n\n\t\t\tif (a[field] > b[field]) {\n\t\t\t\treturn 1 * sortMultiplier;\n\t\t\t}\n\t\t}\n\n\t\treturn 0;\n\t};\n}\n\n// deep compare any 2 values\n// primitives or object types (including arrays, Sets, and Maps)\n// returns true if equal by value\n// if nullish is true, treat undefined and null values as equal\n// to normalize for GQL response values for undefined fields\nexport function valuesEqual(\n\tvalA: any,\n\tvalB: any,\n\tnullish: boolean = false\n): boolean {\n\tlet a = valA;\n\tlet b = valB;\n\n\tconst nullishCompare = (_a, _b) => {\n\t\treturn (\n\t\t\t(_a === undefined || _a === null) && (_b === undefined || _b === null)\n\t\t);\n\t};\n\n\t// if one of the values is a primitive and the other is an object\n\tif (\n\t\t(a instanceof Object && !(b instanceof Object)) ||\n\t\t(!(a instanceof Object) && b instanceof Object)\n\t) {\n\t\treturn false;\n\t}\n\n\t// compare primitive types\n\tif (!(a instanceof Object)) {\n\t\tif (nullish && nullishCompare(a, b)) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn a === b;\n\t}\n\n\t// make sure object types match\n\tif (\n\t\t(Array.isArray(a) && !Array.isArray(b)) ||\n\t\t(Array.isArray(b) && !Array.isArray(a))\n\t) {\n\t\treturn false;\n\t}\n\n\tif (a instanceof Set && b instanceof Set) {\n\t\ta = [...a];\n\t\tb = [...b];\n\t}\n\n\tif (a instanceof Map && b instanceof Map) {\n\t\ta = Object.fromEntries(a);\n\t\tb = Object.fromEntries(b);\n\t}\n\n\tconst aKeys = Object.keys(a);\n\tconst bKeys = Object.keys(b);\n\n\t// last condition is to ensure that [] !== [null] even if nullish. However [undefined] === [null] when nullish\n\tif (aKeys.length !== bKeys.length && (!nullish || Array.isArray(a))) {\n\t\treturn false;\n\t}\n\n\t// iterate through the longer set of keys\n\t// e.g., for a nullish comparison of a={ a: 1 } and b={ a: 1, b: null }\n\t// we want to iterate through bKeys\n\tconst keys = aKeys.length >= bKeys.length ? aKeys : bKeys;\n\n\tfor (const key of keys) {\n\t\tconst aVal = a[key];\n\t\tconst bVal = b[key];\n\n\t\tif (!valuesEqual(aVal, bVal, nullish)) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\nexport const isAWSDate = (val: string): boolean => {\n\treturn !!/^\\d{4}-\\d{2}-\\d{2}(Z|[+-]\\d{2}:\\d{2}($|:\\d{2}))?$/.exec(val);\n};\n\nexport const isAWSTime = (val: string): boolean => {\n\treturn !!/^\\d{2}:\\d{2}(:\\d{2}(.\\d+)?)?(Z|[+-]\\d{2}:\\d{2}($|:\\d{2}))?$/.exec(\n\t\tval\n\t);\n};\n\nexport const isAWSDateTime = (val: string): boolean => {\n\treturn !!/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}(:\\d{2}(.\\d+)?)?(Z|[+-]\\d{2}:\\d{2}($|:\\d{2}))?$/.exec(\n\t\tval\n\t);\n};\n\nexport const isAWSTimestamp = (val: number): boolean => {\n\treturn !!/^\\d+$/.exec(String(val));\n};\n\nexport const isAWSEmail = (val: string): boolean => {\n\treturn !!/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.exec(\n\t\tval\n\t);\n};\n\nexport const isAWSJSON = (val: string): boolean => {\n\ttry {\n\t\tJSON.parse(val);\n\t\treturn true;\n\t} catch {\n\t\treturn false;\n\t}\n};\n\nexport const isAWSURL = (val: string): boolean => {\n\ttry {\n\t\treturn !!new URL(val);\n\t} catch {\n\t\treturn false;\n\t}\n};\n\nexport const isAWSPhone = (val: string): boolean => {\n\treturn !!/^\\+?\\d[\\d\\s-]+$/.exec(val);\n};\n\nexport const isAWSIPAddress = (val: string): boolean => {\n\treturn !!/((^((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))$)|(^((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(%.+)?$))$/.exec(\n\t\tval\n\t);\n};\n\nexport class DeferredPromise {\n\tpublic promise: Promise<string>;\n\tpublic resolve: (value: string | PromiseLike<string>) => void;\n\tpublic reject: () => void;\n\tconstructor() {\n\t\tconst self = this;\n\t\tthis.promise = new Promise(\n\t\t\t(resolve: (value: string | PromiseLike<string>) => void, reject) => {\n\t\t\t\tself.resolve = resolve;\n\t\t\t\tself.reject = reject;\n\t\t\t}\n\t\t);\n\t}\n}\n\nexport class DeferredCallbackResolver {\n\tprivate limitPromise = new DeferredPromise();\n\tprivate timerPromise: Promise<string>;\n\tprivate maxInterval: number;\n\tprivate timer: ReturnType<typeof setTimeout>;\n\tprivate raceInFlight = false;\n\tprivate callback = () => {};\n\tprivate errorHandler: (error: string) => void;\n\tprivate defaultErrorHandler = (\n\t\tmsg = 'DeferredCallbackResolver error'\n\t): void => {\n\t\tthrow new Error(msg);\n\t};\n\n\tconstructor(options: DeferredCallbackResolverOptions) {\n\t\tthis.callback = options.callback;\n\t\tthis.errorHandler = options.errorHandler || this.defaultErrorHandler;\n\t\tthis.maxInterval = options.maxInterval || 2000;\n\t}\n\n\tprivate startTimer(): void {\n\t\tthis.timerPromise = new Promise((resolve, reject) => {\n\t\t\tthis.timer = setTimeout(() => {\n\t\t\t\tresolve(LimitTimerRaceResolvedValues.TIMER);\n\t\t\t}, this.maxInterval);\n\t\t});\n\t}\n\n\tprivate async racePromises(): Promise<string> {\n\t\tlet winner: string;\n\t\ttry {\n\t\t\tthis.raceInFlight = true;\n\t\t\tthis.startTimer();\n\t\t\twinner = await Promise.race([\n\t\t\t\tthis.timerPromise,\n\t\t\t\tthis.limitPromise.promise,\n\t\t\t]);\n\t\t\tthis.callback();\n\t\t} catch (err) {\n\t\t\tthis.errorHandler(err);\n\t\t} finally {\n\t\t\t// reset for the next race\n\t\t\tthis.clear();\n\t\t\tthis.raceInFlight = false;\n\t\t\tthis.limitPromise = new DeferredPromise();\n\n\t\t\treturn winner;\n\t\t}\n\t}\n\n\tpublic start(): void {\n\t\tif (!this.raceInFlight) this.racePromises();\n\t}\n\n\tpublic clear(): void {\n\t\tclearTimeout(this.timer);\n\t}\n\n\tpublic resolve(): void {\n\t\tthis.limitPromise.resolve(LimitTimerRaceResolvedValues.LIMIT);\n\t}\n}\n\n/**\n * merge two sets of patches created by immer produce.\n * newPatches take precedent over oldPatches for patches modifying the same path.\n * In the case many consecutive pathces are merged the original model should\n * always be the root model.\n *\n * Example:\n * A -> B, patches1\n * B -> C, patches2\n *\n * mergePatches(A, patches1, patches2) to get patches for A -> C\n *\n * @param originalSource the original Model the patches should be applied to\n * @param oldPatches immer produce patch list\n * @param newPatches immer produce patch list (will take precedence)\n * @return merged patches\n */\nexport function mergePatches<T>(\n\toriginalSource: T,\n\toldPatches: Patch[],\n\tnewPatches: Patch[]\n): Patch[] {\n\tconst patchesToMerge = oldPatches.concat(newPatches);\n\tlet patches: Patch[];\n\tproduce(\n\t\toriginalSource,\n\t\tdraft => {\n\t\t\tapplyPatches(draft, patchesToMerge);\n\t\t},\n\t\tp => {\n\t\t\tpatches = p;\n\t\t}\n\t);\n\treturn patches;\n}\n"]},"metadata":{},"sourceType":"module"}