{"ast":null,"code":"/*\n * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { ConsoleLogger as Logger } from './Logger';\nimport { Sha256 as jsSha256 } from '@aws-crypto/sha256-js';\nimport { toHex } from '@aws-sdk/util-hex-encoding';\nimport { parse, format } from 'url';\nimport { DateUtils } from './Util';\nvar logger = new Logger('Signer');\nvar DEFAULT_ALGORITHM = 'AWS4-HMAC-SHA256';\nvar IOT_SERVICE_NAME = 'iotdevicegateway';\n\nvar encrypt = function encrypt(key, src) {\n  var hash = new jsSha256(key);\n  hash.update(src);\n  return hash.digestSync();\n};\n\nvar hash = function hash(src) {\n  var arg = src || '';\n  var hash = new jsSha256();\n  hash.update(arg);\n  return toHex(hash.digestSync());\n};\n/**\n * @private\n * RFC 3986 compliant version of encodeURIComponent\n */\n\n\nvar escape_RFC3986 = function escape_RFC3986(component) {\n  return component.replace(/[!'()*]/g, function (c) {\n    return '%' + c.charCodeAt(0).toString(16).toUpperCase();\n  });\n};\n/**\n * @private\n * Create canonical query string\n *\n */\n\n\nvar canonical_query = function canonical_query(query) {\n  if (!query || query.length === 0) {\n    return '';\n  }\n\n  return query.split('&').map(function (e) {\n    var key_val = e.split('=');\n\n    if (key_val.length === 1) {\n      return e;\n    } else {\n      var reencoded_val = escape_RFC3986(key_val[1]);\n      return key_val[0] + '=' + reencoded_val;\n    }\n  }).sort(function (a, b) {\n    var key_a = a.split('=')[0];\n    var key_b = b.split('=')[0];\n\n    if (key_a === key_b) {\n      return a < b ? -1 : 1;\n    } else {\n      return key_a < key_b ? -1 : 1;\n    }\n  }).join('&');\n};\n/**\n* @private\n* Create canonical headers\n*\n<pre>\nCanonicalHeaders =\n    CanonicalHeadersEntry0 + CanonicalHeadersEntry1 + ... + CanonicalHeadersEntryN\nCanonicalHeadersEntry =\n    Lowercase(HeaderName) + ':' + Trimall(HeaderValue) + '\\n'\n</pre>\n*/\n\n\nvar canonical_headers = function canonical_headers(headers) {\n  if (!headers || Object.keys(headers).length === 0) {\n    return '';\n  }\n\n  return Object.keys(headers).map(function (key) {\n    return {\n      key: key.toLowerCase(),\n      value: headers[key] ? headers[key].trim().replace(/\\s+/g, ' ') : ''\n    };\n  }).sort(function (a, b) {\n    return a.key < b.key ? -1 : 1;\n  }).map(function (item) {\n    return item.key + ':' + item.value;\n  }).join('\\n') + '\\n';\n};\n/**\n * List of header keys included in the canonical headers.\n * @access private\n */\n\n\nvar signed_headers = function signed_headers(headers) {\n  return Object.keys(headers).map(function (key) {\n    return key.toLowerCase();\n  }).sort().join(';');\n};\n/**\n* @private\n* Create canonical request\n* Refer to\n* {@link http://docs.aws.amazon.com/general/latest/gr/sigv4-create-canonical-request.html|Create a Canonical Request}\n*\n<pre>\nCanonicalRequest =\n    HTTPRequestMethod + '\\n' +\n    CanonicalURI + '\\n' +\n    CanonicalQueryString + '\\n' +\n    CanonicalHeaders + '\\n' +\n    SignedHeaders + '\\n' +\n    HexEncode(Hash(RequestPayload))\n</pre>\n*/\n\n\nvar canonical_request = function canonical_request(request) {\n  var url_info = parse(request.url);\n  return [request.method || '/', encodeURIComponent(url_info.pathname).replace(/%2F/gi, '/'), canonical_query(url_info.query), canonical_headers(request.headers), signed_headers(request.headers), hash(request.data)].join('\\n');\n};\n\nvar parse_service_info = function parse_service_info(request) {\n  var url_info = parse(request.url),\n      host = url_info.host;\n  var matched = host.match(/([^\\.]+)\\.(?:([^\\.]*)\\.)?amazonaws\\.com$/);\n  var parsed = (matched || []).slice(1, 3);\n\n  if (parsed[1] === 'es') {\n    // Elastic Search\n    parsed = parsed.reverse();\n  }\n\n  return {\n    service: request.service || parsed[0],\n    region: request.region || parsed[1]\n  };\n};\n\nvar credential_scope = function credential_scope(d_str, region, service) {\n  return [d_str, region, service, 'aws4_request'].join('/');\n};\n/**\n* @private\n* Create a string to sign\n* Refer to\n* {@link http://docs.aws.amazon.com/general/latest/gr/sigv4-create-string-to-sign.html|Create String to Sign}\n*\n<pre>\nStringToSign =\n    Algorithm + \\n +\n    RequestDateTime + \\n +\n    CredentialScope + \\n +\n    HashedCanonicalRequest\n</pre>\n*/\n\n\nvar string_to_sign = function string_to_sign(algorithm, canonical_request, dt_str, scope) {\n  return [algorithm, dt_str, scope, hash(canonical_request)].join('\\n');\n};\n/**\n* @private\n* Create signing key\n* Refer to\n* {@link http://docs.aws.amazon.com/general/latest/gr/sigv4-calculate-signature.html|Calculate Signature}\n*\n<pre>\nkSecret = your secret access key\nkDate = HMAC(\"AWS4\" + kSecret, Date)\nkRegion = HMAC(kDate, Region)\nkService = HMAC(kRegion, Service)\nkSigning = HMAC(kService, \"aws4_request\")\n</pre>\n*/\n\n\nvar get_signing_key = function get_signing_key(secret_key, d_str, service_info) {\n  logger.debug(service_info);\n  var k = 'AWS4' + secret_key,\n      k_date = encrypt(k, d_str),\n      k_region = encrypt(k_date, service_info.region),\n      k_service = encrypt(k_region, service_info.service),\n      k_signing = encrypt(k_service, 'aws4_request');\n  return k_signing;\n};\n\nvar get_signature = function get_signature(signing_key, str_to_sign) {\n  return toHex(encrypt(signing_key, str_to_sign));\n};\n/**\n * @private\n * Create authorization header\n * Refer to\n * {@link http://docs.aws.amazon.com/general/latest/gr/sigv4-add-signature-to-request.html|Add the Signing Information}\n */\n\n\nvar get_authorization_header = function get_authorization_header(algorithm, access_key, scope, signed_headers, signature) {\n  return [algorithm + ' ' + 'Credential=' + access_key + '/' + scope, 'SignedHeaders=' + signed_headers, 'Signature=' + signature].join(', ');\n};\n\nvar Signer =\n/** @class */\nfunction () {\n  function Signer() {}\n  /**\n  * Sign a HTTP request, add 'Authorization' header to request param\n  * @method sign\n  * @memberof Signer\n  * @static\n  *\n  * @param {object} request - HTTP request object\n  <pre>\n  request: {\n      method: GET | POST | PUT ...\n      url: ...,\n      headers: {\n          header1: ...\n      },\n      data: data\n  }\n  </pre>\n  * @param {object} access_info - AWS access credential info\n  <pre>\n  access_info: {\n      access_key: ...,\n      secret_key: ...,\n      session_token: ...\n  }\n  </pre>\n  * @param {object} [service_info] - AWS service type and region, optional,\n  *                                  if not provided then parse out from url\n  <pre>\n  service_info: {\n      service: ...,\n      region: ...\n  }\n  </pre>\n  *\n  * @returns {object} Signed HTTP request\n  */\n\n\n  Signer.sign = function (request, access_info, service_info) {\n    if (service_info === void 0) {\n      service_info = null;\n    }\n\n    request.headers = request.headers || {};\n\n    if (request.body && !request.data) {\n      throw new Error('The attribute \"body\" was found on the request object. Please use the attribute \"data\" instead.');\n    } // datetime string and date string\n\n\n    var dt = DateUtils.getDateWithClockOffset(),\n        dt_str = dt.toISOString().replace(/[:\\-]|\\.\\d{3}/g, ''),\n        d_str = dt_str.substr(0, 8);\n    var url_info = parse(request.url);\n    request.headers['host'] = url_info.host;\n    request.headers['x-amz-date'] = dt_str;\n\n    if (access_info.session_token) {\n      request.headers['X-Amz-Security-Token'] = access_info.session_token;\n    } // Task 1: Create a Canonical Request\n\n\n    var request_str = canonical_request(request);\n    logger.debug(request_str); // Task 2: Create a String to Sign\n\n    var serviceInfo = service_info || parse_service_info(request),\n        scope = credential_scope(d_str, serviceInfo.region, serviceInfo.service),\n        str_to_sign = string_to_sign(DEFAULT_ALGORITHM, request_str, dt_str, scope); // Task 3: Calculate the Signature\n\n    var signing_key = get_signing_key(access_info.secret_key, d_str, serviceInfo),\n        signature = get_signature(signing_key, str_to_sign); // Task 4: Adding the Signing information to the Request\n\n    var authorization_header = get_authorization_header(DEFAULT_ALGORITHM, access_info.access_key, scope, signed_headers(request.headers), signature);\n    request.headers['Authorization'] = authorization_header;\n    return request;\n  };\n\n  Signer.signUrl = function (urlOrRequest, accessInfo, serviceInfo, expiration) {\n    var urlToSign = typeof urlOrRequest === 'object' ? urlOrRequest.url : urlOrRequest;\n    var method = typeof urlOrRequest === 'object' ? urlOrRequest.method : 'GET';\n    var body = typeof urlOrRequest === 'object' ? urlOrRequest.body : undefined;\n    var now = DateUtils.getDateWithClockOffset().toISOString().replace(/[:\\-]|\\.\\d{3}/g, '');\n    var today = now.substr(0, 8); // Intentionally discarding search\n\n    var _a = parse(urlToSign, true, true),\n        search = _a.search,\n        parsedUrl = __rest(_a, [\"search\"]);\n\n    var host = parsedUrl.host;\n    var signedHeaders = {\n      host: host\n    };\n\n    var _b = serviceInfo || parse_service_info({\n      url: format(parsedUrl)\n    }),\n        region = _b.region,\n        service = _b.service;\n\n    var credentialScope = credential_scope(today, region, service); // IoT service does not allow the session token in the canonical request\n    // https://docs.aws.amazon.com/general/latest/gr/sigv4-add-signature-to-request.html\n\n    var sessionTokenRequired = accessInfo.session_token && service !== IOT_SERVICE_NAME;\n\n    var queryParams = __assign(__assign(__assign({\n      'X-Amz-Algorithm': DEFAULT_ALGORITHM,\n      'X-Amz-Credential': [accessInfo.access_key, credentialScope].join('/'),\n      'X-Amz-Date': now.substr(0, 16)\n    }, sessionTokenRequired ? {\n      'X-Amz-Security-Token': \"\" + accessInfo.session_token\n    } : {}), expiration ? {\n      'X-Amz-Expires': \"\" + expiration\n    } : {}), {\n      'X-Amz-SignedHeaders': Object.keys(signedHeaders).join(',')\n    });\n\n    var canonicalRequest = canonical_request({\n      method: method,\n      url: format(__assign(__assign({}, parsedUrl), {\n        query: __assign(__assign({}, parsedUrl.query), queryParams)\n      })),\n      headers: signedHeaders,\n      data: body\n    });\n    var stringToSign = string_to_sign(DEFAULT_ALGORITHM, canonicalRequest, now, credentialScope);\n    var signing_key = get_signing_key(accessInfo.secret_key, today, {\n      region: region,\n      service: service\n    });\n    var signature = get_signature(signing_key, stringToSign);\n\n    var additionalQueryParams = __assign({\n      'X-Amz-Signature': signature\n    }, accessInfo.session_token && {\n      'X-Amz-Security-Token': accessInfo.session_token\n    });\n\n    var result = format({\n      protocol: parsedUrl.protocol,\n      slashes: true,\n      hostname: parsedUrl.hostname,\n      port: parsedUrl.port,\n      pathname: parsedUrl.pathname,\n      query: __assign(__assign(__assign({}, parsedUrl.query), queryParams), additionalQueryParams)\n    });\n    return result;\n  };\n\n  return Signer;\n}();\n\nexport { Signer };\n/**\n * @deprecated use per-function import\n */\n\nexport default Signer;","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAaA,SAASA,aAAa,IAAIC,MAA1B,QAAwC,UAAxC;AACA,SAASC,MAAM,IAAIC,QAAnB,QAAmC,uBAAnC;AACA,SAASC,KAAT,QAAsB,4BAAtB;AACA,SAASC,KAAT,EAAgBC,MAAhB,QAA8B,KAA9B;AACA,SAASC,SAAT,QAA0B,QAA1B;AAEA,IAAMC,MAAM,GAAG,IAAIP,MAAJ,CAAW,QAAX,CAAf;AAEA,IAAMQ,iBAAiB,GAAG,kBAA1B;AACA,IAAMC,gBAAgB,GAAG,kBAAzB;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAASC,GAAT,EAAcC,GAAd,EAAiB;EAChC,IAAMC,IAAI,GAAG,IAAIX,QAAJ,CAAaS,GAAb,CAAb;EACAE,IAAI,CAACC,MAAL,CAAYF,GAAZ;EACA,OAAOC,IAAI,CAACE,UAAL,EAAP;AACA,CAJD;;AAMA,IAAMF,IAAI,GAAG,cAASD,GAAT,EAAY;EACxB,IAAMI,GAAG,GAAGJ,GAAG,IAAI,EAAnB;EACA,IAAMC,IAAI,GAAG,IAAIX,QAAJ,EAAb;EACAW,IAAI,CAACC,MAAL,CAAYE,GAAZ;EACA,OAAOb,KAAK,CAACU,IAAI,CAACE,UAAL,EAAD,CAAZ;AACA,CALD;AAOA;;;;;;AAIA,IAAME,cAAc,GAAG,SAAjBA,cAAiB,CAASC,SAAT,EAAkB;EACxC,OAAOA,SAAS,CAACC,OAAV,CAAkB,UAAlB,EAA8B,UAASC,CAAT,EAAU;IAC9C,OAAO,MAAMA,CAAC,CAACC,UAAF,CAAa,CAAb,EAAgBC,QAAhB,CAAyB,EAAzB,EAA6BC,WAA7B,EAAb;EACA,CAFM,CAAP;AAGA,CAJD;AAMA;;;;;;;AAKA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAASC,KAAT,EAAc;EACrC,IAAI,CAACA,KAAD,IAAUA,KAAK,CAACC,MAAN,KAAiB,CAA/B,EAAkC;IACjC,OAAO,EAAP;EACA;;EAED,OAAOD,KAAK,CACVE,KADK,CACC,GADD,EAELC,GAFK,CAED,aAAC;IACL,IAAMC,OAAO,GAAGC,CAAC,CAACH,KAAF,CAAQ,GAAR,CAAhB;;IAEA,IAAIE,OAAO,CAACH,MAAR,KAAmB,CAAvB,EAA0B;MACzB,OAAOI,CAAP;IACA,CAFD,MAEO;MACN,IAAMC,aAAa,GAAGd,cAAc,CAACY,OAAO,CAAC,CAAD,CAAR,CAApC;MACA,OAAOA,OAAO,CAAC,CAAD,CAAP,GAAa,GAAb,GAAmBE,aAA1B;IACA;EACD,CAXK,EAYLC,IAZK,CAYA,UAACC,CAAD,EAAIC,CAAJ,EAAK;IACV,IAAMC,KAAK,GAAGF,CAAC,CAACN,KAAF,CAAQ,GAAR,EAAa,CAAb,CAAd;IACA,IAAMS,KAAK,GAAGF,CAAC,CAACP,KAAF,CAAQ,GAAR,EAAa,CAAb,CAAd;;IACA,IAAIQ,KAAK,KAAKC,KAAd,EAAqB;MACpB,OAAOH,CAAC,GAAGC,CAAJ,GAAQ,CAAC,CAAT,GAAa,CAApB;IACA,CAFD,MAEO;MACN,OAAOC,KAAK,GAAGC,KAAR,GAAgB,CAAC,CAAjB,GAAqB,CAA5B;IACA;EACD,CApBK,EAqBLC,IArBK,CAqBA,GArBA,CAAP;AAsBA,CA3BD;AA6BA;;;;;;;;;;;;;AAWA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAASC,OAAT,EAAgB;EACzC,IAAI,CAACA,OAAD,IAAYC,MAAM,CAACC,IAAP,CAAYF,OAAZ,EAAqBb,MAArB,KAAgC,CAAhD,EAAmD;IAClD,OAAO,EAAP;EACA;;EAED,OACCc,MAAM,CAACC,IAAP,CAAYF,OAAZ,EACEX,GADF,CACM,UAASjB,GAAT,EAAY;IAChB,OAAO;MACNA,GAAG,EAAEA,GAAG,CAAC+B,WAAJ,EADC;MAENC,KAAK,EAAEJ,OAAO,CAAC5B,GAAD,CAAP,GAAe4B,OAAO,CAAC5B,GAAD,CAAP,CAAaiC,IAAb,GAAoBzB,OAApB,CAA4B,MAA5B,EAAoC,GAApC,CAAf,GAA0D;IAF3D,CAAP;EAIA,CANF,EAOEa,IAPF,CAOO,UAASC,CAAT,EAAYC,CAAZ,EAAa;IAClB,OAAOD,CAAC,CAACtB,GAAF,GAAQuB,CAAC,CAACvB,GAAV,GAAgB,CAAC,CAAjB,GAAqB,CAA5B;EACA,CATF,EAUEiB,GAVF,CAUM,UAASiB,IAAT,EAAa;IACjB,OAAOA,IAAI,CAAClC,GAAL,GAAW,GAAX,GAAiBkC,IAAI,CAACF,KAA7B;EACA,CAZF,EAaEN,IAbF,CAaO,IAbP,IAae,IAdhB;AAgBA,CArBD;AAuBA;;;;;;AAIA,IAAMS,cAAc,GAAG,SAAjBA,cAAiB,CAASP,OAAT,EAAgB;EACtC,OAAOC,MAAM,CAACC,IAAP,CAAYF,OAAZ,EACLX,GADK,CACD,UAASjB,GAAT,EAAY;IAChB,OAAOA,GAAG,CAAC+B,WAAJ,EAAP;EACA,CAHK,EAILV,IAJK,GAKLK,IALK,CAKA,GALA,CAAP;AAMA,CAPD;AASA;;;;;;;;;;;;;;;;;;AAgBA,IAAMU,iBAAiB,GAAG,SAApBA,iBAAoB,CAASC,OAAT,EAAgB;EACzC,IAAMC,QAAQ,GAAG7C,KAAK,CAAC4C,OAAO,CAACE,GAAT,CAAtB;EAEA,OAAO,CACNF,OAAO,CAACG,MAAR,IAAkB,GADZ,EAENC,kBAAkB,CAACH,QAAQ,CAACI,QAAV,CAAlB,CAAsClC,OAAtC,CAA8C,OAA9C,EAAuD,GAAvD,CAFM,EAGNK,eAAe,CAACyB,QAAQ,CAACxB,KAAV,CAHT,EAINa,iBAAiB,CAACU,OAAO,CAACT,OAAT,CAJX,EAKNO,cAAc,CAACE,OAAO,CAACT,OAAT,CALR,EAMN1B,IAAI,CAACmC,OAAO,CAACM,IAAT,CANE,EAOLjB,IAPK,CAOA,IAPA,CAAP;AAQA,CAXD;;AAaA,IAAMkB,kBAAkB,GAAG,SAArBA,kBAAqB,CAASP,OAAT,EAAgB;EAC1C,IAAMC,QAAQ,GAAG7C,KAAK,CAAC4C,OAAO,CAACE,GAAT,CAAtB;EAAA,IACCM,IAAI,GAAGP,QAAQ,CAACO,IADjB;EAGA,IAAMC,OAAO,GAAGD,IAAI,CAACE,KAAL,CAAW,0CAAX,CAAhB;EACA,IAAIC,MAAM,GAAG,CAACF,OAAO,IAAI,EAAZ,EAAgBG,KAAhB,CAAsB,CAAtB,EAAyB,CAAzB,CAAb;;EAEA,IAAID,MAAM,CAAC,CAAD,CAAN,KAAc,IAAlB,EAAwB;IACvB;IACAA,MAAM,GAAGA,MAAM,CAACE,OAAP,EAAT;EACA;;EAED,OAAO;IACNC,OAAO,EAAEd,OAAO,CAACc,OAAR,IAAmBH,MAAM,CAAC,CAAD,CAD5B;IAENI,MAAM,EAAEf,OAAO,CAACe,MAAR,IAAkBJ,MAAM,CAAC,CAAD;EAF1B,CAAP;AAIA,CAhBD;;AAkBA,IAAMK,gBAAgB,GAAG,SAAnBA,gBAAmB,CAASC,KAAT,EAAgBF,MAAhB,EAAwBD,OAAxB,EAA+B;EACvD,OAAO,CAACG,KAAD,EAAQF,MAAR,EAAgBD,OAAhB,EAAyB,cAAzB,EAAyCzB,IAAzC,CAA8C,GAA9C,CAAP;AACA,CAFD;AAIA;;;;;;;;;;;;;;;;AAcA,IAAM6B,cAAc,GAAG,SAAjBA,cAAiB,CAASC,SAAT,EAAoBpB,iBAApB,EAAuCqB,MAAvC,EAA+CC,KAA/C,EAAoD;EAC1E,OAAO,CAACF,SAAD,EAAYC,MAAZ,EAAoBC,KAApB,EAA2BxD,IAAI,CAACkC,iBAAD,CAA/B,EAAoDV,IAApD,CAAyD,IAAzD,CAAP;AACA,CAFD;AAIA;;;;;;;;;;;;;;;;AAcA,IAAMiC,eAAe,GAAG,SAAlBA,eAAkB,CAASC,UAAT,EAAqBN,KAArB,EAA4BO,YAA5B,EAAwC;EAC/DjE,MAAM,CAACkE,KAAP,CAAaD,YAAb;EACA,IAAME,CAAC,GAAG,SAASH,UAAnB;EAAA,IACCI,MAAM,GAAGjE,OAAO,CAACgE,CAAD,EAAIT,KAAJ,CADjB;EAAA,IAECW,QAAQ,GAAGlE,OAAO,CAACiE,MAAD,EAASH,YAAY,CAACT,MAAtB,CAFnB;EAAA,IAGCc,SAAS,GAAGnE,OAAO,CAACkE,QAAD,EAAWJ,YAAY,CAACV,OAAxB,CAHpB;EAAA,IAICgB,SAAS,GAAGpE,OAAO,CAACmE,SAAD,EAAY,cAAZ,CAJpB;EAMA,OAAOC,SAAP;AACA,CATD;;AAWA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAASC,WAAT,EAAsBC,WAAtB,EAAiC;EACtD,OAAO9E,KAAK,CAACO,OAAO,CAACsE,WAAD,EAAcC,WAAd,CAAR,CAAZ;AACA,CAFD;AAIA;;;;;;;;AAMA,IAAMC,wBAAwB,GAAG,SAA3BA,wBAA2B,CAChCf,SADgC,EAEhCgB,UAFgC,EAGhCd,KAHgC,EAIhCvB,cAJgC,EAKhCsC,SALgC,EAKvB;EAET,OAAO,CACNjB,SAAS,GAAG,GAAZ,GAAkB,aAAlB,GAAkCgB,UAAlC,GAA+C,GAA/C,GAAqDd,KAD/C,EAEN,mBAAmBvB,cAFb,EAGN,eAAesC,SAHT,EAIL/C,IAJK,CAIA,IAJA,CAAP;AAKA,CAZD;;AAcA;AAAA;AAAA;EAAA,mBAkMC;EAjMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAoCOgD,cAAP,UAAYrC,OAAZ,EAAqBsC,WAArB,EAAkCd,YAAlC,EAAqD;IAAnB;MAAAA;IAAmB;;IACpDxB,OAAO,CAACT,OAAR,GAAkBS,OAAO,CAACT,OAAR,IAAmB,EAArC;;IAEA,IAAIS,OAAO,CAACuC,IAAR,IAAgB,CAACvC,OAAO,CAACM,IAA7B,EAAmC;MAClC,MAAM,IAAIkC,KAAJ,CACL,gGADK,CAAN;IAGA,CAPmD,CASpD;;;IACA,IAAMC,EAAE,GAAGnF,SAAS,CAACoF,sBAAV,EAAX;IAAA,IACCtB,MAAM,GAAGqB,EAAE,CAACE,WAAH,GAAiBxE,OAAjB,CAAyB,gBAAzB,EAA2C,EAA3C,CADV;IAAA,IAEC8C,KAAK,GAAGG,MAAM,CAACwB,MAAP,CAAc,CAAd,EAAiB,CAAjB,CAFT;IAIA,IAAM3C,QAAQ,GAAG7C,KAAK,CAAC4C,OAAO,CAACE,GAAT,CAAtB;IACAF,OAAO,CAACT,OAAR,CAAgB,MAAhB,IAA0BU,QAAQ,CAACO,IAAnC;IACAR,OAAO,CAACT,OAAR,CAAgB,YAAhB,IAAgC6B,MAAhC;;IACA,IAAIkB,WAAW,CAACO,aAAhB,EAA+B;MAC9B7C,OAAO,CAACT,OAAR,CAAgB,sBAAhB,IAA0C+C,WAAW,CAACO,aAAtD;IACA,CAnBmD,CAqBpD;;;IACA,IAAMC,WAAW,GAAG/C,iBAAiB,CAACC,OAAD,CAArC;IACAzC,MAAM,CAACkE,KAAP,CAAaqB,WAAb,EAvBoD,CAyBpD;;IACA,IAAMC,WAAW,GAAGvB,YAAY,IAAIjB,kBAAkB,CAACP,OAAD,CAAtD;IAAA,IACCqB,KAAK,GAAGL,gBAAgB,CAACC,KAAD,EAAQ8B,WAAW,CAAChC,MAApB,EAA4BgC,WAAW,CAACjC,OAAxC,CADzB;IAAA,IAECmB,WAAW,GAAGf,cAAc,CAC3B1D,iBAD2B,EAE3BsF,WAF2B,EAG3B1B,MAH2B,EAI3BC,KAJ2B,CAF7B,CA1BoD,CAmCpD;;IACA,IAAMW,WAAW,GAAGV,eAAe,CACjCgB,WAAW,CAACf,UADqB,EAEjCN,KAFiC,EAGjC8B,WAHiC,CAAnC;IAAA,IAKCX,SAAS,GAAGL,aAAa,CAACC,WAAD,EAAcC,WAAd,CAL1B,CApCoD,CA2CpD;;IACA,IAAMe,oBAAoB,GAAGd,wBAAwB,CACpD1E,iBADoD,EAEpD8E,WAAW,CAACH,UAFwC,EAGpDd,KAHoD,EAIpDvB,cAAc,CAACE,OAAO,CAACT,OAAT,CAJsC,EAKpD6C,SALoD,CAArD;IAOApC,OAAO,CAACT,OAAR,CAAgB,eAAhB,IAAmCyD,oBAAnC;IAEA,OAAOhD,OAAP;EACA,CAtDM;;EAoEAqC,iBAAP,UACCY,YADD,EAECC,UAFD,EAGCH,WAHD,EAICI,UAJD,EAIoB;IAEnB,IAAMC,SAAS,GACd,OAAOH,YAAP,KAAwB,QAAxB,GAAmCA,YAAY,CAAC/C,GAAhD,GAAsD+C,YADvD;IAEA,IAAM9C,MAAM,GACX,OAAO8C,YAAP,KAAwB,QAAxB,GAAmCA,YAAY,CAAC9C,MAAhD,GAAyD,KAD1D;IAEA,IAAMoC,IAAI,GACT,OAAOU,YAAP,KAAwB,QAAxB,GAAmCA,YAAY,CAACV,IAAhD,GAAuDc,SADxD;IAGA,IAAMC,GAAG,GAAGhG,SAAS,CAACoF,sBAAV,GACVC,WADU,GAEVxE,OAFU,CAEF,gBAFE,EAEgB,EAFhB,CAAZ;IAGA,IAAMoF,KAAK,GAAGD,GAAG,CAACV,MAAJ,CAAW,CAAX,EAAc,CAAd,CAAd,CAZmB,CAanB;;IACA,IAAMY,iCAAN;IAAA,IAAQC,kBAAR;IAAA,IAAgBC,kCAAhB;;IACQ;IACR,IAAMC,aAAa,GAAG;MAAEnD,IAAI;IAAN,CAAtB;;IAEM;MAAAN;IAAA;IAAA,IAAEa,kBAAF;IAAA,IAAUD,oBAAV;;IAEN,IAAM8C,eAAe,GAAG5C,gBAAgB,CAACuC,KAAD,EAAQxC,MAAR,EAAgBD,OAAhB,CAAxC,CApBmB,CAsBnB;IACA;;IACA,IAAM+C,oBAAoB,GACzBX,UAAU,CAACL,aAAX,IAA4B/B,OAAO,KAAKrD,gBADzC;;IAEA,IAAMqG,WAAW;MAChB,mBAAmBtG,iBADH;MAEhB,oBAAoB,CAAC0F,UAAU,CAACf,UAAZ,EAAwByB,eAAxB,EAAyCvE,IAAzC,CAA8C,GAA9C,CAFJ;MAGhB,cAAciE,GAAG,CAACV,MAAJ,CAAW,CAAX,EAAc,EAAd;IAHE,GAIZiB,oBAAoB,GACrB;MAAE,wBAAwB,KAAGX,UAAU,CAACL;IAAxC,CADqB,GAErB,EANa,GAOZM,UAAU,GAAG;MAAE,iBAAiB,KAAGA;IAAtB,CAAH,GAA0C,EAPxC,GAO2C;MAC3D,uBAAuB3D,MAAM,CAACC,IAAP,CAAYkE,aAAZ,EAA2BtE,IAA3B,CAAgC,GAAhC;IADoC,CAP3C,CAAjB;;IAWA,IAAM0E,gBAAgB,GAAGhE,iBAAiB,CAAC;MAC1CI,MAAM,QADoC;MAE1CD,GAAG,EAAE7C,MAAM,uBACPqG,SADO,GACE;QACZjF,KAAK,wBACDiF,SAAS,CAACjF,KADT,GAEDqF,WAFC;MADO,CADF,EAF+B;MAS1CvE,OAAO,EAAEoE,aATiC;MAU1CrD,IAAI,EAAEiC;IAVoC,CAAD,CAA1C;IAaA,IAAMyB,YAAY,GAAG9C,cAAc,CAClC1D,iBADkC,EAElCuG,gBAFkC,EAGlCT,GAHkC,EAIlCM,eAJkC,CAAnC;IAOA,IAAM5B,WAAW,GAAGV,eAAe,CAAC4B,UAAU,CAAC3B,UAAZ,EAAwBgC,KAAxB,EAA+B;MACjExC,MAAM,QAD2D;MAEjED,OAAO;IAF0D,CAA/B,CAAnC;IAIA,IAAMsB,SAAS,GAAGL,aAAa,CAACC,WAAD,EAAcgC,YAAd,CAA/B;;IAEA,IAAMC,qBAAqB;MAC1B,mBAAmB7B;IADO,GAEtBc,UAAU,CAACL,aAAX,IAA4B;MAC/B,wBAAwBK,UAAU,CAACL;IADJ,CAFN,CAA3B;;IAOA,IAAMqB,MAAM,GAAG7G,MAAM,CAAC;MACrB8G,QAAQ,EAAET,SAAS,CAACS,QADC;MAErBC,OAAO,EAAE,IAFY;MAGrBC,QAAQ,EAAEX,SAAS,CAACW,QAHC;MAIrBC,IAAI,EAAEZ,SAAS,CAACY,IAJK;MAKrBjE,QAAQ,EAAEqD,SAAS,CAACrD,QALC;MAMrB5B,KAAK,iCACDiF,SAAS,CAACjF,KADT,GAEDqF,WAFC,GAGDG,qBAHC;IANgB,CAAD,CAArB;IAaA,OAAOC,MAAP;EACA,CAxFM;;EAyFR;AAAC,CAlMD;;;AAoMA;;;;AAGA,eAAe7B,MAAf","names":["ConsoleLogger","Logger","Sha256","jsSha256","toHex","parse","format","DateUtils","logger","DEFAULT_ALGORITHM","IOT_SERVICE_NAME","encrypt","key","src","hash","update","digestSync","arg","escape_RFC3986","component","replace","c","charCodeAt","toString","toUpperCase","canonical_query","query","length","split","map","key_val","e","reencoded_val","sort","a","b","key_a","key_b","join","canonical_headers","headers","Object","keys","toLowerCase","value","trim","item","signed_headers","canonical_request","request","url_info","url","method","encodeURIComponent","pathname","data","parse_service_info","host","matched","match","parsed","slice","reverse","service","region","credential_scope","d_str","string_to_sign","algorithm","dt_str","scope","get_signing_key","secret_key","service_info","debug","k","k_date","k_region","k_service","k_signing","get_signature","signing_key","str_to_sign","get_authorization_header","access_key","signature","Signer","access_info","body","Error","dt","getDateWithClockOffset","toISOString","substr","session_token","request_str","serviceInfo","authorization_header","urlOrRequest","accessInfo","expiration","urlToSign","undefined","now","today","_a","search","parsedUrl","signedHeaders","credentialScope","sessionTokenRequired","queryParams","canonicalRequest","stringToSign","additionalQueryParams","result","protocol","slashes","hostname","port"],"sources":["C:\\Users\\lmore\\OneDrive\\Documents\\GitHub\\JacksOfAllTrades\\jacksofalltrades\\node_modules\\@aws-amplify\\core\\src\\Signer.ts"],"sourcesContent":["/*\n * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n\nimport { ConsoleLogger as Logger } from './Logger';\nimport { Sha256 as jsSha256 } from '@aws-crypto/sha256-js';\nimport { toHex } from '@aws-sdk/util-hex-encoding';\nimport { parse, format } from 'url';\nimport { DateUtils } from './Util';\n\nconst logger = new Logger('Signer');\n\nconst DEFAULT_ALGORITHM = 'AWS4-HMAC-SHA256';\nconst IOT_SERVICE_NAME = 'iotdevicegateway';\n\nconst encrypt = function(key, src) {\n\tconst hash = new jsSha256(key);\n\thash.update(src);\n\treturn hash.digestSync();\n};\n\nconst hash = function(src) {\n\tconst arg = src || '';\n\tconst hash = new jsSha256();\n\thash.update(arg);\n\treturn toHex(hash.digestSync());\n};\n\n/**\n * @private\n * RFC 3986 compliant version of encodeURIComponent\n */\nconst escape_RFC3986 = function(component) {\n\treturn component.replace(/[!'()*]/g, function(c) {\n\t\treturn '%' + c.charCodeAt(0).toString(16).toUpperCase();\n\t});\n};\n\n/**\n * @private\n * Create canonical query string\n *\n */\nconst canonical_query = function(query) {\n\tif (!query || query.length === 0) {\n\t\treturn '';\n\t}\n\n\treturn query\n\t\t.split('&')\n\t\t.map(e => {\n\t\t\tconst key_val = e.split('=');\n\n\t\t\tif (key_val.length === 1) {\n\t\t\t\treturn e;\n\t\t\t} else {\n\t\t\t\tconst reencoded_val = escape_RFC3986(key_val[1]);\n\t\t\t\treturn key_val[0] + '=' + reencoded_val;\n\t\t\t}\n\t\t})\n\t\t.sort((a, b) => {\n\t\t\tconst key_a = a.split('=')[0];\n\t\t\tconst key_b = b.split('=')[0];\n\t\t\tif (key_a === key_b) {\n\t\t\t\treturn a < b ? -1 : 1;\n\t\t\t} else {\n\t\t\t\treturn key_a < key_b ? -1 : 1;\n\t\t\t}\n\t\t})\n\t\t.join('&');\n};\n\n/**\n* @private\n* Create canonical headers\n*\n<pre>\nCanonicalHeaders =\n    CanonicalHeadersEntry0 + CanonicalHeadersEntry1 + ... + CanonicalHeadersEntryN\nCanonicalHeadersEntry =\n    Lowercase(HeaderName) + ':' + Trimall(HeaderValue) + '\\n'\n</pre>\n*/\nconst canonical_headers = function(headers) {\n\tif (!headers || Object.keys(headers).length === 0) {\n\t\treturn '';\n\t}\n\n\treturn (\n\t\tObject.keys(headers)\n\t\t\t.map(function(key) {\n\t\t\t\treturn {\n\t\t\t\t\tkey: key.toLowerCase(),\n\t\t\t\t\tvalue: headers[key] ? headers[key].trim().replace(/\\s+/g, ' ') : '',\n\t\t\t\t};\n\t\t\t})\n\t\t\t.sort(function(a, b) {\n\t\t\t\treturn a.key < b.key ? -1 : 1;\n\t\t\t})\n\t\t\t.map(function(item) {\n\t\t\t\treturn item.key + ':' + item.value;\n\t\t\t})\n\t\t\t.join('\\n') + '\\n'\n\t);\n};\n\n/**\n * List of header keys included in the canonical headers.\n * @access private\n */\nconst signed_headers = function(headers) {\n\treturn Object.keys(headers)\n\t\t.map(function(key) {\n\t\t\treturn key.toLowerCase();\n\t\t})\n\t\t.sort()\n\t\t.join(';');\n};\n\n/**\n* @private\n* Create canonical request\n* Refer to\n* {@link http://docs.aws.amazon.com/general/latest/gr/sigv4-create-canonical-request.html|Create a Canonical Request}\n*\n<pre>\nCanonicalRequest =\n    HTTPRequestMethod + '\\n' +\n    CanonicalURI + '\\n' +\n    CanonicalQueryString + '\\n' +\n    CanonicalHeaders + '\\n' +\n    SignedHeaders + '\\n' +\n    HexEncode(Hash(RequestPayload))\n</pre>\n*/\nconst canonical_request = function(request) {\n\tconst url_info = parse(request.url);\n\n\treturn [\n\t\trequest.method || '/',\n\t\tencodeURIComponent(url_info.pathname).replace(/%2F/gi, '/'),\n\t\tcanonical_query(url_info.query),\n\t\tcanonical_headers(request.headers),\n\t\tsigned_headers(request.headers),\n\t\thash(request.data),\n\t].join('\\n');\n};\n\nconst parse_service_info = function(request) {\n\tconst url_info = parse(request.url),\n\t\thost = url_info.host;\n\n\tconst matched = host.match(/([^\\.]+)\\.(?:([^\\.]*)\\.)?amazonaws\\.com$/);\n\tlet parsed = (matched || []).slice(1, 3);\n\n\tif (parsed[1] === 'es') {\n\t\t// Elastic Search\n\t\tparsed = parsed.reverse();\n\t}\n\n\treturn {\n\t\tservice: request.service || parsed[0],\n\t\tregion: request.region || parsed[1],\n\t};\n};\n\nconst credential_scope = function(d_str, region, service) {\n\treturn [d_str, region, service, 'aws4_request'].join('/');\n};\n\n/**\n* @private\n* Create a string to sign\n* Refer to\n* {@link http://docs.aws.amazon.com/general/latest/gr/sigv4-create-string-to-sign.html|Create String to Sign}\n*\n<pre>\nStringToSign =\n    Algorithm + \\n +\n    RequestDateTime + \\n +\n    CredentialScope + \\n +\n    HashedCanonicalRequest\n</pre>\n*/\nconst string_to_sign = function(algorithm, canonical_request, dt_str, scope) {\n\treturn [algorithm, dt_str, scope, hash(canonical_request)].join('\\n');\n};\n\n/**\n* @private\n* Create signing key\n* Refer to\n* {@link http://docs.aws.amazon.com/general/latest/gr/sigv4-calculate-signature.html|Calculate Signature}\n*\n<pre>\nkSecret = your secret access key\nkDate = HMAC(\"AWS4\" + kSecret, Date)\nkRegion = HMAC(kDate, Region)\nkService = HMAC(kRegion, Service)\nkSigning = HMAC(kService, \"aws4_request\")\n</pre>\n*/\nconst get_signing_key = function(secret_key, d_str, service_info) {\n\tlogger.debug(service_info);\n\tconst k = 'AWS4' + secret_key,\n\t\tk_date = encrypt(k, d_str),\n\t\tk_region = encrypt(k_date, service_info.region),\n\t\tk_service = encrypt(k_region, service_info.service),\n\t\tk_signing = encrypt(k_service, 'aws4_request');\n\n\treturn k_signing;\n};\n\nconst get_signature = function(signing_key, str_to_sign) {\n\treturn toHex(encrypt(signing_key, str_to_sign));\n};\n\n/**\n * @private\n * Create authorization header\n * Refer to\n * {@link http://docs.aws.amazon.com/general/latest/gr/sigv4-add-signature-to-request.html|Add the Signing Information}\n */\nconst get_authorization_header = function(\n\talgorithm,\n\taccess_key,\n\tscope,\n\tsigned_headers,\n\tsignature\n) {\n\treturn [\n\t\talgorithm + ' ' + 'Credential=' + access_key + '/' + scope,\n\t\t'SignedHeaders=' + signed_headers,\n\t\t'Signature=' + signature,\n\t].join(', ');\n};\n\nexport class Signer {\n\t/**\n    * Sign a HTTP request, add 'Authorization' header to request param\n    * @method sign\n    * @memberof Signer\n    * @static\n    *\n    * @param {object} request - HTTP request object\n    <pre>\n    request: {\n        method: GET | POST | PUT ...\n        url: ...,\n        headers: {\n            header1: ...\n        },\n        data: data\n    }\n    </pre>\n    * @param {object} access_info - AWS access credential info\n    <pre>\n    access_info: {\n        access_key: ...,\n        secret_key: ...,\n        session_token: ...\n    }\n    </pre>\n    * @param {object} [service_info] - AWS service type and region, optional,\n    *                                  if not provided then parse out from url\n    <pre>\n    service_info: {\n        service: ...,\n        region: ...\n    }\n    </pre>\n    *\n    * @returns {object} Signed HTTP request\n    */\n\tstatic sign(request, access_info, service_info = null) {\n\t\trequest.headers = request.headers || {};\n\n\t\tif (request.body && !request.data) {\n\t\t\tthrow new Error(\n\t\t\t\t'The attribute \"body\" was found on the request object. Please use the attribute \"data\" instead.'\n\t\t\t);\n\t\t}\n\n\t\t// datetime string and date string\n\t\tconst dt = DateUtils.getDateWithClockOffset(),\n\t\t\tdt_str = dt.toISOString().replace(/[:\\-]|\\.\\d{3}/g, ''),\n\t\t\td_str = dt_str.substr(0, 8);\n\n\t\tconst url_info = parse(request.url);\n\t\trequest.headers['host'] = url_info.host;\n\t\trequest.headers['x-amz-date'] = dt_str;\n\t\tif (access_info.session_token) {\n\t\t\trequest.headers['X-Amz-Security-Token'] = access_info.session_token;\n\t\t}\n\n\t\t// Task 1: Create a Canonical Request\n\t\tconst request_str = canonical_request(request);\n\t\tlogger.debug(request_str);\n\n\t\t// Task 2: Create a String to Sign\n\t\tconst serviceInfo = service_info || parse_service_info(request),\n\t\t\tscope = credential_scope(d_str, serviceInfo.region, serviceInfo.service),\n\t\t\tstr_to_sign = string_to_sign(\n\t\t\t\tDEFAULT_ALGORITHM,\n\t\t\t\trequest_str,\n\t\t\t\tdt_str,\n\t\t\t\tscope\n\t\t\t);\n\n\t\t// Task 3: Calculate the Signature\n\t\tconst signing_key = get_signing_key(\n\t\t\t\taccess_info.secret_key,\n\t\t\t\td_str,\n\t\t\t\tserviceInfo\n\t\t\t),\n\t\t\tsignature = get_signature(signing_key, str_to_sign);\n\n\t\t// Task 4: Adding the Signing information to the Request\n\t\tconst authorization_header = get_authorization_header(\n\t\t\tDEFAULT_ALGORITHM,\n\t\t\taccess_info.access_key,\n\t\t\tscope,\n\t\t\tsigned_headers(request.headers),\n\t\t\tsignature\n\t\t);\n\t\trequest.headers['Authorization'] = authorization_header;\n\n\t\treturn request;\n\t}\n\n\tstatic signUrl(\n\t\turlToSign: string,\n\t\taccessInfo: any,\n\t\tserviceInfo?: any,\n\t\texpiration?: number\n\t): string;\n\tstatic signUrl(\n\t\trequest: any,\n\t\taccessInfo: any,\n\t\tserviceInfo?: any,\n\t\texpiration?: number\n\t): string;\n\tstatic signUrl(\n\t\turlOrRequest: string | any,\n\t\taccessInfo: any,\n\t\tserviceInfo?: any,\n\t\texpiration?: number\n\t): string {\n\t\tconst urlToSign: string =\n\t\t\ttypeof urlOrRequest === 'object' ? urlOrRequest.url : urlOrRequest;\n\t\tconst method: string =\n\t\t\ttypeof urlOrRequest === 'object' ? urlOrRequest.method : 'GET';\n\t\tconst body: any =\n\t\t\ttypeof urlOrRequest === 'object' ? urlOrRequest.body : undefined;\n\n\t\tconst now = DateUtils.getDateWithClockOffset()\n\t\t\t.toISOString()\n\t\t\t.replace(/[:\\-]|\\.\\d{3}/g, '');\n\t\tconst today = now.substr(0, 8);\n\t\t// Intentionally discarding search\n\t\tconst { search, ...parsedUrl } = parse(urlToSign, true, true);\n\t\tconst { host } = parsedUrl;\n\t\tconst signedHeaders = { host };\n\n\t\tconst { region, service } =\n\t\t\tserviceInfo || parse_service_info({ url: format(parsedUrl) });\n\t\tconst credentialScope = credential_scope(today, region, service);\n\n\t\t// IoT service does not allow the session token in the canonical request\n\t\t// https://docs.aws.amazon.com/general/latest/gr/sigv4-add-signature-to-request.html\n\t\tconst sessionTokenRequired =\n\t\t\taccessInfo.session_token && service !== IOT_SERVICE_NAME;\n\t\tconst queryParams = {\n\t\t\t'X-Amz-Algorithm': DEFAULT_ALGORITHM,\n\t\t\t'X-Amz-Credential': [accessInfo.access_key, credentialScope].join('/'),\n\t\t\t'X-Amz-Date': now.substr(0, 16),\n\t\t\t...(sessionTokenRequired\n\t\t\t\t? { 'X-Amz-Security-Token': `${accessInfo.session_token}` }\n\t\t\t\t: {}),\n\t\t\t...(expiration ? { 'X-Amz-Expires': `${expiration}` } : {}),\n\t\t\t'X-Amz-SignedHeaders': Object.keys(signedHeaders).join(','),\n\t\t};\n\n\t\tconst canonicalRequest = canonical_request({\n\t\t\tmethod,\n\t\t\turl: format({\n\t\t\t\t...parsedUrl,\n\t\t\t\tquery: {\n\t\t\t\t\t...parsedUrl.query,\n\t\t\t\t\t...queryParams,\n\t\t\t\t},\n\t\t\t}),\n\t\t\theaders: signedHeaders,\n\t\t\tdata: body,\n\t\t});\n\n\t\tconst stringToSign = string_to_sign(\n\t\t\tDEFAULT_ALGORITHM,\n\t\t\tcanonicalRequest,\n\t\t\tnow,\n\t\t\tcredentialScope\n\t\t);\n\n\t\tconst signing_key = get_signing_key(accessInfo.secret_key, today, {\n\t\t\tregion,\n\t\t\tservice,\n\t\t});\n\t\tconst signature = get_signature(signing_key, stringToSign);\n\n\t\tconst additionalQueryParams = {\n\t\t\t'X-Amz-Signature': signature,\n\t\t\t...(accessInfo.session_token && {\n\t\t\t\t'X-Amz-Security-Token': accessInfo.session_token,\n\t\t\t}),\n\t\t};\n\n\t\tconst result = format({\n\t\t\tprotocol: parsedUrl.protocol,\n\t\t\tslashes: true,\n\t\t\thostname: parsedUrl.hostname,\n\t\t\tport: parsedUrl.port,\n\t\t\tpathname: parsedUrl.pathname,\n\t\t\tquery: {\n\t\t\t\t...parsedUrl.query,\n\t\t\t\t...queryParams,\n\t\t\t\t...additionalQueryParams,\n\t\t\t},\n\t\t});\n\n\t\treturn result;\n\t}\n}\n\n/**\n * @deprecated use per-function import\n */\nexport default Signer;\n"]},"metadata":{},"sourceType":"module"}