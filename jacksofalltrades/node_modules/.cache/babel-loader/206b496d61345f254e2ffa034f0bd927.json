{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { ComprehendClient } from \"./ComprehendClient\";\nimport { BatchDetectDominantLanguageCommand } from \"./commands/BatchDetectDominantLanguageCommand\";\nimport { BatchDetectEntitiesCommand } from \"./commands/BatchDetectEntitiesCommand\";\nimport { BatchDetectKeyPhrasesCommand } from \"./commands/BatchDetectKeyPhrasesCommand\";\nimport { BatchDetectSentimentCommand } from \"./commands/BatchDetectSentimentCommand\";\nimport { BatchDetectSyntaxCommand } from \"./commands/BatchDetectSyntaxCommand\";\nimport { ClassifyDocumentCommand } from \"./commands/ClassifyDocumentCommand\";\nimport { CreateDocumentClassifierCommand } from \"./commands/CreateDocumentClassifierCommand\";\nimport { CreateEndpointCommand } from \"./commands/CreateEndpointCommand\";\nimport { CreateEntityRecognizerCommand } from \"./commands/CreateEntityRecognizerCommand\";\nimport { DeleteDocumentClassifierCommand } from \"./commands/DeleteDocumentClassifierCommand\";\nimport { DeleteEndpointCommand } from \"./commands/DeleteEndpointCommand\";\nimport { DeleteEntityRecognizerCommand } from \"./commands/DeleteEntityRecognizerCommand\";\nimport { DescribeDocumentClassificationJobCommand } from \"./commands/DescribeDocumentClassificationJobCommand\";\nimport { DescribeDocumentClassifierCommand } from \"./commands/DescribeDocumentClassifierCommand\";\nimport { DescribeDominantLanguageDetectionJobCommand } from \"./commands/DescribeDominantLanguageDetectionJobCommand\";\nimport { DescribeEndpointCommand } from \"./commands/DescribeEndpointCommand\";\nimport { DescribeEntitiesDetectionJobCommand } from \"./commands/DescribeEntitiesDetectionJobCommand\";\nimport { DescribeEntityRecognizerCommand } from \"./commands/DescribeEntityRecognizerCommand\";\nimport { DescribeEventsDetectionJobCommand } from \"./commands/DescribeEventsDetectionJobCommand\";\nimport { DescribeKeyPhrasesDetectionJobCommand } from \"./commands/DescribeKeyPhrasesDetectionJobCommand\";\nimport { DescribePiiEntitiesDetectionJobCommand } from \"./commands/DescribePiiEntitiesDetectionJobCommand\";\nimport { DescribeSentimentDetectionJobCommand } from \"./commands/DescribeSentimentDetectionJobCommand\";\nimport { DescribeTopicsDetectionJobCommand } from \"./commands/DescribeTopicsDetectionJobCommand\";\nimport { DetectDominantLanguageCommand } from \"./commands/DetectDominantLanguageCommand\";\nimport { DetectEntitiesCommand } from \"./commands/DetectEntitiesCommand\";\nimport { DetectKeyPhrasesCommand } from \"./commands/DetectKeyPhrasesCommand\";\nimport { DetectPiiEntitiesCommand } from \"./commands/DetectPiiEntitiesCommand\";\nimport { DetectSentimentCommand } from \"./commands/DetectSentimentCommand\";\nimport { DetectSyntaxCommand } from \"./commands/DetectSyntaxCommand\";\nimport { ListDocumentClassificationJobsCommand } from \"./commands/ListDocumentClassificationJobsCommand\";\nimport { ListDocumentClassifiersCommand } from \"./commands/ListDocumentClassifiersCommand\";\nimport { ListDominantLanguageDetectionJobsCommand } from \"./commands/ListDominantLanguageDetectionJobsCommand\";\nimport { ListEndpointsCommand } from \"./commands/ListEndpointsCommand\";\nimport { ListEntitiesDetectionJobsCommand } from \"./commands/ListEntitiesDetectionJobsCommand\";\nimport { ListEntityRecognizersCommand } from \"./commands/ListEntityRecognizersCommand\";\nimport { ListEventsDetectionJobsCommand } from \"./commands/ListEventsDetectionJobsCommand\";\nimport { ListKeyPhrasesDetectionJobsCommand } from \"./commands/ListKeyPhrasesDetectionJobsCommand\";\nimport { ListPiiEntitiesDetectionJobsCommand } from \"./commands/ListPiiEntitiesDetectionJobsCommand\";\nimport { ListSentimentDetectionJobsCommand } from \"./commands/ListSentimentDetectionJobsCommand\";\nimport { ListTagsForResourceCommand } from \"./commands/ListTagsForResourceCommand\";\nimport { ListTopicsDetectionJobsCommand } from \"./commands/ListTopicsDetectionJobsCommand\";\nimport { StartDocumentClassificationJobCommand } from \"./commands/StartDocumentClassificationJobCommand\";\nimport { StartDominantLanguageDetectionJobCommand } from \"./commands/StartDominantLanguageDetectionJobCommand\";\nimport { StartEntitiesDetectionJobCommand } from \"./commands/StartEntitiesDetectionJobCommand\";\nimport { StartEventsDetectionJobCommand } from \"./commands/StartEventsDetectionJobCommand\";\nimport { StartKeyPhrasesDetectionJobCommand } from \"./commands/StartKeyPhrasesDetectionJobCommand\";\nimport { StartPiiEntitiesDetectionJobCommand } from \"./commands/StartPiiEntitiesDetectionJobCommand\";\nimport { StartSentimentDetectionJobCommand } from \"./commands/StartSentimentDetectionJobCommand\";\nimport { StartTopicsDetectionJobCommand } from \"./commands/StartTopicsDetectionJobCommand\";\nimport { StopDominantLanguageDetectionJobCommand } from \"./commands/StopDominantLanguageDetectionJobCommand\";\nimport { StopEntitiesDetectionJobCommand } from \"./commands/StopEntitiesDetectionJobCommand\";\nimport { StopEventsDetectionJobCommand } from \"./commands/StopEventsDetectionJobCommand\";\nimport { StopKeyPhrasesDetectionJobCommand } from \"./commands/StopKeyPhrasesDetectionJobCommand\";\nimport { StopPiiEntitiesDetectionJobCommand } from \"./commands/StopPiiEntitiesDetectionJobCommand\";\nimport { StopSentimentDetectionJobCommand } from \"./commands/StopSentimentDetectionJobCommand\";\nimport { StopTrainingDocumentClassifierCommand } from \"./commands/StopTrainingDocumentClassifierCommand\";\nimport { StopTrainingEntityRecognizerCommand } from \"./commands/StopTrainingEntityRecognizerCommand\";\nimport { TagResourceCommand } from \"./commands/TagResourceCommand\";\nimport { UntagResourceCommand } from \"./commands/UntagResourceCommand\";\nimport { UpdateEndpointCommand } from \"./commands/UpdateEndpointCommand\";\n/**\n * <p>Amazon Comprehend is an AWS service for gaining insight into the content of documents.\n *       Use these actions to determine the topics contained in your documents, the topics they\n *       discuss, the predominant sentiment expressed in them, the predominant language used, and\n *       more.</p>\n */\n\nvar Comprehend =\n/** @class */\nfunction (_super) {\n  __extends(Comprehend, _super);\n\n  function Comprehend() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Comprehend.prototype.batchDetectDominantLanguage = function (args, optionsOrCb, cb) {\n    var command = new BatchDetectDominantLanguageCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  Comprehend.prototype.batchDetectEntities = function (args, optionsOrCb, cb) {\n    var command = new BatchDetectEntitiesCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  Comprehend.prototype.batchDetectKeyPhrases = function (args, optionsOrCb, cb) {\n    var command = new BatchDetectKeyPhrasesCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  Comprehend.prototype.batchDetectSentiment = function (args, optionsOrCb, cb) {\n    var command = new BatchDetectSentimentCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  Comprehend.prototype.batchDetectSyntax = function (args, optionsOrCb, cb) {\n    var command = new BatchDetectSyntaxCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  Comprehend.prototype.classifyDocument = function (args, optionsOrCb, cb) {\n    var command = new ClassifyDocumentCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  Comprehend.prototype.createDocumentClassifier = function (args, optionsOrCb, cb) {\n    var command = new CreateDocumentClassifierCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  Comprehend.prototype.createEndpoint = function (args, optionsOrCb, cb) {\n    var command = new CreateEndpointCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  Comprehend.prototype.createEntityRecognizer = function (args, optionsOrCb, cb) {\n    var command = new CreateEntityRecognizerCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  Comprehend.prototype.deleteDocumentClassifier = function (args, optionsOrCb, cb) {\n    var command = new DeleteDocumentClassifierCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  Comprehend.prototype.deleteEndpoint = function (args, optionsOrCb, cb) {\n    var command = new DeleteEndpointCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  Comprehend.prototype.deleteEntityRecognizer = function (args, optionsOrCb, cb) {\n    var command = new DeleteEntityRecognizerCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  Comprehend.prototype.describeDocumentClassificationJob = function (args, optionsOrCb, cb) {\n    var command = new DescribeDocumentClassificationJobCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  Comprehend.prototype.describeDocumentClassifier = function (args, optionsOrCb, cb) {\n    var command = new DescribeDocumentClassifierCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  Comprehend.prototype.describeDominantLanguageDetectionJob = function (args, optionsOrCb, cb) {\n    var command = new DescribeDominantLanguageDetectionJobCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  Comprehend.prototype.describeEndpoint = function (args, optionsOrCb, cb) {\n    var command = new DescribeEndpointCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  Comprehend.prototype.describeEntitiesDetectionJob = function (args, optionsOrCb, cb) {\n    var command = new DescribeEntitiesDetectionJobCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  Comprehend.prototype.describeEntityRecognizer = function (args, optionsOrCb, cb) {\n    var command = new DescribeEntityRecognizerCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  Comprehend.prototype.describeEventsDetectionJob = function (args, optionsOrCb, cb) {\n    var command = new DescribeEventsDetectionJobCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  Comprehend.prototype.describeKeyPhrasesDetectionJob = function (args, optionsOrCb, cb) {\n    var command = new DescribeKeyPhrasesDetectionJobCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  Comprehend.prototype.describePiiEntitiesDetectionJob = function (args, optionsOrCb, cb) {\n    var command = new DescribePiiEntitiesDetectionJobCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  Comprehend.prototype.describeSentimentDetectionJob = function (args, optionsOrCb, cb) {\n    var command = new DescribeSentimentDetectionJobCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  Comprehend.prototype.describeTopicsDetectionJob = function (args, optionsOrCb, cb) {\n    var command = new DescribeTopicsDetectionJobCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  Comprehend.prototype.detectDominantLanguage = function (args, optionsOrCb, cb) {\n    var command = new DetectDominantLanguageCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  Comprehend.prototype.detectEntities = function (args, optionsOrCb, cb) {\n    var command = new DetectEntitiesCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  Comprehend.prototype.detectKeyPhrases = function (args, optionsOrCb, cb) {\n    var command = new DetectKeyPhrasesCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  Comprehend.prototype.detectPiiEntities = function (args, optionsOrCb, cb) {\n    var command = new DetectPiiEntitiesCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  Comprehend.prototype.detectSentiment = function (args, optionsOrCb, cb) {\n    var command = new DetectSentimentCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  Comprehend.prototype.detectSyntax = function (args, optionsOrCb, cb) {\n    var command = new DetectSyntaxCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  Comprehend.prototype.listDocumentClassificationJobs = function (args, optionsOrCb, cb) {\n    var command = new ListDocumentClassificationJobsCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  Comprehend.prototype.listDocumentClassifiers = function (args, optionsOrCb, cb) {\n    var command = new ListDocumentClassifiersCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  Comprehend.prototype.listDominantLanguageDetectionJobs = function (args, optionsOrCb, cb) {\n    var command = new ListDominantLanguageDetectionJobsCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  Comprehend.prototype.listEndpoints = function (args, optionsOrCb, cb) {\n    var command = new ListEndpointsCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  Comprehend.prototype.listEntitiesDetectionJobs = function (args, optionsOrCb, cb) {\n    var command = new ListEntitiesDetectionJobsCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  Comprehend.prototype.listEntityRecognizers = function (args, optionsOrCb, cb) {\n    var command = new ListEntityRecognizersCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  Comprehend.prototype.listEventsDetectionJobs = function (args, optionsOrCb, cb) {\n    var command = new ListEventsDetectionJobsCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  Comprehend.prototype.listKeyPhrasesDetectionJobs = function (args, optionsOrCb, cb) {\n    var command = new ListKeyPhrasesDetectionJobsCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  Comprehend.prototype.listPiiEntitiesDetectionJobs = function (args, optionsOrCb, cb) {\n    var command = new ListPiiEntitiesDetectionJobsCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  Comprehend.prototype.listSentimentDetectionJobs = function (args, optionsOrCb, cb) {\n    var command = new ListSentimentDetectionJobsCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  Comprehend.prototype.listTagsForResource = function (args, optionsOrCb, cb) {\n    var command = new ListTagsForResourceCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  Comprehend.prototype.listTopicsDetectionJobs = function (args, optionsOrCb, cb) {\n    var command = new ListTopicsDetectionJobsCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  Comprehend.prototype.startDocumentClassificationJob = function (args, optionsOrCb, cb) {\n    var command = new StartDocumentClassificationJobCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  Comprehend.prototype.startDominantLanguageDetectionJob = function (args, optionsOrCb, cb) {\n    var command = new StartDominantLanguageDetectionJobCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  Comprehend.prototype.startEntitiesDetectionJob = function (args, optionsOrCb, cb) {\n    var command = new StartEntitiesDetectionJobCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  Comprehend.prototype.startEventsDetectionJob = function (args, optionsOrCb, cb) {\n    var command = new StartEventsDetectionJobCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  Comprehend.prototype.startKeyPhrasesDetectionJob = function (args, optionsOrCb, cb) {\n    var command = new StartKeyPhrasesDetectionJobCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  Comprehend.prototype.startPiiEntitiesDetectionJob = function (args, optionsOrCb, cb) {\n    var command = new StartPiiEntitiesDetectionJobCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  Comprehend.prototype.startSentimentDetectionJob = function (args, optionsOrCb, cb) {\n    var command = new StartSentimentDetectionJobCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  Comprehend.prototype.startTopicsDetectionJob = function (args, optionsOrCb, cb) {\n    var command = new StartTopicsDetectionJobCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  Comprehend.prototype.stopDominantLanguageDetectionJob = function (args, optionsOrCb, cb) {\n    var command = new StopDominantLanguageDetectionJobCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  Comprehend.prototype.stopEntitiesDetectionJob = function (args, optionsOrCb, cb) {\n    var command = new StopEntitiesDetectionJobCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  Comprehend.prototype.stopEventsDetectionJob = function (args, optionsOrCb, cb) {\n    var command = new StopEventsDetectionJobCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  Comprehend.prototype.stopKeyPhrasesDetectionJob = function (args, optionsOrCb, cb) {\n    var command = new StopKeyPhrasesDetectionJobCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  Comprehend.prototype.stopPiiEntitiesDetectionJob = function (args, optionsOrCb, cb) {\n    var command = new StopPiiEntitiesDetectionJobCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  Comprehend.prototype.stopSentimentDetectionJob = function (args, optionsOrCb, cb) {\n    var command = new StopSentimentDetectionJobCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  Comprehend.prototype.stopTrainingDocumentClassifier = function (args, optionsOrCb, cb) {\n    var command = new StopTrainingDocumentClassifierCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  Comprehend.prototype.stopTrainingEntityRecognizer = function (args, optionsOrCb, cb) {\n    var command = new StopTrainingEntityRecognizerCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  Comprehend.prototype.tagResource = function (args, optionsOrCb, cb) {\n    var command = new TagResourceCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  Comprehend.prototype.untagResource = function (args, optionsOrCb, cb) {\n    var command = new UntagResourceCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  Comprehend.prototype.updateEndpoint = function (args, optionsOrCb, cb) {\n    var command = new UpdateEndpointCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  return Comprehend;\n}(ComprehendClient);\n\nexport { Comprehend };","map":{"version":3,"mappings":";AAAA,SAASA,gBAAT,QAAiC,oBAAjC;AACA,SACEC,kCADF,QAIO,+CAJP;AAKA,SACEC,0BADF,QAIO,uCAJP;AAKA,SACEC,4BADF,QAIO,yCAJP;AAKA,SACEC,2BADF,QAIO,wCAJP;AAKA,SACEC,wBADF,QAIO,qCAJP;AAKA,SACEC,uBADF,QAIO,oCAJP;AAKA,SACEC,+BADF,QAIO,4CAJP;AAKA,SACEC,qBADF,QAIO,kCAJP;AAKA,SACEC,6BADF,QAIO,0CAJP;AAKA,SACEC,+BADF,QAIO,4CAJP;AAKA,SACEC,qBADF,QAIO,kCAJP;AAKA,SACEC,6BADF,QAIO,0CAJP;AAKA,SACEC,wCADF,QAIO,qDAJP;AAKA,SACEC,iCADF,QAIO,8CAJP;AAKA,SACEC,2CADF,QAIO,wDAJP;AAKA,SACEC,uBADF,QAIO,oCAJP;AAKA,SACEC,mCADF,QAIO,gDAJP;AAKA,SACEC,+BADF,QAIO,4CAJP;AAKA,SACEC,iCADF,QAIO,8CAJP;AAKA,SACEC,qCADF,QAIO,kDAJP;AAKA,SACEC,sCADF,QAIO,mDAJP;AAKA,SACEC,oCADF,QAIO,iDAJP;AAKA,SACEC,iCADF,QAIO,8CAJP;AAKA,SACEC,6BADF,QAIO,0CAJP;AAKA,SACEC,qBADF,QAIO,kCAJP;AAKA,SACEC,uBADF,QAIO,oCAJP;AAKA,SACEC,wBADF,QAIO,qCAJP;AAKA,SACEC,sBADF,QAIO,mCAJP;AAKA,SACEC,mBADF,QAIO,gCAJP;AAKA,SACEC,qCADF,QAIO,kDAJP;AAKA,SACEC,8BADF,QAIO,2CAJP;AAKA,SACEC,wCADF,QAIO,qDAJP;AAKA,SACEC,oBADF,QAIO,iCAJP;AAKA,SACEC,gCADF,QAIO,6CAJP;AAKA,SACEC,4BADF,QAIO,yCAJP;AAKA,SACEC,8BADF,QAIO,2CAJP;AAKA,SACEC,kCADF,QAIO,+CAJP;AAKA,SACEC,mCADF,QAIO,gDAJP;AAKA,SACEC,iCADF,QAIO,8CAJP;AAKA,SACEC,0BADF,QAIO,uCAJP;AAKA,SACEC,8BADF,QAIO,2CAJP;AAKA,SACEC,qCADF,QAIO,kDAJP;AAKA,SACEC,wCADF,QAIO,qDAJP;AAKA,SACEC,gCADF,QAIO,6CAJP;AAKA,SACEC,8BADF,QAIO,2CAJP;AAKA,SACEC,kCADF,QAIO,+CAJP;AAKA,SACEC,mCADF,QAIO,gDAJP;AAKA,SACEC,iCADF,QAIO,8CAJP;AAKA,SACEC,8BADF,QAIO,2CAJP;AAKA,SACEC,uCADF,QAIO,oDAJP;AAKA,SACEC,+BADF,QAIO,4CAJP;AAKA,SACEC,6BADF,QAIO,0CAJP;AAKA,SACEC,iCADF,QAIO,8CAJP;AAKA,SACEC,kCADF,QAIO,+CAJP;AAKA,SACEC,gCADF,QAIO,6CAJP;AAKA,SACEC,qCADF,QAIO,kDAJP;AAKA,SACEC,mCADF,QAIO,gDAJP;AAKA,SAASC,kBAAT,QAAsF,+BAAtF;AACA,SACEC,oBADF,QAIO,iCAJP;AAKA,SACEC,qBADF,QAIO,kCAJP;AAOA;;;;;;;AAMA;AAAA;AAAA;EAAgCC;;EAAhC;;EAm+DC;;EAh9DQC,mDAAP,UACEC,IADF,EAEEC,WAFF,EAGEC,EAHF,EAG0E;IAExE,IAAMC,OAAO,GAAG,IAAIjE,kCAAJ,CAAuC8D,IAAvC,CAAhB;;IACA,IAAI,OAAOC,WAAP,KAAuB,UAA3B,EAAuC;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAnB;IACD,CAFD,MAEO,IAAI,OAAOC,EAAP,KAAc,UAAlB,EAA8B;MACnC,IAAI,OAAOD,WAAP,KAAuB,QAA3B,EAAqC,MAAM,IAAII,KAAJ,CAAU,iCAA+B,OAAOJ,WAAhD,CAAN;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAW,IAAI,EAAlC,EAAsCC,EAAtC;IACD,CAHM,MAGA;MACL,OAAO,KAAKE,IAAL,CAAUD,OAAV,EAAmBF,WAAnB,CAAP;IACD;EACF,CAdM;;EAkCAF,2CAAP,UACEC,IADF,EAEEC,WAFF,EAGEC,EAHF,EAGkE;IAEhE,IAAMC,OAAO,GAAG,IAAIhE,0BAAJ,CAA+B6D,IAA/B,CAAhB;;IACA,IAAI,OAAOC,WAAP,KAAuB,UAA3B,EAAuC;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAnB;IACD,CAFD,MAEO,IAAI,OAAOC,EAAP,KAAc,UAAlB,EAA8B;MACnC,IAAI,OAAOD,WAAP,KAAuB,QAA3B,EAAqC,MAAM,IAAII,KAAJ,CAAU,iCAA+B,OAAOJ,WAAhD,CAAN;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAW,IAAI,EAAlC,EAAsCC,EAAtC;IACD,CAHM,MAGA;MACL,OAAO,KAAKE,IAAL,CAAUD,OAAV,EAAmBF,WAAnB,CAAP;IACD;EACF,CAdM;;EAgCAF,6CAAP,UACEC,IADF,EAEEC,WAFF,EAGEC,EAHF,EAGoE;IAElE,IAAMC,OAAO,GAAG,IAAI/D,4BAAJ,CAAiC4D,IAAjC,CAAhB;;IACA,IAAI,OAAOC,WAAP,KAAuB,UAA3B,EAAuC;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAnB;IACD,CAFD,MAEO,IAAI,OAAOC,EAAP,KAAc,UAAlB,EAA8B;MACnC,IAAI,OAAOD,WAAP,KAAuB,QAA3B,EAAqC,MAAM,IAAII,KAAJ,CAAU,iCAA+B,OAAOJ,WAAhD,CAAN;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAW,IAAI,EAAlC,EAAsCC,EAAtC;IACD,CAHM,MAGA;MACL,OAAO,KAAKE,IAAL,CAAUD,OAAV,EAAmBF,WAAnB,CAAP;IACD;EACF,CAdM;;EAkCAF,4CAAP,UACEC,IADF,EAEEC,WAFF,EAGEC,EAHF,EAGmE;IAEjE,IAAMC,OAAO,GAAG,IAAI9D,2BAAJ,CAAgC2D,IAAhC,CAAhB;;IACA,IAAI,OAAOC,WAAP,KAAuB,UAA3B,EAAuC;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAnB;IACD,CAFD,MAEO,IAAI,OAAOC,EAAP,KAAc,UAAlB,EAA8B;MACnC,IAAI,OAAOD,WAAP,KAAuB,QAA3B,EAAqC,MAAM,IAAII,KAAJ,CAAU,iCAA+B,OAAOJ,WAAhD,CAAN;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAW,IAAI,EAAlC,EAAsCC,EAAtC;IACD,CAHM,MAGA;MACL,OAAO,KAAKE,IAAL,CAAUD,OAAV,EAAmBF,WAAnB,CAAP;IACD;EACF,CAdM;;EAiCAF,yCAAP,UACEC,IADF,EAEEC,WAFF,EAGEC,EAHF,EAGgE;IAE9D,IAAMC,OAAO,GAAG,IAAI7D,wBAAJ,CAA6B0D,IAA7B,CAAhB;;IACA,IAAI,OAAOC,WAAP,KAAuB,UAA3B,EAAuC;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAnB;IACD,CAFD,MAEO,IAAI,OAAOC,EAAP,KAAc,UAAlB,EAA8B;MACnC,IAAI,OAAOD,WAAP,KAAuB,QAA3B,EAAqC,MAAM,IAAII,KAAJ,CAAU,iCAA+B,OAAOJ,WAAhD,CAAN;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAW,IAAI,EAAlC,EAAsCC,EAAtC;IACD,CAHM,MAGA;MACL,OAAO,KAAKE,IAAL,CAAUD,OAAV,EAAmBF,WAAnB,CAAP;IACD;EACF,CAdM;;EAiCAF,wCAAP,UACEC,IADF,EAEEC,WAFF,EAGEC,EAHF,EAG+D;IAE7D,IAAMC,OAAO,GAAG,IAAI5D,uBAAJ,CAA4ByD,IAA5B,CAAhB;;IACA,IAAI,OAAOC,WAAP,KAAuB,UAA3B,EAAuC;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAnB;IACD,CAFD,MAEO,IAAI,OAAOC,EAAP,KAAc,UAAlB,EAA8B;MACnC,IAAI,OAAOD,WAAP,KAAuB,QAA3B,EAAqC,MAAM,IAAII,KAAJ,CAAU,iCAA+B,OAAOJ,WAAhD,CAAN;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAW,IAAI,EAAlC,EAAsCC,EAAtC;IACD,CAHM,MAGA;MACL,OAAO,KAAKE,IAAL,CAAUD,OAAV,EAAmBF,WAAnB,CAAP;IACD;EACF,CAdM;;EAmCAF,gDAAP,UACEC,IADF,EAEEC,WAFF,EAGEC,EAHF,EAGuE;IAErE,IAAMC,OAAO,GAAG,IAAI3D,+BAAJ,CAAoCwD,IAApC,CAAhB;;IACA,IAAI,OAAOC,WAAP,KAAuB,UAA3B,EAAuC;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAnB;IACD,CAFD,MAEO,IAAI,OAAOC,EAAP,KAAc,UAAlB,EAA8B;MACnC,IAAI,OAAOD,WAAP,KAAuB,QAA3B,EAAqC,MAAM,IAAII,KAAJ,CAAU,iCAA+B,OAAOJ,WAAhD,CAAN;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAW,IAAI,EAAlC,EAAsCC,EAAtC;IACD,CAHM,MAGA;MACL,OAAO,KAAKE,IAAL,CAAUD,OAAV,EAAmBF,WAAnB,CAAP;IACD;EACF,CAdM;;EAkCAF,sCAAP,UACEC,IADF,EAEEC,WAFF,EAGEC,EAHF,EAG6D;IAE3D,IAAMC,OAAO,GAAG,IAAI1D,qBAAJ,CAA0BuD,IAA1B,CAAhB;;IACA,IAAI,OAAOC,WAAP,KAAuB,UAA3B,EAAuC;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAnB;IACD,CAFD,MAEO,IAAI,OAAOC,EAAP,KAAc,UAAlB,EAA8B;MACnC,IAAI,OAAOD,WAAP,KAAuB,QAA3B,EAAqC,MAAM,IAAII,KAAJ,CAAU,iCAA+B,OAAOJ,WAAhD,CAAN;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAW,IAAI,EAAlC,EAAsCC,EAAtC;IACD,CAHM,MAGA;MACL,OAAO,KAAKE,IAAL,CAAUD,OAAV,EAAmBF,WAAnB,CAAP;IACD;EACF,CAdM;;EAkCAF,8CAAP,UACEC,IADF,EAEEC,WAFF,EAGEC,EAHF,EAGqE;IAEnE,IAAMC,OAAO,GAAG,IAAIzD,6BAAJ,CAAkCsD,IAAlC,CAAhB;;IACA,IAAI,OAAOC,WAAP,KAAuB,UAA3B,EAAuC;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAnB;IACD,CAFD,MAEO,IAAI,OAAOC,EAAP,KAAc,UAAlB,EAA8B;MACnC,IAAI,OAAOD,WAAP,KAAuB,QAA3B,EAAqC,MAAM,IAAII,KAAJ,CAAU,iCAA+B,OAAOJ,WAAhD,CAAN;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAW,IAAI,EAAlC,EAAsCC,EAAtC;IACD,CAHM,MAGA;MACL,OAAO,KAAKE,IAAL,CAAUD,OAAV,EAAmBF,WAAnB,CAAP;IACD;EACF,CAdM;;EAsCAF,gDAAP,UACEC,IADF,EAEEC,WAFF,EAGEC,EAHF,EAGuE;IAErE,IAAMC,OAAO,GAAG,IAAIxD,+BAAJ,CAAoCqD,IAApC,CAAhB;;IACA,IAAI,OAAOC,WAAP,KAAuB,UAA3B,EAAuC;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAnB;IACD,CAFD,MAEO,IAAI,OAAOC,EAAP,KAAc,UAAlB,EAA8B;MACnC,IAAI,OAAOD,WAAP,KAAuB,QAA3B,EAAqC,MAAM,IAAII,KAAJ,CAAU,iCAA+B,OAAOJ,WAAhD,CAAN;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAW,IAAI,EAAlC,EAAsCC,EAAtC;IACD,CAHM,MAGA;MACL,OAAO,KAAKE,IAAL,CAAUD,OAAV,EAAmBF,WAAnB,CAAP;IACD;EACF,CAdM;;EAiCAF,sCAAP,UACEC,IADF,EAEEC,WAFF,EAGEC,EAHF,EAG6D;IAE3D,IAAMC,OAAO,GAAG,IAAIvD,qBAAJ,CAA0BoD,IAA1B,CAAhB;;IACA,IAAI,OAAOC,WAAP,KAAuB,UAA3B,EAAuC;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAnB;IACD,CAFD,MAEO,IAAI,OAAOC,EAAP,KAAc,UAAlB,EAA8B;MACnC,IAAI,OAAOD,WAAP,KAAuB,QAA3B,EAAqC,MAAM,IAAII,KAAJ,CAAU,iCAA+B,OAAOJ,WAAhD,CAAN;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAW,IAAI,EAAlC,EAAsCC,EAAtC;IACD,CAHM,MAGA;MACL,OAAO,KAAKE,IAAL,CAAUD,OAAV,EAAmBF,WAAnB,CAAP;IACD;EACF,CAdM;;EAsCAF,8CAAP,UACEC,IADF,EAEEC,WAFF,EAGEC,EAHF,EAGqE;IAEnE,IAAMC,OAAO,GAAG,IAAItD,6BAAJ,CAAkCmD,IAAlC,CAAhB;;IACA,IAAI,OAAOC,WAAP,KAAuB,UAA3B,EAAuC;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAnB;IACD,CAFD,MAEO,IAAI,OAAOC,EAAP,KAAc,UAAlB,EAA8B;MACnC,IAAI,OAAOD,WAAP,KAAuB,QAA3B,EAAqC,MAAM,IAAII,KAAJ,CAAU,iCAA+B,OAAOJ,WAAhD,CAAN;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAW,IAAI,EAAlC,EAAsCC,EAAtC;IACD,CAHM,MAGA;MACL,OAAO,KAAKE,IAAL,CAAUD,OAAV,EAAmBF,WAAnB,CAAP;IACD;EACF,CAdM;;EAiCAF,yDAAP,UACEC,IADF,EAEEC,WAFF,EAGEC,EAHF,EAGgF;IAE9E,IAAMC,OAAO,GAAG,IAAIrD,wCAAJ,CAA6CkD,IAA7C,CAAhB;;IACA,IAAI,OAAOC,WAAP,KAAuB,UAA3B,EAAuC;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAnB;IACD,CAFD,MAEO,IAAI,OAAOC,EAAP,KAAc,UAAlB,EAA8B;MACnC,IAAI,OAAOD,WAAP,KAAuB,QAA3B,EAAqC,MAAM,IAAII,KAAJ,CAAU,iCAA+B,OAAOJ,WAAhD,CAAN;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAW,IAAI,EAAlC,EAAsCC,EAAtC;IACD,CAHM,MAGA;MACL,OAAO,KAAKE,IAAL,CAAUD,OAAV,EAAmBF,WAAnB,CAAP;IACD;EACF,CAdM;;EAgCAF,kDAAP,UACEC,IADF,EAEEC,WAFF,EAGEC,EAHF,EAGyE;IAEvE,IAAMC,OAAO,GAAG,IAAIpD,iCAAJ,CAAsCiD,IAAtC,CAAhB;;IACA,IAAI,OAAOC,WAAP,KAAuB,UAA3B,EAAuC;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAnB;IACD,CAFD,MAEO,IAAI,OAAOC,EAAP,KAAc,UAAlB,EAA8B;MACnC,IAAI,OAAOD,WAAP,KAAuB,QAA3B,EAAqC,MAAM,IAAII,KAAJ,CAAU,iCAA+B,OAAOJ,WAAhD,CAAN;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAW,IAAI,EAAlC,EAAsCC,EAAtC;IACD,CAHM,MAGA;MACL,OAAO,KAAKE,IAAL,CAAUD,OAAV,EAAmBF,WAAnB,CAAP;IACD;EACF,CAdM;;EAiCAF,4DAAP,UACEC,IADF,EAEEC,WAFF,EAGEC,EAHF,EAGmF;IAEjF,IAAMC,OAAO,GAAG,IAAInD,2CAAJ,CAAgDgD,IAAhD,CAAhB;;IACA,IAAI,OAAOC,WAAP,KAAuB,UAA3B,EAAuC;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAnB;IACD,CAFD,MAEO,IAAI,OAAOC,EAAP,KAAc,UAAlB,EAA8B;MACnC,IAAI,OAAOD,WAAP,KAAuB,QAA3B,EAAqC,MAAM,IAAII,KAAJ,CAAU,iCAA+B,OAAOJ,WAAhD,CAAN;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAW,IAAI,EAAlC,EAAsCC,EAAtC;IACD,CAHM,MAGA;MACL,OAAO,KAAKE,IAAL,CAAUD,OAAV,EAAmBF,WAAnB,CAAP;IACD;EACF,CAdM;;EAiCAF,wCAAP,UACEC,IADF,EAEEC,WAFF,EAGEC,EAHF,EAG+D;IAE7D,IAAMC,OAAO,GAAG,IAAIlD,uBAAJ,CAA4B+C,IAA5B,CAAhB;;IACA,IAAI,OAAOC,WAAP,KAAuB,UAA3B,EAAuC;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAnB;IACD,CAFD,MAEO,IAAI,OAAOC,EAAP,KAAc,UAAlB,EAA8B;MACnC,IAAI,OAAOD,WAAP,KAAuB,QAA3B,EAAqC,MAAM,IAAII,KAAJ,CAAU,iCAA+B,OAAOJ,WAAhD,CAAN;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAW,IAAI,EAAlC,EAAsCC,EAAtC;IACD,CAHM,MAGA;MACL,OAAO,KAAKE,IAAL,CAAUD,OAAV,EAAmBF,WAAnB,CAAP;IACD;EACF,CAdM;;EAiCAF,oDAAP,UACEC,IADF,EAEEC,WAFF,EAGEC,EAHF,EAG2E;IAEzE,IAAMC,OAAO,GAAG,IAAIjD,mCAAJ,CAAwC8C,IAAxC,CAAhB;;IACA,IAAI,OAAOC,WAAP,KAAuB,UAA3B,EAAuC;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAnB;IACD,CAFD,MAEO,IAAI,OAAOC,EAAP,KAAc,UAAlB,EAA8B;MACnC,IAAI,OAAOD,WAAP,KAAuB,QAA3B,EAAqC,MAAM,IAAII,KAAJ,CAAU,iCAA+B,OAAOJ,WAAhD,CAAN;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAW,IAAI,EAAlC,EAAsCC,EAAtC;IACD,CAHM,MAGA;MACL,OAAO,KAAKE,IAAL,CAAUD,OAAV,EAAmBF,WAAnB,CAAP;IACD;EACF,CAdM;;EAiCAF,gDAAP,UACEC,IADF,EAEEC,WAFF,EAGEC,EAHF,EAGuE;IAErE,IAAMC,OAAO,GAAG,IAAIhD,+BAAJ,CAAoC6C,IAApC,CAAhB;;IACA,IAAI,OAAOC,WAAP,KAAuB,UAA3B,EAAuC;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAnB;IACD,CAFD,MAEO,IAAI,OAAOC,EAAP,KAAc,UAAlB,EAA8B;MACnC,IAAI,OAAOD,WAAP,KAAuB,QAA3B,EAAqC,MAAM,IAAII,KAAJ,CAAU,iCAA+B,OAAOJ,WAAhD,CAAN;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAW,IAAI,EAAlC,EAAsCC,EAAtC;IACD,CAHM,MAGA;MACL,OAAO,KAAKE,IAAL,CAAUD,OAAV,EAAmBF,WAAnB,CAAP;IACD;EACF,CAdM;;EAgCAF,kDAAP,UACEC,IADF,EAEEC,WAFF,EAGEC,EAHF,EAGyE;IAEvE,IAAMC,OAAO,GAAG,IAAI/C,iCAAJ,CAAsC4C,IAAtC,CAAhB;;IACA,IAAI,OAAOC,WAAP,KAAuB,UAA3B,EAAuC;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAnB;IACD,CAFD,MAEO,IAAI,OAAOC,EAAP,KAAc,UAAlB,EAA8B;MACnC,IAAI,OAAOD,WAAP,KAAuB,QAA3B,EAAqC,MAAM,IAAII,KAAJ,CAAU,iCAA+B,OAAOJ,WAAhD,CAAN;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAW,IAAI,EAAlC,EAAsCC,EAAtC;IACD,CAHM,MAGA;MACL,OAAO,KAAKE,IAAL,CAAUD,OAAV,EAAmBF,WAAnB,CAAP;IACD;EACF,CAdM;;EAiCAF,sDAAP,UACEC,IADF,EAEEC,WAFF,EAGEC,EAHF,EAG6E;IAE3E,IAAMC,OAAO,GAAG,IAAI9C,qCAAJ,CAA0C2C,IAA1C,CAAhB;;IACA,IAAI,OAAOC,WAAP,KAAuB,UAA3B,EAAuC;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAnB;IACD,CAFD,MAEO,IAAI,OAAOC,EAAP,KAAc,UAAlB,EAA8B;MACnC,IAAI,OAAOD,WAAP,KAAuB,QAA3B,EAAqC,MAAM,IAAII,KAAJ,CAAU,iCAA+B,OAAOJ,WAAhD,CAAN;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAW,IAAI,EAAlC,EAAsCC,EAAtC;IACD,CAHM,MAGA;MACL,OAAO,KAAKE,IAAL,CAAUD,OAAV,EAAmBF,WAAnB,CAAP;IACD;EACF,CAdM;;EAiCAF,uDAAP,UACEC,IADF,EAEEC,WAFF,EAGEC,EAHF,EAG8E;IAE5E,IAAMC,OAAO,GAAG,IAAI7C,sCAAJ,CAA2C0C,IAA3C,CAAhB;;IACA,IAAI,OAAOC,WAAP,KAAuB,UAA3B,EAAuC;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAnB;IACD,CAFD,MAEO,IAAI,OAAOC,EAAP,KAAc,UAAlB,EAA8B;MACnC,IAAI,OAAOD,WAAP,KAAuB,QAA3B,EAAqC,MAAM,IAAII,KAAJ,CAAU,iCAA+B,OAAOJ,WAAhD,CAAN;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAW,IAAI,EAAlC,EAAsCC,EAAtC;IACD,CAHM,MAGA;MACL,OAAO,KAAKE,IAAL,CAAUD,OAAV,EAAmBF,WAAnB,CAAP;IACD;EACF,CAdM;;EAiCAF,qDAAP,UACEC,IADF,EAEEC,WAFF,EAGEC,EAHF,EAG4E;IAE1E,IAAMC,OAAO,GAAG,IAAI5C,oCAAJ,CAAyCyC,IAAzC,CAAhB;;IACA,IAAI,OAAOC,WAAP,KAAuB,UAA3B,EAAuC;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAnB;IACD,CAFD,MAEO,IAAI,OAAOC,EAAP,KAAc,UAAlB,EAA8B;MACnC,IAAI,OAAOD,WAAP,KAAuB,QAA3B,EAAqC,MAAM,IAAII,KAAJ,CAAU,iCAA+B,OAAOJ,WAAhD,CAAN;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAW,IAAI,EAAlC,EAAsCC,EAAtC;IACD,CAHM,MAGA;MACL,OAAO,KAAKE,IAAL,CAAUD,OAAV,EAAmBF,WAAnB,CAAP;IACD;EACF,CAdM;;EAiCAF,kDAAP,UACEC,IADF,EAEEC,WAFF,EAGEC,EAHF,EAGyE;IAEvE,IAAMC,OAAO,GAAG,IAAI3C,iCAAJ,CAAsCwC,IAAtC,CAAhB;;IACA,IAAI,OAAOC,WAAP,KAAuB,UAA3B,EAAuC;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAnB;IACD,CAFD,MAEO,IAAI,OAAOC,EAAP,KAAc,UAAlB,EAA8B;MACnC,IAAI,OAAOD,WAAP,KAAuB,QAA3B,EAAqC,MAAM,IAAII,KAAJ,CAAU,iCAA+B,OAAOJ,WAAhD,CAAN;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAW,IAAI,EAAlC,EAAsCC,EAAtC;IACD,CAHM,MAGA;MACL,OAAO,KAAKE,IAAL,CAAUD,OAAV,EAAmBF,WAAnB,CAAP;IACD;EACF,CAdM;;EAiCAF,8CAAP,UACEC,IADF,EAEEC,WAFF,EAGEC,EAHF,EAGqE;IAEnE,IAAMC,OAAO,GAAG,IAAI1C,6BAAJ,CAAkCuC,IAAlC,CAAhB;;IACA,IAAI,OAAOC,WAAP,KAAuB,UAA3B,EAAuC;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAnB;IACD,CAFD,MAEO,IAAI,OAAOC,EAAP,KAAc,UAAlB,EAA8B;MACnC,IAAI,OAAOD,WAAP,KAAuB,QAA3B,EAAqC,MAAM,IAAII,KAAJ,CAAU,iCAA+B,OAAOJ,WAAhD,CAAN;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAW,IAAI,EAAlC,EAAsCC,EAAtC;IACD,CAHM,MAGA;MACL,OAAO,KAAKE,IAAL,CAAUD,OAAV,EAAmBF,WAAnB,CAAP;IACD;EACF,CAdM;;EAiCAF,sCAAP,UACEC,IADF,EAEEC,WAFF,EAGEC,EAHF,EAG6D;IAE3D,IAAMC,OAAO,GAAG,IAAIzC,qBAAJ,CAA0BsC,IAA1B,CAAhB;;IACA,IAAI,OAAOC,WAAP,KAAuB,UAA3B,EAAuC;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAnB;IACD,CAFD,MAEO,IAAI,OAAOC,EAAP,KAAc,UAAlB,EAA8B;MACnC,IAAI,OAAOD,WAAP,KAAuB,QAA3B,EAAqC,MAAM,IAAII,KAAJ,CAAU,iCAA+B,OAAOJ,WAAhD,CAAN;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAW,IAAI,EAAlC,EAAsCC,EAAtC;IACD,CAHM,MAGA;MACL,OAAO,KAAKE,IAAL,CAAUD,OAAV,EAAmBF,WAAnB,CAAP;IACD;EACF,CAdM;;EAgCAF,wCAAP,UACEC,IADF,EAEEC,WAFF,EAGEC,EAHF,EAG+D;IAE7D,IAAMC,OAAO,GAAG,IAAIxC,uBAAJ,CAA4BqC,IAA5B,CAAhB;;IACA,IAAI,OAAOC,WAAP,KAAuB,UAA3B,EAAuC;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAnB;IACD,CAFD,MAEO,IAAI,OAAOC,EAAP,KAAc,UAAlB,EAA8B;MACnC,IAAI,OAAOD,WAAP,KAAuB,QAA3B,EAAqC,MAAM,IAAII,KAAJ,CAAU,iCAA+B,OAAOJ,WAAhD,CAAN;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAW,IAAI,EAAlC,EAAsCC,EAAtC;IACD,CAHM,MAGA;MACL,OAAO,KAAKE,IAAL,CAAUD,OAAV,EAAmBF,WAAnB,CAAP;IACD;EACF,CAdM;;EAiCAF,yCAAP,UACEC,IADF,EAEEC,WAFF,EAGEC,EAHF,EAGgE;IAE9D,IAAMC,OAAO,GAAG,IAAIvC,wBAAJ,CAA6BoC,IAA7B,CAAhB;;IACA,IAAI,OAAOC,WAAP,KAAuB,UAA3B,EAAuC;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAnB;IACD,CAFD,MAEO,IAAI,OAAOC,EAAP,KAAc,UAAlB,EAA8B;MACnC,IAAI,OAAOD,WAAP,KAAuB,QAA3B,EAAqC,MAAM,IAAII,KAAJ,CAAU,iCAA+B,OAAOJ,WAAhD,CAAN;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAW,IAAI,EAAlC,EAAsCC,EAAtC;IACD,CAHM,MAGA;MACL,OAAO,KAAKE,IAAL,CAAUD,OAAV,EAAmBF,WAAnB,CAAP;IACD;EACF,CAdM;;EAiCAF,uCAAP,UACEC,IADF,EAEEC,WAFF,EAGEC,EAHF,EAG8D;IAE5D,IAAMC,OAAO,GAAG,IAAItC,sBAAJ,CAA2BmC,IAA3B,CAAhB;;IACA,IAAI,OAAOC,WAAP,KAAuB,UAA3B,EAAuC;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAnB;IACD,CAFD,MAEO,IAAI,OAAOC,EAAP,KAAc,UAAlB,EAA8B;MACnC,IAAI,OAAOD,WAAP,KAAuB,QAA3B,EAAqC,MAAM,IAAII,KAAJ,CAAU,iCAA+B,OAAOJ,WAAhD,CAAN;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAW,IAAI,EAAlC,EAAsCC,EAAtC;IACD,CAHM,MAGA;MACL,OAAO,KAAKE,IAAL,CAAUD,OAAV,EAAmBF,WAAnB,CAAP;IACD;EACF,CAdM;;EA8BAF,oCAAP,UACEC,IADF,EAEEC,WAFF,EAGEC,EAHF,EAG2D;IAEzD,IAAMC,OAAO,GAAG,IAAIrC,mBAAJ,CAAwBkC,IAAxB,CAAhB;;IACA,IAAI,OAAOC,WAAP,KAAuB,UAA3B,EAAuC;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAnB;IACD,CAFD,MAEO,IAAI,OAAOC,EAAP,KAAc,UAAlB,EAA8B;MACnC,IAAI,OAAOD,WAAP,KAAuB,QAA3B,EAAqC,MAAM,IAAII,KAAJ,CAAU,iCAA+B,OAAOJ,WAAhD,CAAN;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAW,IAAI,EAAlC,EAAsCC,EAAtC;IACD,CAHM,MAGA;MACL,OAAO,KAAKE,IAAL,CAAUD,OAAV,EAAmBF,WAAnB,CAAP;IACD;EACF,CAdM;;EAgCAF,sDAAP,UACEC,IADF,EAEEC,WAFF,EAGEC,EAHF,EAG6E;IAE3E,IAAMC,OAAO,GAAG,IAAIpC,qCAAJ,CAA0CiC,IAA1C,CAAhB;;IACA,IAAI,OAAOC,WAAP,KAAuB,UAA3B,EAAuC;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAnB;IACD,CAFD,MAEO,IAAI,OAAOC,EAAP,KAAc,UAAlB,EAA8B;MACnC,IAAI,OAAOD,WAAP,KAAuB,QAA3B,EAAqC,MAAM,IAAII,KAAJ,CAAU,iCAA+B,OAAOJ,WAAhD,CAAN;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAW,IAAI,EAAlC,EAAsCC,EAAtC;IACD,CAHM,MAGA;MACL,OAAO,KAAKE,IAAL,CAAUD,OAAV,EAAmBF,WAAnB,CAAP;IACD;EACF,CAdM;;EAgCAF,+CAAP,UACEC,IADF,EAEEC,WAFF,EAGEC,EAHF,EAGsE;IAEpE,IAAMC,OAAO,GAAG,IAAInC,8BAAJ,CAAmCgC,IAAnC,CAAhB;;IACA,IAAI,OAAOC,WAAP,KAAuB,UAA3B,EAAuC;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAnB;IACD,CAFD,MAEO,IAAI,OAAOC,EAAP,KAAc,UAAlB,EAA8B;MACnC,IAAI,OAAOD,WAAP,KAAuB,QAA3B,EAAqC,MAAM,IAAII,KAAJ,CAAU,iCAA+B,OAAOJ,WAAhD,CAAN;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAW,IAAI,EAAlC,EAAsCC,EAAtC;IACD,CAHM,MAGA;MACL,OAAO,KAAKE,IAAL,CAAUD,OAAV,EAAmBF,WAAnB,CAAP;IACD;EACF,CAdM;;EAgCAF,yDAAP,UACEC,IADF,EAEEC,WAFF,EAGEC,EAHF,EAGgF;IAE9E,IAAMC,OAAO,GAAG,IAAIlC,wCAAJ,CAA6C+B,IAA7C,CAAhB;;IACA,IAAI,OAAOC,WAAP,KAAuB,UAA3B,EAAuC;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAnB;IACD,CAFD,MAEO,IAAI,OAAOC,EAAP,KAAc,UAAlB,EAA8B;MACnC,IAAI,OAAOD,WAAP,KAAuB,QAA3B,EAAqC,MAAM,IAAII,KAAJ,CAAU,iCAA+B,OAAOJ,WAAhD,CAAN;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAW,IAAI,EAAlC,EAAsCC,EAAtC;IACD,CAHM,MAGA;MACL,OAAO,KAAKE,IAAL,CAAUD,OAAV,EAAmBF,WAAnB,CAAP;IACD;EACF,CAdM;;EAgCAF,qCAAP,UACEC,IADF,EAEEC,WAFF,EAGEC,EAHF,EAG4D;IAE1D,IAAMC,OAAO,GAAG,IAAIjC,oBAAJ,CAAyB8B,IAAzB,CAAhB;;IACA,IAAI,OAAOC,WAAP,KAAuB,UAA3B,EAAuC;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAnB;IACD,CAFD,MAEO,IAAI,OAAOC,EAAP,KAAc,UAAlB,EAA8B;MACnC,IAAI,OAAOD,WAAP,KAAuB,QAA3B,EAAqC,MAAM,IAAII,KAAJ,CAAU,iCAA+B,OAAOJ,WAAhD,CAAN;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAW,IAAI,EAAlC,EAAsCC,EAAtC;IACD,CAHM,MAGA;MACL,OAAO,KAAKE,IAAL,CAAUD,OAAV,EAAmBF,WAAnB,CAAP;IACD;EACF,CAdM;;EAgCAF,iDAAP,UACEC,IADF,EAEEC,WAFF,EAGEC,EAHF,EAGwE;IAEtE,IAAMC,OAAO,GAAG,IAAIhC,gCAAJ,CAAqC6B,IAArC,CAAhB;;IACA,IAAI,OAAOC,WAAP,KAAuB,UAA3B,EAAuC;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAnB;IACD,CAFD,MAEO,IAAI,OAAOC,EAAP,KAAc,UAAlB,EAA8B;MACnC,IAAI,OAAOD,WAAP,KAAuB,QAA3B,EAAqC,MAAM,IAAII,KAAJ,CAAU,iCAA+B,OAAOJ,WAAhD,CAAN;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAW,IAAI,EAAlC,EAAsCC,EAAtC;IACD,CAHM,MAGA;MACL,OAAO,KAAKE,IAAL,CAAUD,OAAV,EAAmBF,WAAnB,CAAP;IACD;EACF,CAdM;;EAqCAF,6CAAP,UACEC,IADF,EAEEC,WAFF,EAGEC,EAHF,EAGoE;IAElE,IAAMC,OAAO,GAAG,IAAI/B,4BAAJ,CAAiC4B,IAAjC,CAAhB;;IACA,IAAI,OAAOC,WAAP,KAAuB,UAA3B,EAAuC;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAnB;IACD,CAFD,MAEO,IAAI,OAAOC,EAAP,KAAc,UAAlB,EAA8B;MACnC,IAAI,OAAOD,WAAP,KAAuB,QAA3B,EAAqC,MAAM,IAAII,KAAJ,CAAU,iCAA+B,OAAOJ,WAAhD,CAAN;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAW,IAAI,EAAlC,EAAsCC,EAAtC;IACD,CAHM,MAGA;MACL,OAAO,KAAKE,IAAL,CAAUD,OAAV,EAAmBF,WAAnB,CAAP;IACD;EACF,CAdM;;EAgCAF,+CAAP,UACEC,IADF,EAEEC,WAFF,EAGEC,EAHF,EAGsE;IAEpE,IAAMC,OAAO,GAAG,IAAI9B,8BAAJ,CAAmC2B,IAAnC,CAAhB;;IACA,IAAI,OAAOC,WAAP,KAAuB,UAA3B,EAAuC;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAnB;IACD,CAFD,MAEO,IAAI,OAAOC,EAAP,KAAc,UAAlB,EAA8B;MACnC,IAAI,OAAOD,WAAP,KAAuB,QAA3B,EAAqC,MAAM,IAAII,KAAJ,CAAU,iCAA+B,OAAOJ,WAAhD,CAAN;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAW,IAAI,EAAlC,EAAsCC,EAAtC;IACD,CAHM,MAGA;MACL,OAAO,KAAKE,IAAL,CAAUD,OAAV,EAAmBF,WAAnB,CAAP;IACD;EACF,CAdM;;EAgCAF,mDAAP,UACEC,IADF,EAEEC,WAFF,EAGEC,EAHF,EAG0E;IAExE,IAAMC,OAAO,GAAG,IAAI7B,kCAAJ,CAAuC0B,IAAvC,CAAhB;;IACA,IAAI,OAAOC,WAAP,KAAuB,UAA3B,EAAuC;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAnB;IACD,CAFD,MAEO,IAAI,OAAOC,EAAP,KAAc,UAAlB,EAA8B;MACnC,IAAI,OAAOD,WAAP,KAAuB,QAA3B,EAAqC,MAAM,IAAII,KAAJ,CAAU,iCAA+B,OAAOJ,WAAhD,CAAN;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAW,IAAI,EAAlC,EAAsCC,EAAtC;IACD,CAHM,MAGA;MACL,OAAO,KAAKE,IAAL,CAAUD,OAAV,EAAmBF,WAAnB,CAAP;IACD;EACF,CAdM;;EAgCAF,oDAAP,UACEC,IADF,EAEEC,WAFF,EAGEC,EAHF,EAG2E;IAEzE,IAAMC,OAAO,GAAG,IAAI5B,mCAAJ,CAAwCyB,IAAxC,CAAhB;;IACA,IAAI,OAAOC,WAAP,KAAuB,UAA3B,EAAuC;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAnB;IACD,CAFD,MAEO,IAAI,OAAOC,EAAP,KAAc,UAAlB,EAA8B;MACnC,IAAI,OAAOD,WAAP,KAAuB,QAA3B,EAAqC,MAAM,IAAII,KAAJ,CAAU,iCAA+B,OAAOJ,WAAhD,CAAN;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAW,IAAI,EAAlC,EAAsCC,EAAtC;IACD,CAHM,MAGA;MACL,OAAO,KAAKE,IAAL,CAAUD,OAAV,EAAmBF,WAAnB,CAAP;IACD;EACF,CAdM;;EAgCAF,kDAAP,UACEC,IADF,EAEEC,WAFF,EAGEC,EAHF,EAGyE;IAEvE,IAAMC,OAAO,GAAG,IAAI3B,iCAAJ,CAAsCwB,IAAtC,CAAhB;;IACA,IAAI,OAAOC,WAAP,KAAuB,UAA3B,EAAuC;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAnB;IACD,CAFD,MAEO,IAAI,OAAOC,EAAP,KAAc,UAAlB,EAA8B;MACnC,IAAI,OAAOD,WAAP,KAAuB,QAA3B,EAAqC,MAAM,IAAII,KAAJ,CAAU,iCAA+B,OAAOJ,WAAhD,CAAN;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAW,IAAI,EAAlC,EAAsCC,EAAtC;IACD,CAHM,MAGA;MACL,OAAO,KAAKE,IAAL,CAAUD,OAAV,EAAmBF,WAAnB,CAAP;IACD;EACF,CAdM;;EAgCAF,2CAAP,UACEC,IADF,EAEEC,WAFF,EAGEC,EAHF,EAGkE;IAEhE,IAAMC,OAAO,GAAG,IAAI1B,0BAAJ,CAA+BuB,IAA/B,CAAhB;;IACA,IAAI,OAAOC,WAAP,KAAuB,UAA3B,EAAuC;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAnB;IACD,CAFD,MAEO,IAAI,OAAOC,EAAP,KAAc,UAAlB,EAA8B;MACnC,IAAI,OAAOD,WAAP,KAAuB,QAA3B,EAAqC,MAAM,IAAII,KAAJ,CAAU,iCAA+B,OAAOJ,WAAhD,CAAN;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAW,IAAI,EAAlC,EAAsCC,EAAtC;IACD,CAHM,MAGA;MACL,OAAO,KAAKE,IAAL,CAAUD,OAAV,EAAmBF,WAAnB,CAAP;IACD;EACF,CAdM;;EAgCAF,+CAAP,UACEC,IADF,EAEEC,WAFF,EAGEC,EAHF,EAGsE;IAEpE,IAAMC,OAAO,GAAG,IAAIzB,8BAAJ,CAAmCsB,IAAnC,CAAhB;;IACA,IAAI,OAAOC,WAAP,KAAuB,UAA3B,EAAuC;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAnB;IACD,CAFD,MAEO,IAAI,OAAOC,EAAP,KAAc,UAAlB,EAA8B;MACnC,IAAI,OAAOD,WAAP,KAAuB,QAA3B,EAAqC,MAAM,IAAII,KAAJ,CAAU,iCAA+B,OAAOJ,WAAhD,CAAN;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAW,IAAI,EAAlC,EAAsCC,EAAtC;IACD,CAHM,MAGA;MACL,OAAO,KAAKE,IAAL,CAAUD,OAAV,EAAmBF,WAAnB,CAAP;IACD;EACF,CAdM;;EAiCAF,sDAAP,UACEC,IADF,EAEEC,WAFF,EAGEC,EAHF,EAG6E;IAE3E,IAAMC,OAAO,GAAG,IAAIxB,qCAAJ,CAA0CqB,IAA1C,CAAhB;;IACA,IAAI,OAAOC,WAAP,KAAuB,UAA3B,EAAuC;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAnB;IACD,CAFD,MAEO,IAAI,OAAOC,EAAP,KAAc,UAAlB,EAA8B;MACnC,IAAI,OAAOD,WAAP,KAAuB,QAA3B,EAAqC,MAAM,IAAII,KAAJ,CAAU,iCAA+B,OAAOJ,WAAhD,CAAN;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAW,IAAI,EAAlC,EAAsCC,EAAtC;IACD,CAHM,MAGA;MACL,OAAO,KAAKE,IAAL,CAAUD,OAAV,EAAmBF,WAAnB,CAAP;IACD;EACF,CAdM;;EAkCAF,yDAAP,UACEC,IADF,EAEEC,WAFF,EAGEC,EAHF,EAGgF;IAE9E,IAAMC,OAAO,GAAG,IAAIvB,wCAAJ,CAA6CoB,IAA7C,CAAhB;;IACA,IAAI,OAAOC,WAAP,KAAuB,UAA3B,EAAuC;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAnB;IACD,CAFD,MAEO,IAAI,OAAOC,EAAP,KAAc,UAAlB,EAA8B;MACnC,IAAI,OAAOD,WAAP,KAAuB,QAA3B,EAAqC,MAAM,IAAII,KAAJ,CAAU,iCAA+B,OAAOJ,WAAhD,CAAN;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAW,IAAI,EAAlC,EAAsCC,EAAtC;IACD,CAHM,MAGA;MACL,OAAO,KAAKE,IAAL,CAAUD,OAAV,EAAmBF,WAAnB,CAAP;IACD;EACF,CAdM;;EAoCAF,iDAAP,UACEC,IADF,EAEEC,WAFF,EAGEC,EAHF,EAGwE;IAEtE,IAAMC,OAAO,GAAG,IAAItB,gCAAJ,CAAqCmB,IAArC,CAAhB;;IACA,IAAI,OAAOC,WAAP,KAAuB,UAA3B,EAAuC;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAnB;IACD,CAFD,MAEO,IAAI,OAAOC,EAAP,KAAc,UAAlB,EAA8B;MACnC,IAAI,OAAOD,WAAP,KAAuB,QAA3B,EAAqC,MAAM,IAAII,KAAJ,CAAU,iCAA+B,OAAOJ,WAAhD,CAAN;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAW,IAAI,EAAlC,EAAsCC,EAAtC;IACD,CAHM,MAGA;MACL,OAAO,KAAKE,IAAL,CAAUD,OAAV,EAAmBF,WAAnB,CAAP;IACD;EACF,CAdM;;EAgCAF,+CAAP,UACEC,IADF,EAEEC,WAFF,EAGEC,EAHF,EAGsE;IAEpE,IAAMC,OAAO,GAAG,IAAIrB,8BAAJ,CAAmCkB,IAAnC,CAAhB;;IACA,IAAI,OAAOC,WAAP,KAAuB,UAA3B,EAAuC;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAnB;IACD,CAFD,MAEO,IAAI,OAAOC,EAAP,KAAc,UAAlB,EAA8B;MACnC,IAAI,OAAOD,WAAP,KAAuB,QAA3B,EAAqC,MAAM,IAAII,KAAJ,CAAU,iCAA+B,OAAOJ,WAAhD,CAAN;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAW,IAAI,EAAlC,EAAsCC,EAAtC;IACD,CAHM,MAGA;MACL,OAAO,KAAKE,IAAL,CAAUD,OAAV,EAAmBF,WAAnB,CAAP;IACD;EACF,CAdM;;EAkCAF,mDAAP,UACEC,IADF,EAEEC,WAFF,EAGEC,EAHF,EAG0E;IAExE,IAAMC,OAAO,GAAG,IAAIpB,kCAAJ,CAAuCiB,IAAvC,CAAhB;;IACA,IAAI,OAAOC,WAAP,KAAuB,UAA3B,EAAuC;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAnB;IACD,CAFD,MAEO,IAAI,OAAOC,EAAP,KAAc,UAAlB,EAA8B;MACnC,IAAI,OAAOD,WAAP,KAAuB,QAA3B,EAAqC,MAAM,IAAII,KAAJ,CAAU,iCAA+B,OAAOJ,WAAhD,CAAN;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAW,IAAI,EAAlC,EAAsCC,EAAtC;IACD,CAHM,MAGA;MACL,OAAO,KAAKE,IAAL,CAAUD,OAAV,EAAmBF,WAAnB,CAAP;IACD;EACF,CAdM;;EAgCAF,oDAAP,UACEC,IADF,EAEEC,WAFF,EAGEC,EAHF,EAG2E;IAEzE,IAAMC,OAAO,GAAG,IAAInB,mCAAJ,CAAwCgB,IAAxC,CAAhB;;IACA,IAAI,OAAOC,WAAP,KAAuB,UAA3B,EAAuC;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAnB;IACD,CAFD,MAEO,IAAI,OAAOC,EAAP,KAAc,UAAlB,EAA8B;MACnC,IAAI,OAAOD,WAAP,KAAuB,QAA3B,EAAqC,MAAM,IAAII,KAAJ,CAAU,iCAA+B,OAAOJ,WAAhD,CAAN;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAW,IAAI,EAAlC,EAAsCC,EAAtC;IACD,CAHM,MAGA;MACL,OAAO,KAAKE,IAAL,CAAUD,OAAV,EAAmBF,WAAnB,CAAP;IACD;EACF,CAdM;;EAkCAF,kDAAP,UACEC,IADF,EAEEC,WAFF,EAGEC,EAHF,EAGyE;IAEvE,IAAMC,OAAO,GAAG,IAAIlB,iCAAJ,CAAsCe,IAAtC,CAAhB;;IACA,IAAI,OAAOC,WAAP,KAAuB,UAA3B,EAAuC;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAnB;IACD,CAFD,MAEO,IAAI,OAAOC,EAAP,KAAc,UAAlB,EAA8B;MACnC,IAAI,OAAOD,WAAP,KAAuB,QAA3B,EAAqC,MAAM,IAAII,KAAJ,CAAU,iCAA+B,OAAOJ,WAAhD,CAAN;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAW,IAAI,EAAlC,EAAsCC,EAAtC;IACD,CAHM,MAGA;MACL,OAAO,KAAKE,IAAL,CAAUD,OAAV,EAAmBF,WAAnB,CAAP;IACD;EACF,CAdM;;EAiCAF,+CAAP,UACEC,IADF,EAEEC,WAFF,EAGEC,EAHF,EAGsE;IAEpE,IAAMC,OAAO,GAAG,IAAIjB,8BAAJ,CAAmCc,IAAnC,CAAhB;;IACA,IAAI,OAAOC,WAAP,KAAuB,UAA3B,EAAuC;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAnB;IACD,CAFD,MAEO,IAAI,OAAOC,EAAP,KAAc,UAAlB,EAA8B;MACnC,IAAI,OAAOD,WAAP,KAAuB,QAA3B,EAAqC,MAAM,IAAII,KAAJ,CAAU,iCAA+B,OAAOJ,WAAhD,CAAN;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAW,IAAI,EAAlC,EAAsCC,EAAtC;IACD,CAHM,MAGA;MACL,OAAO,KAAKE,IAAL,CAAUD,OAAV,EAAmBF,WAAnB,CAAP;IACD;EACF,CAdM;;EAyCAF,wDAAP,UACEC,IADF,EAEEC,WAFF,EAGEC,EAHF,EAG+E;IAE7E,IAAMC,OAAO,GAAG,IAAIhB,uCAAJ,CAA4Ca,IAA5C,CAAhB;;IACA,IAAI,OAAOC,WAAP,KAAuB,UAA3B,EAAuC;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAnB;IACD,CAFD,MAEO,IAAI,OAAOC,EAAP,KAAc,UAAlB,EAA8B;MACnC,IAAI,OAAOD,WAAP,KAAuB,QAA3B,EAAqC,MAAM,IAAII,KAAJ,CAAU,iCAA+B,OAAOJ,WAAhD,CAAN;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAW,IAAI,EAAlC,EAAsCC,EAAtC;IACD,CAHM,MAGA;MACL,OAAO,KAAKE,IAAL,CAAUD,OAAV,EAAmBF,WAAnB,CAAP;IACD;EACF,CAdM;;EAyCAF,gDAAP,UACEC,IADF,EAEEC,WAFF,EAGEC,EAHF,EAGuE;IAErE,IAAMC,OAAO,GAAG,IAAIf,+BAAJ,CAAoCY,IAApC,CAAhB;;IACA,IAAI,OAAOC,WAAP,KAAuB,UAA3B,EAAuC;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAnB;IACD,CAFD,MAEO,IAAI,OAAOC,EAAP,KAAc,UAAlB,EAA8B;MACnC,IAAI,OAAOD,WAAP,KAAuB,QAA3B,EAAqC,MAAM,IAAII,KAAJ,CAAU,iCAA+B,OAAOJ,WAAhD,CAAN;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAW,IAAI,EAAlC,EAAsCC,EAAtC;IACD,CAHM,MAGA;MACL,OAAO,KAAKE,IAAL,CAAUD,OAAV,EAAmBF,WAAnB,CAAP;IACD;EACF,CAdM;;EAgCAF,8CAAP,UACEC,IADF,EAEEC,WAFF,EAGEC,EAHF,EAGqE;IAEnE,IAAMC,OAAO,GAAG,IAAId,6BAAJ,CAAkCW,IAAlC,CAAhB;;IACA,IAAI,OAAOC,WAAP,KAAuB,UAA3B,EAAuC;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAnB;IACD,CAFD,MAEO,IAAI,OAAOC,EAAP,KAAc,UAAlB,EAA8B;MACnC,IAAI,OAAOD,WAAP,KAAuB,QAA3B,EAAqC,MAAM,IAAII,KAAJ,CAAU,iCAA+B,OAAOJ,WAAhD,CAAN;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAW,IAAI,EAAlC,EAAsCC,EAAtC;IACD,CAHM,MAGA;MACL,OAAO,KAAKE,IAAL,CAAUD,OAAV,EAAmBF,WAAnB,CAAP;IACD;EACF,CAdM;;EAyCAF,kDAAP,UACEC,IADF,EAEEC,WAFF,EAGEC,EAHF,EAGyE;IAEvE,IAAMC,OAAO,GAAG,IAAIb,iCAAJ,CAAsCU,IAAtC,CAAhB;;IACA,IAAI,OAAOC,WAAP,KAAuB,UAA3B,EAAuC;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAnB;IACD,CAFD,MAEO,IAAI,OAAOC,EAAP,KAAc,UAAlB,EAA8B;MACnC,IAAI,OAAOD,WAAP,KAAuB,QAA3B,EAAqC,MAAM,IAAII,KAAJ,CAAU,iCAA+B,OAAOJ,WAAhD,CAAN;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAW,IAAI,EAAlC,EAAsCC,EAAtC;IACD,CAHM,MAGA;MACL,OAAO,KAAKE,IAAL,CAAUD,OAAV,EAAmBF,WAAnB,CAAP;IACD;EACF,CAdM;;EAgCAF,mDAAP,UACEC,IADF,EAEEC,WAFF,EAGEC,EAHF,EAG0E;IAExE,IAAMC,OAAO,GAAG,IAAIZ,kCAAJ,CAAuCS,IAAvC,CAAhB;;IACA,IAAI,OAAOC,WAAP,KAAuB,UAA3B,EAAuC;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAnB;IACD,CAFD,MAEO,IAAI,OAAOC,EAAP,KAAc,UAAlB,EAA8B;MACnC,IAAI,OAAOD,WAAP,KAAuB,QAA3B,EAAqC,MAAM,IAAII,KAAJ,CAAU,iCAA+B,OAAOJ,WAAhD,CAAN;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAW,IAAI,EAAlC,EAAsCC,EAAtC;IACD,CAHM,MAGA;MACL,OAAO,KAAKE,IAAL,CAAUD,OAAV,EAAmBF,WAAnB,CAAP;IACD;EACF,CAdM;;EAyCAF,iDAAP,UACEC,IADF,EAEEC,WAFF,EAGEC,EAHF,EAGwE;IAEtE,IAAMC,OAAO,GAAG,IAAIX,gCAAJ,CAAqCQ,IAArC,CAAhB;;IACA,IAAI,OAAOC,WAAP,KAAuB,UAA3B,EAAuC;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAnB;IACD,CAFD,MAEO,IAAI,OAAOC,EAAP,KAAc,UAAlB,EAA8B;MACnC,IAAI,OAAOD,WAAP,KAAuB,QAA3B,EAAqC,MAAM,IAAII,KAAJ,CAAU,iCAA+B,OAAOJ,WAAhD,CAAN;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAW,IAAI,EAAlC,EAAsCC,EAAtC;IACD,CAHM,MAGA;MACL,OAAO,KAAKE,IAAL,CAAUD,OAAV,EAAmBF,WAAnB,CAAP;IACD;EACF,CAdM;;EAqCAF,sDAAP,UACEC,IADF,EAEEC,WAFF,EAGEC,EAHF,EAG6E;IAE3E,IAAMC,OAAO,GAAG,IAAIV,qCAAJ,CAA0CO,IAA1C,CAAhB;;IACA,IAAI,OAAOC,WAAP,KAAuB,UAA3B,EAAuC;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAnB;IACD,CAFD,MAEO,IAAI,OAAOC,EAAP,KAAc,UAAlB,EAA8B;MACnC,IAAI,OAAOD,WAAP,KAAuB,QAA3B,EAAqC,MAAM,IAAII,KAAJ,CAAU,iCAA+B,OAAOJ,WAAhD,CAAN;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAW,IAAI,EAAlC,EAAsCC,EAAtC;IACD,CAHM,MAGA;MACL,OAAO,KAAKE,IAAL,CAAUD,OAAV,EAAmBF,WAAnB,CAAP;IACD;EACF,CAdM;;EAqCAF,oDAAP,UACEC,IADF,EAEEC,WAFF,EAGEC,EAHF,EAG2E;IAEzE,IAAMC,OAAO,GAAG,IAAIT,mCAAJ,CAAwCM,IAAxC,CAAhB;;IACA,IAAI,OAAOC,WAAP,KAAuB,UAA3B,EAAuC;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAnB;IACD,CAFD,MAEO,IAAI,OAAOC,EAAP,KAAc,UAAlB,EAA8B;MACnC,IAAI,OAAOD,WAAP,KAAuB,QAA3B,EAAqC,MAAM,IAAII,KAAJ,CAAU,iCAA+B,OAAOJ,WAAhD,CAAN;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAW,IAAI,EAAlC,EAAsCC,EAAtC;IACD,CAHM,MAGA;MACL,OAAO,KAAKE,IAAL,CAAUD,OAAV,EAAmBF,WAAnB,CAAP;IACD;EACF,CAdM;;EA6BAF,mCAAP,UACEC,IADF,EAEEC,WAFF,EAGEC,EAHF,EAG0D;IAExD,IAAMC,OAAO,GAAG,IAAIR,kBAAJ,CAAuBK,IAAvB,CAAhB;;IACA,IAAI,OAAOC,WAAP,KAAuB,UAA3B,EAAuC;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAnB;IACD,CAFD,MAEO,IAAI,OAAOC,EAAP,KAAc,UAAlB,EAA8B;MACnC,IAAI,OAAOD,WAAP,KAAuB,QAA3B,EAAqC,MAAM,IAAII,KAAJ,CAAU,iCAA+B,OAAOJ,WAAhD,CAAN;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAW,IAAI,EAAlC,EAAsCC,EAAtC;IACD,CAHM,MAGA;MACL,OAAO,KAAKE,IAAL,CAAUD,OAAV,EAAmBF,WAAnB,CAAP;IACD;EACF,CAdM;;EAgCAF,qCAAP,UACEC,IADF,EAEEC,WAFF,EAGEC,EAHF,EAG4D;IAE1D,IAAMC,OAAO,GAAG,IAAIP,oBAAJ,CAAyBI,IAAzB,CAAhB;;IACA,IAAI,OAAOC,WAAP,KAAuB,UAA3B,EAAuC;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAnB;IACD,CAFD,MAEO,IAAI,OAAOC,EAAP,KAAc,UAAlB,EAA8B;MACnC,IAAI,OAAOD,WAAP,KAAuB,QAA3B,EAAqC,MAAM,IAAII,KAAJ,CAAU,iCAA+B,OAAOJ,WAAhD,CAAN;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAW,IAAI,EAAlC,EAAsCC,EAAtC;IACD,CAHM,MAGA;MACL,OAAO,KAAKE,IAAL,CAAUD,OAAV,EAAmBF,WAAnB,CAAP;IACD;EACF,CAdM;;EAgCAF,sCAAP,UACEC,IADF,EAEEC,WAFF,EAGEC,EAHF,EAG6D;IAE3D,IAAMC,OAAO,GAAG,IAAIN,qBAAJ,CAA0BG,IAA1B,CAAhB;;IACA,IAAI,OAAOC,WAAP,KAAuB,UAA3B,EAAuC;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAnB;IACD,CAFD,MAEO,IAAI,OAAOC,EAAP,KAAc,UAAlB,EAA8B;MACnC,IAAI,OAAOD,WAAP,KAAuB,QAA3B,EAAqC,MAAM,IAAII,KAAJ,CAAU,iCAA+B,OAAOJ,WAAhD,CAAN;MACrC,KAAKG,IAAL,CAAUD,OAAV,EAAmBF,WAAW,IAAI,EAAlC,EAAsCC,EAAtC;IACD,CAHM,MAGA;MACL,OAAO,KAAKE,IAAL,CAAUD,OAAV,EAAmBF,WAAnB,CAAP;IACD;EACF,CAdM;;EAeT;AAAC,CAn+DD,CAAgChE,gBAAhC","names":["ComprehendClient","BatchDetectDominantLanguageCommand","BatchDetectEntitiesCommand","BatchDetectKeyPhrasesCommand","BatchDetectSentimentCommand","BatchDetectSyntaxCommand","ClassifyDocumentCommand","CreateDocumentClassifierCommand","CreateEndpointCommand","CreateEntityRecognizerCommand","DeleteDocumentClassifierCommand","DeleteEndpointCommand","DeleteEntityRecognizerCommand","DescribeDocumentClassificationJobCommand","DescribeDocumentClassifierCommand","DescribeDominantLanguageDetectionJobCommand","DescribeEndpointCommand","DescribeEntitiesDetectionJobCommand","DescribeEntityRecognizerCommand","DescribeEventsDetectionJobCommand","DescribeKeyPhrasesDetectionJobCommand","DescribePiiEntitiesDetectionJobCommand","DescribeSentimentDetectionJobCommand","DescribeTopicsDetectionJobCommand","DetectDominantLanguageCommand","DetectEntitiesCommand","DetectKeyPhrasesCommand","DetectPiiEntitiesCommand","DetectSentimentCommand","DetectSyntaxCommand","ListDocumentClassificationJobsCommand","ListDocumentClassifiersCommand","ListDominantLanguageDetectionJobsCommand","ListEndpointsCommand","ListEntitiesDetectionJobsCommand","ListEntityRecognizersCommand","ListEventsDetectionJobsCommand","ListKeyPhrasesDetectionJobsCommand","ListPiiEntitiesDetectionJobsCommand","ListSentimentDetectionJobsCommand","ListTagsForResourceCommand","ListTopicsDetectionJobsCommand","StartDocumentClassificationJobCommand","StartDominantLanguageDetectionJobCommand","StartEntitiesDetectionJobCommand","StartEventsDetectionJobCommand","StartKeyPhrasesDetectionJobCommand","StartPiiEntitiesDetectionJobCommand","StartSentimentDetectionJobCommand","StartTopicsDetectionJobCommand","StopDominantLanguageDetectionJobCommand","StopEntitiesDetectionJobCommand","StopEventsDetectionJobCommand","StopKeyPhrasesDetectionJobCommand","StopPiiEntitiesDetectionJobCommand","StopSentimentDetectionJobCommand","StopTrainingDocumentClassifierCommand","StopTrainingEntityRecognizerCommand","TagResourceCommand","UntagResourceCommand","UpdateEndpointCommand","__extends","Comprehend","args","optionsOrCb","cb","command","send","Error"],"sources":["C:\\Users\\lmore\\OneDrive\\Documents\\GitHub\\JacksOfAllTrades\\jacksofalltrades\\node_modules\\@aws-sdk\\client-comprehend\\Comprehend.ts"],"sourcesContent":["import { ComprehendClient } from \"./ComprehendClient\";\nimport {\n  BatchDetectDominantLanguageCommand,\n  BatchDetectDominantLanguageCommandInput,\n  BatchDetectDominantLanguageCommandOutput,\n} from \"./commands/BatchDetectDominantLanguageCommand\";\nimport {\n  BatchDetectEntitiesCommand,\n  BatchDetectEntitiesCommandInput,\n  BatchDetectEntitiesCommandOutput,\n} from \"./commands/BatchDetectEntitiesCommand\";\nimport {\n  BatchDetectKeyPhrasesCommand,\n  BatchDetectKeyPhrasesCommandInput,\n  BatchDetectKeyPhrasesCommandOutput,\n} from \"./commands/BatchDetectKeyPhrasesCommand\";\nimport {\n  BatchDetectSentimentCommand,\n  BatchDetectSentimentCommandInput,\n  BatchDetectSentimentCommandOutput,\n} from \"./commands/BatchDetectSentimentCommand\";\nimport {\n  BatchDetectSyntaxCommand,\n  BatchDetectSyntaxCommandInput,\n  BatchDetectSyntaxCommandOutput,\n} from \"./commands/BatchDetectSyntaxCommand\";\nimport {\n  ClassifyDocumentCommand,\n  ClassifyDocumentCommandInput,\n  ClassifyDocumentCommandOutput,\n} from \"./commands/ClassifyDocumentCommand\";\nimport {\n  CreateDocumentClassifierCommand,\n  CreateDocumentClassifierCommandInput,\n  CreateDocumentClassifierCommandOutput,\n} from \"./commands/CreateDocumentClassifierCommand\";\nimport {\n  CreateEndpointCommand,\n  CreateEndpointCommandInput,\n  CreateEndpointCommandOutput,\n} from \"./commands/CreateEndpointCommand\";\nimport {\n  CreateEntityRecognizerCommand,\n  CreateEntityRecognizerCommandInput,\n  CreateEntityRecognizerCommandOutput,\n} from \"./commands/CreateEntityRecognizerCommand\";\nimport {\n  DeleteDocumentClassifierCommand,\n  DeleteDocumentClassifierCommandInput,\n  DeleteDocumentClassifierCommandOutput,\n} from \"./commands/DeleteDocumentClassifierCommand\";\nimport {\n  DeleteEndpointCommand,\n  DeleteEndpointCommandInput,\n  DeleteEndpointCommandOutput,\n} from \"./commands/DeleteEndpointCommand\";\nimport {\n  DeleteEntityRecognizerCommand,\n  DeleteEntityRecognizerCommandInput,\n  DeleteEntityRecognizerCommandOutput,\n} from \"./commands/DeleteEntityRecognizerCommand\";\nimport {\n  DescribeDocumentClassificationJobCommand,\n  DescribeDocumentClassificationJobCommandInput,\n  DescribeDocumentClassificationJobCommandOutput,\n} from \"./commands/DescribeDocumentClassificationJobCommand\";\nimport {\n  DescribeDocumentClassifierCommand,\n  DescribeDocumentClassifierCommandInput,\n  DescribeDocumentClassifierCommandOutput,\n} from \"./commands/DescribeDocumentClassifierCommand\";\nimport {\n  DescribeDominantLanguageDetectionJobCommand,\n  DescribeDominantLanguageDetectionJobCommandInput,\n  DescribeDominantLanguageDetectionJobCommandOutput,\n} from \"./commands/DescribeDominantLanguageDetectionJobCommand\";\nimport {\n  DescribeEndpointCommand,\n  DescribeEndpointCommandInput,\n  DescribeEndpointCommandOutput,\n} from \"./commands/DescribeEndpointCommand\";\nimport {\n  DescribeEntitiesDetectionJobCommand,\n  DescribeEntitiesDetectionJobCommandInput,\n  DescribeEntitiesDetectionJobCommandOutput,\n} from \"./commands/DescribeEntitiesDetectionJobCommand\";\nimport {\n  DescribeEntityRecognizerCommand,\n  DescribeEntityRecognizerCommandInput,\n  DescribeEntityRecognizerCommandOutput,\n} from \"./commands/DescribeEntityRecognizerCommand\";\nimport {\n  DescribeEventsDetectionJobCommand,\n  DescribeEventsDetectionJobCommandInput,\n  DescribeEventsDetectionJobCommandOutput,\n} from \"./commands/DescribeEventsDetectionJobCommand\";\nimport {\n  DescribeKeyPhrasesDetectionJobCommand,\n  DescribeKeyPhrasesDetectionJobCommandInput,\n  DescribeKeyPhrasesDetectionJobCommandOutput,\n} from \"./commands/DescribeKeyPhrasesDetectionJobCommand\";\nimport {\n  DescribePiiEntitiesDetectionJobCommand,\n  DescribePiiEntitiesDetectionJobCommandInput,\n  DescribePiiEntitiesDetectionJobCommandOutput,\n} from \"./commands/DescribePiiEntitiesDetectionJobCommand\";\nimport {\n  DescribeSentimentDetectionJobCommand,\n  DescribeSentimentDetectionJobCommandInput,\n  DescribeSentimentDetectionJobCommandOutput,\n} from \"./commands/DescribeSentimentDetectionJobCommand\";\nimport {\n  DescribeTopicsDetectionJobCommand,\n  DescribeTopicsDetectionJobCommandInput,\n  DescribeTopicsDetectionJobCommandOutput,\n} from \"./commands/DescribeTopicsDetectionJobCommand\";\nimport {\n  DetectDominantLanguageCommand,\n  DetectDominantLanguageCommandInput,\n  DetectDominantLanguageCommandOutput,\n} from \"./commands/DetectDominantLanguageCommand\";\nimport {\n  DetectEntitiesCommand,\n  DetectEntitiesCommandInput,\n  DetectEntitiesCommandOutput,\n} from \"./commands/DetectEntitiesCommand\";\nimport {\n  DetectKeyPhrasesCommand,\n  DetectKeyPhrasesCommandInput,\n  DetectKeyPhrasesCommandOutput,\n} from \"./commands/DetectKeyPhrasesCommand\";\nimport {\n  DetectPiiEntitiesCommand,\n  DetectPiiEntitiesCommandInput,\n  DetectPiiEntitiesCommandOutput,\n} from \"./commands/DetectPiiEntitiesCommand\";\nimport {\n  DetectSentimentCommand,\n  DetectSentimentCommandInput,\n  DetectSentimentCommandOutput,\n} from \"./commands/DetectSentimentCommand\";\nimport {\n  DetectSyntaxCommand,\n  DetectSyntaxCommandInput,\n  DetectSyntaxCommandOutput,\n} from \"./commands/DetectSyntaxCommand\";\nimport {\n  ListDocumentClassificationJobsCommand,\n  ListDocumentClassificationJobsCommandInput,\n  ListDocumentClassificationJobsCommandOutput,\n} from \"./commands/ListDocumentClassificationJobsCommand\";\nimport {\n  ListDocumentClassifiersCommand,\n  ListDocumentClassifiersCommandInput,\n  ListDocumentClassifiersCommandOutput,\n} from \"./commands/ListDocumentClassifiersCommand\";\nimport {\n  ListDominantLanguageDetectionJobsCommand,\n  ListDominantLanguageDetectionJobsCommandInput,\n  ListDominantLanguageDetectionJobsCommandOutput,\n} from \"./commands/ListDominantLanguageDetectionJobsCommand\";\nimport {\n  ListEndpointsCommand,\n  ListEndpointsCommandInput,\n  ListEndpointsCommandOutput,\n} from \"./commands/ListEndpointsCommand\";\nimport {\n  ListEntitiesDetectionJobsCommand,\n  ListEntitiesDetectionJobsCommandInput,\n  ListEntitiesDetectionJobsCommandOutput,\n} from \"./commands/ListEntitiesDetectionJobsCommand\";\nimport {\n  ListEntityRecognizersCommand,\n  ListEntityRecognizersCommandInput,\n  ListEntityRecognizersCommandOutput,\n} from \"./commands/ListEntityRecognizersCommand\";\nimport {\n  ListEventsDetectionJobsCommand,\n  ListEventsDetectionJobsCommandInput,\n  ListEventsDetectionJobsCommandOutput,\n} from \"./commands/ListEventsDetectionJobsCommand\";\nimport {\n  ListKeyPhrasesDetectionJobsCommand,\n  ListKeyPhrasesDetectionJobsCommandInput,\n  ListKeyPhrasesDetectionJobsCommandOutput,\n} from \"./commands/ListKeyPhrasesDetectionJobsCommand\";\nimport {\n  ListPiiEntitiesDetectionJobsCommand,\n  ListPiiEntitiesDetectionJobsCommandInput,\n  ListPiiEntitiesDetectionJobsCommandOutput,\n} from \"./commands/ListPiiEntitiesDetectionJobsCommand\";\nimport {\n  ListSentimentDetectionJobsCommand,\n  ListSentimentDetectionJobsCommandInput,\n  ListSentimentDetectionJobsCommandOutput,\n} from \"./commands/ListSentimentDetectionJobsCommand\";\nimport {\n  ListTagsForResourceCommand,\n  ListTagsForResourceCommandInput,\n  ListTagsForResourceCommandOutput,\n} from \"./commands/ListTagsForResourceCommand\";\nimport {\n  ListTopicsDetectionJobsCommand,\n  ListTopicsDetectionJobsCommandInput,\n  ListTopicsDetectionJobsCommandOutput,\n} from \"./commands/ListTopicsDetectionJobsCommand\";\nimport {\n  StartDocumentClassificationJobCommand,\n  StartDocumentClassificationJobCommandInput,\n  StartDocumentClassificationJobCommandOutput,\n} from \"./commands/StartDocumentClassificationJobCommand\";\nimport {\n  StartDominantLanguageDetectionJobCommand,\n  StartDominantLanguageDetectionJobCommandInput,\n  StartDominantLanguageDetectionJobCommandOutput,\n} from \"./commands/StartDominantLanguageDetectionJobCommand\";\nimport {\n  StartEntitiesDetectionJobCommand,\n  StartEntitiesDetectionJobCommandInput,\n  StartEntitiesDetectionJobCommandOutput,\n} from \"./commands/StartEntitiesDetectionJobCommand\";\nimport {\n  StartEventsDetectionJobCommand,\n  StartEventsDetectionJobCommandInput,\n  StartEventsDetectionJobCommandOutput,\n} from \"./commands/StartEventsDetectionJobCommand\";\nimport {\n  StartKeyPhrasesDetectionJobCommand,\n  StartKeyPhrasesDetectionJobCommandInput,\n  StartKeyPhrasesDetectionJobCommandOutput,\n} from \"./commands/StartKeyPhrasesDetectionJobCommand\";\nimport {\n  StartPiiEntitiesDetectionJobCommand,\n  StartPiiEntitiesDetectionJobCommandInput,\n  StartPiiEntitiesDetectionJobCommandOutput,\n} from \"./commands/StartPiiEntitiesDetectionJobCommand\";\nimport {\n  StartSentimentDetectionJobCommand,\n  StartSentimentDetectionJobCommandInput,\n  StartSentimentDetectionJobCommandOutput,\n} from \"./commands/StartSentimentDetectionJobCommand\";\nimport {\n  StartTopicsDetectionJobCommand,\n  StartTopicsDetectionJobCommandInput,\n  StartTopicsDetectionJobCommandOutput,\n} from \"./commands/StartTopicsDetectionJobCommand\";\nimport {\n  StopDominantLanguageDetectionJobCommand,\n  StopDominantLanguageDetectionJobCommandInput,\n  StopDominantLanguageDetectionJobCommandOutput,\n} from \"./commands/StopDominantLanguageDetectionJobCommand\";\nimport {\n  StopEntitiesDetectionJobCommand,\n  StopEntitiesDetectionJobCommandInput,\n  StopEntitiesDetectionJobCommandOutput,\n} from \"./commands/StopEntitiesDetectionJobCommand\";\nimport {\n  StopEventsDetectionJobCommand,\n  StopEventsDetectionJobCommandInput,\n  StopEventsDetectionJobCommandOutput,\n} from \"./commands/StopEventsDetectionJobCommand\";\nimport {\n  StopKeyPhrasesDetectionJobCommand,\n  StopKeyPhrasesDetectionJobCommandInput,\n  StopKeyPhrasesDetectionJobCommandOutput,\n} from \"./commands/StopKeyPhrasesDetectionJobCommand\";\nimport {\n  StopPiiEntitiesDetectionJobCommand,\n  StopPiiEntitiesDetectionJobCommandInput,\n  StopPiiEntitiesDetectionJobCommandOutput,\n} from \"./commands/StopPiiEntitiesDetectionJobCommand\";\nimport {\n  StopSentimentDetectionJobCommand,\n  StopSentimentDetectionJobCommandInput,\n  StopSentimentDetectionJobCommandOutput,\n} from \"./commands/StopSentimentDetectionJobCommand\";\nimport {\n  StopTrainingDocumentClassifierCommand,\n  StopTrainingDocumentClassifierCommandInput,\n  StopTrainingDocumentClassifierCommandOutput,\n} from \"./commands/StopTrainingDocumentClassifierCommand\";\nimport {\n  StopTrainingEntityRecognizerCommand,\n  StopTrainingEntityRecognizerCommandInput,\n  StopTrainingEntityRecognizerCommandOutput,\n} from \"./commands/StopTrainingEntityRecognizerCommand\";\nimport { TagResourceCommand, TagResourceCommandInput, TagResourceCommandOutput } from \"./commands/TagResourceCommand\";\nimport {\n  UntagResourceCommand,\n  UntagResourceCommandInput,\n  UntagResourceCommandOutput,\n} from \"./commands/UntagResourceCommand\";\nimport {\n  UpdateEndpointCommand,\n  UpdateEndpointCommandInput,\n  UpdateEndpointCommandOutput,\n} from \"./commands/UpdateEndpointCommand\";\nimport { HttpHandlerOptions as __HttpHandlerOptions } from \"@aws-sdk/types\";\n\n/**\n * <p>Amazon Comprehend is an AWS service for gaining insight into the content of documents.\n *       Use these actions to determine the topics contained in your documents, the topics they\n *       discuss, the predominant sentiment expressed in them, the predominant language used, and\n *       more.</p>\n */\nexport class Comprehend extends ComprehendClient {\n  /**\n   * <p>Determines the dominant language of the input text for a batch of documents. For a list\n   *       of languages that Amazon Comprehend can detect, see <a href=\"https://docs.aws.amazon.com/comprehend/latest/dg/how-languages.html\">Amazon Comprehend Supported Languages</a>.\n   *     </p>\n   */\n  public batchDetectDominantLanguage(\n    args: BatchDetectDominantLanguageCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<BatchDetectDominantLanguageCommandOutput>;\n  public batchDetectDominantLanguage(\n    args: BatchDetectDominantLanguageCommandInput,\n    cb: (err: any, data?: BatchDetectDominantLanguageCommandOutput) => void\n  ): void;\n  public batchDetectDominantLanguage(\n    args: BatchDetectDominantLanguageCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: BatchDetectDominantLanguageCommandOutput) => void\n  ): void;\n  public batchDetectDominantLanguage(\n    args: BatchDetectDominantLanguageCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: BatchDetectDominantLanguageCommandOutput) => void),\n    cb?: (err: any, data?: BatchDetectDominantLanguageCommandOutput) => void\n  ): Promise<BatchDetectDominantLanguageCommandOutput> | void {\n    const command = new BatchDetectDominantLanguageCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Inspects the text of a batch of documents for named entities and returns information\n   *       about them. For more information about named entities, see <a>how-entities</a>\n   *          </p>\n   */\n  public batchDetectEntities(\n    args: BatchDetectEntitiesCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<BatchDetectEntitiesCommandOutput>;\n  public batchDetectEntities(\n    args: BatchDetectEntitiesCommandInput,\n    cb: (err: any, data?: BatchDetectEntitiesCommandOutput) => void\n  ): void;\n  public batchDetectEntities(\n    args: BatchDetectEntitiesCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: BatchDetectEntitiesCommandOutput) => void\n  ): void;\n  public batchDetectEntities(\n    args: BatchDetectEntitiesCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: BatchDetectEntitiesCommandOutput) => void),\n    cb?: (err: any, data?: BatchDetectEntitiesCommandOutput) => void\n  ): Promise<BatchDetectEntitiesCommandOutput> | void {\n    const command = new BatchDetectEntitiesCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Detects the key noun phrases found in a batch of documents.</p>\n   */\n  public batchDetectKeyPhrases(\n    args: BatchDetectKeyPhrasesCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<BatchDetectKeyPhrasesCommandOutput>;\n  public batchDetectKeyPhrases(\n    args: BatchDetectKeyPhrasesCommandInput,\n    cb: (err: any, data?: BatchDetectKeyPhrasesCommandOutput) => void\n  ): void;\n  public batchDetectKeyPhrases(\n    args: BatchDetectKeyPhrasesCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: BatchDetectKeyPhrasesCommandOutput) => void\n  ): void;\n  public batchDetectKeyPhrases(\n    args: BatchDetectKeyPhrasesCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: BatchDetectKeyPhrasesCommandOutput) => void),\n    cb?: (err: any, data?: BatchDetectKeyPhrasesCommandOutput) => void\n  ): Promise<BatchDetectKeyPhrasesCommandOutput> | void {\n    const command = new BatchDetectKeyPhrasesCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Inspects a batch of documents and returns an inference of the prevailing sentiment,\n   *         <code>POSITIVE</code>, <code>NEUTRAL</code>, <code>MIXED</code>, or <code>NEGATIVE</code>,\n   *       in each one.</p>\n   */\n  public batchDetectSentiment(\n    args: BatchDetectSentimentCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<BatchDetectSentimentCommandOutput>;\n  public batchDetectSentiment(\n    args: BatchDetectSentimentCommandInput,\n    cb: (err: any, data?: BatchDetectSentimentCommandOutput) => void\n  ): void;\n  public batchDetectSentiment(\n    args: BatchDetectSentimentCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: BatchDetectSentimentCommandOutput) => void\n  ): void;\n  public batchDetectSentiment(\n    args: BatchDetectSentimentCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: BatchDetectSentimentCommandOutput) => void),\n    cb?: (err: any, data?: BatchDetectSentimentCommandOutput) => void\n  ): Promise<BatchDetectSentimentCommandOutput> | void {\n    const command = new BatchDetectSentimentCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Inspects the text of a batch of documents for the syntax and part of speech of the words\n   *       in the document and returns information about them. For more information, see <a>how-syntax</a>.</p>\n   */\n  public batchDetectSyntax(\n    args: BatchDetectSyntaxCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<BatchDetectSyntaxCommandOutput>;\n  public batchDetectSyntax(\n    args: BatchDetectSyntaxCommandInput,\n    cb: (err: any, data?: BatchDetectSyntaxCommandOutput) => void\n  ): void;\n  public batchDetectSyntax(\n    args: BatchDetectSyntaxCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: BatchDetectSyntaxCommandOutput) => void\n  ): void;\n  public batchDetectSyntax(\n    args: BatchDetectSyntaxCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: BatchDetectSyntaxCommandOutput) => void),\n    cb?: (err: any, data?: BatchDetectSyntaxCommandOutput) => void\n  ): Promise<BatchDetectSyntaxCommandOutput> | void {\n    const command = new BatchDetectSyntaxCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Creates a new document classification request to analyze a single document in real-time,\n   *       using a previously created and trained custom model and an endpoint.</p>\n   */\n  public classifyDocument(\n    args: ClassifyDocumentCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<ClassifyDocumentCommandOutput>;\n  public classifyDocument(\n    args: ClassifyDocumentCommandInput,\n    cb: (err: any, data?: ClassifyDocumentCommandOutput) => void\n  ): void;\n  public classifyDocument(\n    args: ClassifyDocumentCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: ClassifyDocumentCommandOutput) => void\n  ): void;\n  public classifyDocument(\n    args: ClassifyDocumentCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: ClassifyDocumentCommandOutput) => void),\n    cb?: (err: any, data?: ClassifyDocumentCommandOutput) => void\n  ): Promise<ClassifyDocumentCommandOutput> | void {\n    const command = new ClassifyDocumentCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Creates a new document classifier that you can use to categorize documents. To create a\n   *       classifier, you provide a set of training documents that labeled with the categories that you\n   *       want to use. After the classifier is trained you can use it to categorize a set of labeled\n   *       documents into the categories. For more information, see <a>how-document-classification</a>.</p>\n   */\n  public createDocumentClassifier(\n    args: CreateDocumentClassifierCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<CreateDocumentClassifierCommandOutput>;\n  public createDocumentClassifier(\n    args: CreateDocumentClassifierCommandInput,\n    cb: (err: any, data?: CreateDocumentClassifierCommandOutput) => void\n  ): void;\n  public createDocumentClassifier(\n    args: CreateDocumentClassifierCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: CreateDocumentClassifierCommandOutput) => void\n  ): void;\n  public createDocumentClassifier(\n    args: CreateDocumentClassifierCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: CreateDocumentClassifierCommandOutput) => void),\n    cb?: (err: any, data?: CreateDocumentClassifierCommandOutput) => void\n  ): Promise<CreateDocumentClassifierCommandOutput> | void {\n    const command = new CreateDocumentClassifierCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Creates a model-specific endpoint for synchronous inference for a previously trained\n   *       custom model\n   *       </p>\n   */\n  public createEndpoint(\n    args: CreateEndpointCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<CreateEndpointCommandOutput>;\n  public createEndpoint(\n    args: CreateEndpointCommandInput,\n    cb: (err: any, data?: CreateEndpointCommandOutput) => void\n  ): void;\n  public createEndpoint(\n    args: CreateEndpointCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: CreateEndpointCommandOutput) => void\n  ): void;\n  public createEndpoint(\n    args: CreateEndpointCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: CreateEndpointCommandOutput) => void),\n    cb?: (err: any, data?: CreateEndpointCommandOutput) => void\n  ): Promise<CreateEndpointCommandOutput> | void {\n    const command = new CreateEndpointCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Creates an entity recognizer using submitted files. After your\n   *         <code>CreateEntityRecognizer</code> request is submitted, you can check job status using the\n   *          API. </p>\n   */\n  public createEntityRecognizer(\n    args: CreateEntityRecognizerCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<CreateEntityRecognizerCommandOutput>;\n  public createEntityRecognizer(\n    args: CreateEntityRecognizerCommandInput,\n    cb: (err: any, data?: CreateEntityRecognizerCommandOutput) => void\n  ): void;\n  public createEntityRecognizer(\n    args: CreateEntityRecognizerCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: CreateEntityRecognizerCommandOutput) => void\n  ): void;\n  public createEntityRecognizer(\n    args: CreateEntityRecognizerCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: CreateEntityRecognizerCommandOutput) => void),\n    cb?: (err: any, data?: CreateEntityRecognizerCommandOutput) => void\n  ): Promise<CreateEntityRecognizerCommandOutput> | void {\n    const command = new CreateEntityRecognizerCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Deletes a previously created document classifier</p>\n   *          <p>Only those classifiers that are in terminated states (IN_ERROR, TRAINED) will be deleted.\n   *       If an active inference job is using the model, a <code>ResourceInUseException</code> will be\n   *       returned.</p>\n   *          <p>This is an asynchronous action that puts the classifier into a DELETING state, and it is\n   *       then removed by a background job. Once removed, the classifier disappears from your account\n   *       and is no longer available for use. </p>\n   */\n  public deleteDocumentClassifier(\n    args: DeleteDocumentClassifierCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<DeleteDocumentClassifierCommandOutput>;\n  public deleteDocumentClassifier(\n    args: DeleteDocumentClassifierCommandInput,\n    cb: (err: any, data?: DeleteDocumentClassifierCommandOutput) => void\n  ): void;\n  public deleteDocumentClassifier(\n    args: DeleteDocumentClassifierCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: DeleteDocumentClassifierCommandOutput) => void\n  ): void;\n  public deleteDocumentClassifier(\n    args: DeleteDocumentClassifierCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: DeleteDocumentClassifierCommandOutput) => void),\n    cb?: (err: any, data?: DeleteDocumentClassifierCommandOutput) => void\n  ): Promise<DeleteDocumentClassifierCommandOutput> | void {\n    const command = new DeleteDocumentClassifierCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Deletes a model-specific endpoint for a previously-trained custom model. All endpoints\n   *       must be deleted in order for the model to be deleted.</p>\n   */\n  public deleteEndpoint(\n    args: DeleteEndpointCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<DeleteEndpointCommandOutput>;\n  public deleteEndpoint(\n    args: DeleteEndpointCommandInput,\n    cb: (err: any, data?: DeleteEndpointCommandOutput) => void\n  ): void;\n  public deleteEndpoint(\n    args: DeleteEndpointCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: DeleteEndpointCommandOutput) => void\n  ): void;\n  public deleteEndpoint(\n    args: DeleteEndpointCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: DeleteEndpointCommandOutput) => void),\n    cb?: (err: any, data?: DeleteEndpointCommandOutput) => void\n  ): Promise<DeleteEndpointCommandOutput> | void {\n    const command = new DeleteEndpointCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Deletes an entity recognizer.</p>\n   *          <p>Only those recognizers that are in terminated states (IN_ERROR, TRAINED) will be deleted.\n   *       If an active inference job is using the model, a <code>ResourceInUseException</code> will be\n   *       returned.</p>\n   *          <p>This is an asynchronous action that puts the recognizer into a DELETING state, and it is\n   *       then removed by a background job. Once removed, the recognizer disappears from your account\n   *       and is no longer available for use. </p>\n   */\n  public deleteEntityRecognizer(\n    args: DeleteEntityRecognizerCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<DeleteEntityRecognizerCommandOutput>;\n  public deleteEntityRecognizer(\n    args: DeleteEntityRecognizerCommandInput,\n    cb: (err: any, data?: DeleteEntityRecognizerCommandOutput) => void\n  ): void;\n  public deleteEntityRecognizer(\n    args: DeleteEntityRecognizerCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: DeleteEntityRecognizerCommandOutput) => void\n  ): void;\n  public deleteEntityRecognizer(\n    args: DeleteEntityRecognizerCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: DeleteEntityRecognizerCommandOutput) => void),\n    cb?: (err: any, data?: DeleteEntityRecognizerCommandOutput) => void\n  ): Promise<DeleteEntityRecognizerCommandOutput> | void {\n    const command = new DeleteEntityRecognizerCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Gets the properties associated with a document classification job. Use this operation to\n   *       get the status of a classification job.</p>\n   */\n  public describeDocumentClassificationJob(\n    args: DescribeDocumentClassificationJobCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<DescribeDocumentClassificationJobCommandOutput>;\n  public describeDocumentClassificationJob(\n    args: DescribeDocumentClassificationJobCommandInput,\n    cb: (err: any, data?: DescribeDocumentClassificationJobCommandOutput) => void\n  ): void;\n  public describeDocumentClassificationJob(\n    args: DescribeDocumentClassificationJobCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: DescribeDocumentClassificationJobCommandOutput) => void\n  ): void;\n  public describeDocumentClassificationJob(\n    args: DescribeDocumentClassificationJobCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: DescribeDocumentClassificationJobCommandOutput) => void),\n    cb?: (err: any, data?: DescribeDocumentClassificationJobCommandOutput) => void\n  ): Promise<DescribeDocumentClassificationJobCommandOutput> | void {\n    const command = new DescribeDocumentClassificationJobCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Gets the properties associated with a document classifier.</p>\n   */\n  public describeDocumentClassifier(\n    args: DescribeDocumentClassifierCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<DescribeDocumentClassifierCommandOutput>;\n  public describeDocumentClassifier(\n    args: DescribeDocumentClassifierCommandInput,\n    cb: (err: any, data?: DescribeDocumentClassifierCommandOutput) => void\n  ): void;\n  public describeDocumentClassifier(\n    args: DescribeDocumentClassifierCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: DescribeDocumentClassifierCommandOutput) => void\n  ): void;\n  public describeDocumentClassifier(\n    args: DescribeDocumentClassifierCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: DescribeDocumentClassifierCommandOutput) => void),\n    cb?: (err: any, data?: DescribeDocumentClassifierCommandOutput) => void\n  ): Promise<DescribeDocumentClassifierCommandOutput> | void {\n    const command = new DescribeDocumentClassifierCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Gets the properties associated with a dominant language detection job. Use this operation\n   *       to get the status of a detection job.</p>\n   */\n  public describeDominantLanguageDetectionJob(\n    args: DescribeDominantLanguageDetectionJobCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<DescribeDominantLanguageDetectionJobCommandOutput>;\n  public describeDominantLanguageDetectionJob(\n    args: DescribeDominantLanguageDetectionJobCommandInput,\n    cb: (err: any, data?: DescribeDominantLanguageDetectionJobCommandOutput) => void\n  ): void;\n  public describeDominantLanguageDetectionJob(\n    args: DescribeDominantLanguageDetectionJobCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: DescribeDominantLanguageDetectionJobCommandOutput) => void\n  ): void;\n  public describeDominantLanguageDetectionJob(\n    args: DescribeDominantLanguageDetectionJobCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: DescribeDominantLanguageDetectionJobCommandOutput) => void),\n    cb?: (err: any, data?: DescribeDominantLanguageDetectionJobCommandOutput) => void\n  ): Promise<DescribeDominantLanguageDetectionJobCommandOutput> | void {\n    const command = new DescribeDominantLanguageDetectionJobCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Gets the properties associated with a specific endpoint. Use this operation to get the\n   *       status of an endpoint.</p>\n   */\n  public describeEndpoint(\n    args: DescribeEndpointCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<DescribeEndpointCommandOutput>;\n  public describeEndpoint(\n    args: DescribeEndpointCommandInput,\n    cb: (err: any, data?: DescribeEndpointCommandOutput) => void\n  ): void;\n  public describeEndpoint(\n    args: DescribeEndpointCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: DescribeEndpointCommandOutput) => void\n  ): void;\n  public describeEndpoint(\n    args: DescribeEndpointCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: DescribeEndpointCommandOutput) => void),\n    cb?: (err: any, data?: DescribeEndpointCommandOutput) => void\n  ): Promise<DescribeEndpointCommandOutput> | void {\n    const command = new DescribeEndpointCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Gets the properties associated with an entities detection job. Use this operation to get\n   *       the status of a detection job.</p>\n   */\n  public describeEntitiesDetectionJob(\n    args: DescribeEntitiesDetectionJobCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<DescribeEntitiesDetectionJobCommandOutput>;\n  public describeEntitiesDetectionJob(\n    args: DescribeEntitiesDetectionJobCommandInput,\n    cb: (err: any, data?: DescribeEntitiesDetectionJobCommandOutput) => void\n  ): void;\n  public describeEntitiesDetectionJob(\n    args: DescribeEntitiesDetectionJobCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: DescribeEntitiesDetectionJobCommandOutput) => void\n  ): void;\n  public describeEntitiesDetectionJob(\n    args: DescribeEntitiesDetectionJobCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: DescribeEntitiesDetectionJobCommandOutput) => void),\n    cb?: (err: any, data?: DescribeEntitiesDetectionJobCommandOutput) => void\n  ): Promise<DescribeEntitiesDetectionJobCommandOutput> | void {\n    const command = new DescribeEntitiesDetectionJobCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Provides details about an entity recognizer including status, S3 buckets containing\n   *       training data, recognizer metadata, metrics, and so on.</p>\n   */\n  public describeEntityRecognizer(\n    args: DescribeEntityRecognizerCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<DescribeEntityRecognizerCommandOutput>;\n  public describeEntityRecognizer(\n    args: DescribeEntityRecognizerCommandInput,\n    cb: (err: any, data?: DescribeEntityRecognizerCommandOutput) => void\n  ): void;\n  public describeEntityRecognizer(\n    args: DescribeEntityRecognizerCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: DescribeEntityRecognizerCommandOutput) => void\n  ): void;\n  public describeEntityRecognizer(\n    args: DescribeEntityRecognizerCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: DescribeEntityRecognizerCommandOutput) => void),\n    cb?: (err: any, data?: DescribeEntityRecognizerCommandOutput) => void\n  ): Promise<DescribeEntityRecognizerCommandOutput> | void {\n    const command = new DescribeEntityRecognizerCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Gets the status and details of an events detection job.</p>\n   */\n  public describeEventsDetectionJob(\n    args: DescribeEventsDetectionJobCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<DescribeEventsDetectionJobCommandOutput>;\n  public describeEventsDetectionJob(\n    args: DescribeEventsDetectionJobCommandInput,\n    cb: (err: any, data?: DescribeEventsDetectionJobCommandOutput) => void\n  ): void;\n  public describeEventsDetectionJob(\n    args: DescribeEventsDetectionJobCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: DescribeEventsDetectionJobCommandOutput) => void\n  ): void;\n  public describeEventsDetectionJob(\n    args: DescribeEventsDetectionJobCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: DescribeEventsDetectionJobCommandOutput) => void),\n    cb?: (err: any, data?: DescribeEventsDetectionJobCommandOutput) => void\n  ): Promise<DescribeEventsDetectionJobCommandOutput> | void {\n    const command = new DescribeEventsDetectionJobCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Gets the properties associated with a key phrases detection job. Use this operation to get\n   *       the status of a detection job.</p>\n   */\n  public describeKeyPhrasesDetectionJob(\n    args: DescribeKeyPhrasesDetectionJobCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<DescribeKeyPhrasesDetectionJobCommandOutput>;\n  public describeKeyPhrasesDetectionJob(\n    args: DescribeKeyPhrasesDetectionJobCommandInput,\n    cb: (err: any, data?: DescribeKeyPhrasesDetectionJobCommandOutput) => void\n  ): void;\n  public describeKeyPhrasesDetectionJob(\n    args: DescribeKeyPhrasesDetectionJobCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: DescribeKeyPhrasesDetectionJobCommandOutput) => void\n  ): void;\n  public describeKeyPhrasesDetectionJob(\n    args: DescribeKeyPhrasesDetectionJobCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: DescribeKeyPhrasesDetectionJobCommandOutput) => void),\n    cb?: (err: any, data?: DescribeKeyPhrasesDetectionJobCommandOutput) => void\n  ): Promise<DescribeKeyPhrasesDetectionJobCommandOutput> | void {\n    const command = new DescribeKeyPhrasesDetectionJobCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Gets the properties associated with a PII entities detection job. For example, you can use\n   *       this operation to get the job status.</p>\n   */\n  public describePiiEntitiesDetectionJob(\n    args: DescribePiiEntitiesDetectionJobCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<DescribePiiEntitiesDetectionJobCommandOutput>;\n  public describePiiEntitiesDetectionJob(\n    args: DescribePiiEntitiesDetectionJobCommandInput,\n    cb: (err: any, data?: DescribePiiEntitiesDetectionJobCommandOutput) => void\n  ): void;\n  public describePiiEntitiesDetectionJob(\n    args: DescribePiiEntitiesDetectionJobCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: DescribePiiEntitiesDetectionJobCommandOutput) => void\n  ): void;\n  public describePiiEntitiesDetectionJob(\n    args: DescribePiiEntitiesDetectionJobCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: DescribePiiEntitiesDetectionJobCommandOutput) => void),\n    cb?: (err: any, data?: DescribePiiEntitiesDetectionJobCommandOutput) => void\n  ): Promise<DescribePiiEntitiesDetectionJobCommandOutput> | void {\n    const command = new DescribePiiEntitiesDetectionJobCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Gets the properties associated with a sentiment detection job. Use this operation to get\n   *       the status of a detection job.</p>\n   */\n  public describeSentimentDetectionJob(\n    args: DescribeSentimentDetectionJobCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<DescribeSentimentDetectionJobCommandOutput>;\n  public describeSentimentDetectionJob(\n    args: DescribeSentimentDetectionJobCommandInput,\n    cb: (err: any, data?: DescribeSentimentDetectionJobCommandOutput) => void\n  ): void;\n  public describeSentimentDetectionJob(\n    args: DescribeSentimentDetectionJobCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: DescribeSentimentDetectionJobCommandOutput) => void\n  ): void;\n  public describeSentimentDetectionJob(\n    args: DescribeSentimentDetectionJobCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: DescribeSentimentDetectionJobCommandOutput) => void),\n    cb?: (err: any, data?: DescribeSentimentDetectionJobCommandOutput) => void\n  ): Promise<DescribeSentimentDetectionJobCommandOutput> | void {\n    const command = new DescribeSentimentDetectionJobCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Gets the properties associated with a topic detection job. Use this operation to get\n   *       the status of a detection job.</p>\n   */\n  public describeTopicsDetectionJob(\n    args: DescribeTopicsDetectionJobCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<DescribeTopicsDetectionJobCommandOutput>;\n  public describeTopicsDetectionJob(\n    args: DescribeTopicsDetectionJobCommandInput,\n    cb: (err: any, data?: DescribeTopicsDetectionJobCommandOutput) => void\n  ): void;\n  public describeTopicsDetectionJob(\n    args: DescribeTopicsDetectionJobCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: DescribeTopicsDetectionJobCommandOutput) => void\n  ): void;\n  public describeTopicsDetectionJob(\n    args: DescribeTopicsDetectionJobCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: DescribeTopicsDetectionJobCommandOutput) => void),\n    cb?: (err: any, data?: DescribeTopicsDetectionJobCommandOutput) => void\n  ): Promise<DescribeTopicsDetectionJobCommandOutput> | void {\n    const command = new DescribeTopicsDetectionJobCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Determines the dominant language of the input text. For a list of languages that Amazon\n   *       Comprehend can detect, see <a href=\"https://docs.aws.amazon.com/comprehend/latest/dg/how-languages.html\">Amazon Comprehend Supported Languages</a>. </p>\n   */\n  public detectDominantLanguage(\n    args: DetectDominantLanguageCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<DetectDominantLanguageCommandOutput>;\n  public detectDominantLanguage(\n    args: DetectDominantLanguageCommandInput,\n    cb: (err: any, data?: DetectDominantLanguageCommandOutput) => void\n  ): void;\n  public detectDominantLanguage(\n    args: DetectDominantLanguageCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: DetectDominantLanguageCommandOutput) => void\n  ): void;\n  public detectDominantLanguage(\n    args: DetectDominantLanguageCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: DetectDominantLanguageCommandOutput) => void),\n    cb?: (err: any, data?: DetectDominantLanguageCommandOutput) => void\n  ): Promise<DetectDominantLanguageCommandOutput> | void {\n    const command = new DetectDominantLanguageCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Inspects text for named entities, and returns information about them. For more\n   *       information, about named entities, see <a>how-entities</a>. </p>\n   */\n  public detectEntities(\n    args: DetectEntitiesCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<DetectEntitiesCommandOutput>;\n  public detectEntities(\n    args: DetectEntitiesCommandInput,\n    cb: (err: any, data?: DetectEntitiesCommandOutput) => void\n  ): void;\n  public detectEntities(\n    args: DetectEntitiesCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: DetectEntitiesCommandOutput) => void\n  ): void;\n  public detectEntities(\n    args: DetectEntitiesCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: DetectEntitiesCommandOutput) => void),\n    cb?: (err: any, data?: DetectEntitiesCommandOutput) => void\n  ): Promise<DetectEntitiesCommandOutput> | void {\n    const command = new DetectEntitiesCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Detects the key noun phrases found in the text. </p>\n   */\n  public detectKeyPhrases(\n    args: DetectKeyPhrasesCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<DetectKeyPhrasesCommandOutput>;\n  public detectKeyPhrases(\n    args: DetectKeyPhrasesCommandInput,\n    cb: (err: any, data?: DetectKeyPhrasesCommandOutput) => void\n  ): void;\n  public detectKeyPhrases(\n    args: DetectKeyPhrasesCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: DetectKeyPhrasesCommandOutput) => void\n  ): void;\n  public detectKeyPhrases(\n    args: DetectKeyPhrasesCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: DetectKeyPhrasesCommandOutput) => void),\n    cb?: (err: any, data?: DetectKeyPhrasesCommandOutput) => void\n  ): Promise<DetectKeyPhrasesCommandOutput> | void {\n    const command = new DetectKeyPhrasesCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Inspects the input text for entities that contain personally identifiable information\n   *       (PII) and returns information about them.</p>\n   */\n  public detectPiiEntities(\n    args: DetectPiiEntitiesCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<DetectPiiEntitiesCommandOutput>;\n  public detectPiiEntities(\n    args: DetectPiiEntitiesCommandInput,\n    cb: (err: any, data?: DetectPiiEntitiesCommandOutput) => void\n  ): void;\n  public detectPiiEntities(\n    args: DetectPiiEntitiesCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: DetectPiiEntitiesCommandOutput) => void\n  ): void;\n  public detectPiiEntities(\n    args: DetectPiiEntitiesCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: DetectPiiEntitiesCommandOutput) => void),\n    cb?: (err: any, data?: DetectPiiEntitiesCommandOutput) => void\n  ): Promise<DetectPiiEntitiesCommandOutput> | void {\n    const command = new DetectPiiEntitiesCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Inspects text and returns an inference of the prevailing sentiment\n   *         (<code>POSITIVE</code>, <code>NEUTRAL</code>, <code>MIXED</code>, or <code>NEGATIVE</code>). </p>\n   */\n  public detectSentiment(\n    args: DetectSentimentCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<DetectSentimentCommandOutput>;\n  public detectSentiment(\n    args: DetectSentimentCommandInput,\n    cb: (err: any, data?: DetectSentimentCommandOutput) => void\n  ): void;\n  public detectSentiment(\n    args: DetectSentimentCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: DetectSentimentCommandOutput) => void\n  ): void;\n  public detectSentiment(\n    args: DetectSentimentCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: DetectSentimentCommandOutput) => void),\n    cb?: (err: any, data?: DetectSentimentCommandOutput) => void\n  ): Promise<DetectSentimentCommandOutput> | void {\n    const command = new DetectSentimentCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Inspects text for syntax and the part of speech of words in the document. For more\n   *       information, <a>how-syntax</a>.</p>\n   */\n  public detectSyntax(\n    args: DetectSyntaxCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<DetectSyntaxCommandOutput>;\n  public detectSyntax(args: DetectSyntaxCommandInput, cb: (err: any, data?: DetectSyntaxCommandOutput) => void): void;\n  public detectSyntax(\n    args: DetectSyntaxCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: DetectSyntaxCommandOutput) => void\n  ): void;\n  public detectSyntax(\n    args: DetectSyntaxCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: DetectSyntaxCommandOutput) => void),\n    cb?: (err: any, data?: DetectSyntaxCommandOutput) => void\n  ): Promise<DetectSyntaxCommandOutput> | void {\n    const command = new DetectSyntaxCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Gets a list of the documentation classification jobs that you have submitted.</p>\n   */\n  public listDocumentClassificationJobs(\n    args: ListDocumentClassificationJobsCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<ListDocumentClassificationJobsCommandOutput>;\n  public listDocumentClassificationJobs(\n    args: ListDocumentClassificationJobsCommandInput,\n    cb: (err: any, data?: ListDocumentClassificationJobsCommandOutput) => void\n  ): void;\n  public listDocumentClassificationJobs(\n    args: ListDocumentClassificationJobsCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: ListDocumentClassificationJobsCommandOutput) => void\n  ): void;\n  public listDocumentClassificationJobs(\n    args: ListDocumentClassificationJobsCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: ListDocumentClassificationJobsCommandOutput) => void),\n    cb?: (err: any, data?: ListDocumentClassificationJobsCommandOutput) => void\n  ): Promise<ListDocumentClassificationJobsCommandOutput> | void {\n    const command = new ListDocumentClassificationJobsCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Gets a list of the document classifiers that you have created.</p>\n   */\n  public listDocumentClassifiers(\n    args: ListDocumentClassifiersCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<ListDocumentClassifiersCommandOutput>;\n  public listDocumentClassifiers(\n    args: ListDocumentClassifiersCommandInput,\n    cb: (err: any, data?: ListDocumentClassifiersCommandOutput) => void\n  ): void;\n  public listDocumentClassifiers(\n    args: ListDocumentClassifiersCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: ListDocumentClassifiersCommandOutput) => void\n  ): void;\n  public listDocumentClassifiers(\n    args: ListDocumentClassifiersCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: ListDocumentClassifiersCommandOutput) => void),\n    cb?: (err: any, data?: ListDocumentClassifiersCommandOutput) => void\n  ): Promise<ListDocumentClassifiersCommandOutput> | void {\n    const command = new ListDocumentClassifiersCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Gets a list of the dominant language detection jobs that you have submitted.</p>\n   */\n  public listDominantLanguageDetectionJobs(\n    args: ListDominantLanguageDetectionJobsCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<ListDominantLanguageDetectionJobsCommandOutput>;\n  public listDominantLanguageDetectionJobs(\n    args: ListDominantLanguageDetectionJobsCommandInput,\n    cb: (err: any, data?: ListDominantLanguageDetectionJobsCommandOutput) => void\n  ): void;\n  public listDominantLanguageDetectionJobs(\n    args: ListDominantLanguageDetectionJobsCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: ListDominantLanguageDetectionJobsCommandOutput) => void\n  ): void;\n  public listDominantLanguageDetectionJobs(\n    args: ListDominantLanguageDetectionJobsCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: ListDominantLanguageDetectionJobsCommandOutput) => void),\n    cb?: (err: any, data?: ListDominantLanguageDetectionJobsCommandOutput) => void\n  ): Promise<ListDominantLanguageDetectionJobsCommandOutput> | void {\n    const command = new ListDominantLanguageDetectionJobsCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Gets a list of all existing endpoints that you've created.</p>\n   */\n  public listEndpoints(\n    args: ListEndpointsCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<ListEndpointsCommandOutput>;\n  public listEndpoints(\n    args: ListEndpointsCommandInput,\n    cb: (err: any, data?: ListEndpointsCommandOutput) => void\n  ): void;\n  public listEndpoints(\n    args: ListEndpointsCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: ListEndpointsCommandOutput) => void\n  ): void;\n  public listEndpoints(\n    args: ListEndpointsCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: ListEndpointsCommandOutput) => void),\n    cb?: (err: any, data?: ListEndpointsCommandOutput) => void\n  ): Promise<ListEndpointsCommandOutput> | void {\n    const command = new ListEndpointsCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Gets a list of the entity detection jobs that you have submitted.</p>\n   */\n  public listEntitiesDetectionJobs(\n    args: ListEntitiesDetectionJobsCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<ListEntitiesDetectionJobsCommandOutput>;\n  public listEntitiesDetectionJobs(\n    args: ListEntitiesDetectionJobsCommandInput,\n    cb: (err: any, data?: ListEntitiesDetectionJobsCommandOutput) => void\n  ): void;\n  public listEntitiesDetectionJobs(\n    args: ListEntitiesDetectionJobsCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: ListEntitiesDetectionJobsCommandOutput) => void\n  ): void;\n  public listEntitiesDetectionJobs(\n    args: ListEntitiesDetectionJobsCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: ListEntitiesDetectionJobsCommandOutput) => void),\n    cb?: (err: any, data?: ListEntitiesDetectionJobsCommandOutput) => void\n  ): Promise<ListEntitiesDetectionJobsCommandOutput> | void {\n    const command = new ListEntitiesDetectionJobsCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Gets a list of the properties of all entity recognizers that you created, including\n   *       recognizers currently in training. Allows you to filter the list of recognizers based on\n   *       criteria such as status and submission time. This call returns up to 500 entity recognizers in\n   *       the list, with a default number of 100 recognizers in the list.</p>\n   *          <p>The results of this list are not in any particular order. Please get the list and sort\n   *       locally if needed.</p>\n   */\n  public listEntityRecognizers(\n    args: ListEntityRecognizersCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<ListEntityRecognizersCommandOutput>;\n  public listEntityRecognizers(\n    args: ListEntityRecognizersCommandInput,\n    cb: (err: any, data?: ListEntityRecognizersCommandOutput) => void\n  ): void;\n  public listEntityRecognizers(\n    args: ListEntityRecognizersCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: ListEntityRecognizersCommandOutput) => void\n  ): void;\n  public listEntityRecognizers(\n    args: ListEntityRecognizersCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: ListEntityRecognizersCommandOutput) => void),\n    cb?: (err: any, data?: ListEntityRecognizersCommandOutput) => void\n  ): Promise<ListEntityRecognizersCommandOutput> | void {\n    const command = new ListEntityRecognizersCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Gets a list of the events detection jobs that you have submitted.</p>\n   */\n  public listEventsDetectionJobs(\n    args: ListEventsDetectionJobsCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<ListEventsDetectionJobsCommandOutput>;\n  public listEventsDetectionJobs(\n    args: ListEventsDetectionJobsCommandInput,\n    cb: (err: any, data?: ListEventsDetectionJobsCommandOutput) => void\n  ): void;\n  public listEventsDetectionJobs(\n    args: ListEventsDetectionJobsCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: ListEventsDetectionJobsCommandOutput) => void\n  ): void;\n  public listEventsDetectionJobs(\n    args: ListEventsDetectionJobsCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: ListEventsDetectionJobsCommandOutput) => void),\n    cb?: (err: any, data?: ListEventsDetectionJobsCommandOutput) => void\n  ): Promise<ListEventsDetectionJobsCommandOutput> | void {\n    const command = new ListEventsDetectionJobsCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Get a list of key phrase detection jobs that you have submitted.</p>\n   */\n  public listKeyPhrasesDetectionJobs(\n    args: ListKeyPhrasesDetectionJobsCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<ListKeyPhrasesDetectionJobsCommandOutput>;\n  public listKeyPhrasesDetectionJobs(\n    args: ListKeyPhrasesDetectionJobsCommandInput,\n    cb: (err: any, data?: ListKeyPhrasesDetectionJobsCommandOutput) => void\n  ): void;\n  public listKeyPhrasesDetectionJobs(\n    args: ListKeyPhrasesDetectionJobsCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: ListKeyPhrasesDetectionJobsCommandOutput) => void\n  ): void;\n  public listKeyPhrasesDetectionJobs(\n    args: ListKeyPhrasesDetectionJobsCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: ListKeyPhrasesDetectionJobsCommandOutput) => void),\n    cb?: (err: any, data?: ListKeyPhrasesDetectionJobsCommandOutput) => void\n  ): Promise<ListKeyPhrasesDetectionJobsCommandOutput> | void {\n    const command = new ListKeyPhrasesDetectionJobsCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Gets a list of the PII entity detection jobs that you have submitted.</p>\n   */\n  public listPiiEntitiesDetectionJobs(\n    args: ListPiiEntitiesDetectionJobsCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<ListPiiEntitiesDetectionJobsCommandOutput>;\n  public listPiiEntitiesDetectionJobs(\n    args: ListPiiEntitiesDetectionJobsCommandInput,\n    cb: (err: any, data?: ListPiiEntitiesDetectionJobsCommandOutput) => void\n  ): void;\n  public listPiiEntitiesDetectionJobs(\n    args: ListPiiEntitiesDetectionJobsCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: ListPiiEntitiesDetectionJobsCommandOutput) => void\n  ): void;\n  public listPiiEntitiesDetectionJobs(\n    args: ListPiiEntitiesDetectionJobsCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: ListPiiEntitiesDetectionJobsCommandOutput) => void),\n    cb?: (err: any, data?: ListPiiEntitiesDetectionJobsCommandOutput) => void\n  ): Promise<ListPiiEntitiesDetectionJobsCommandOutput> | void {\n    const command = new ListPiiEntitiesDetectionJobsCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Gets a list of sentiment detection jobs that you have submitted.</p>\n   */\n  public listSentimentDetectionJobs(\n    args: ListSentimentDetectionJobsCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<ListSentimentDetectionJobsCommandOutput>;\n  public listSentimentDetectionJobs(\n    args: ListSentimentDetectionJobsCommandInput,\n    cb: (err: any, data?: ListSentimentDetectionJobsCommandOutput) => void\n  ): void;\n  public listSentimentDetectionJobs(\n    args: ListSentimentDetectionJobsCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: ListSentimentDetectionJobsCommandOutput) => void\n  ): void;\n  public listSentimentDetectionJobs(\n    args: ListSentimentDetectionJobsCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: ListSentimentDetectionJobsCommandOutput) => void),\n    cb?: (err: any, data?: ListSentimentDetectionJobsCommandOutput) => void\n  ): Promise<ListSentimentDetectionJobsCommandOutput> | void {\n    const command = new ListSentimentDetectionJobsCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Lists all tags associated with a given Amazon Comprehend resource. </p>\n   */\n  public listTagsForResource(\n    args: ListTagsForResourceCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<ListTagsForResourceCommandOutput>;\n  public listTagsForResource(\n    args: ListTagsForResourceCommandInput,\n    cb: (err: any, data?: ListTagsForResourceCommandOutput) => void\n  ): void;\n  public listTagsForResource(\n    args: ListTagsForResourceCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: ListTagsForResourceCommandOutput) => void\n  ): void;\n  public listTagsForResource(\n    args: ListTagsForResourceCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: ListTagsForResourceCommandOutput) => void),\n    cb?: (err: any, data?: ListTagsForResourceCommandOutput) => void\n  ): Promise<ListTagsForResourceCommandOutput> | void {\n    const command = new ListTagsForResourceCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Gets a list of the topic detection jobs that you have submitted.</p>\n   */\n  public listTopicsDetectionJobs(\n    args: ListTopicsDetectionJobsCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<ListTopicsDetectionJobsCommandOutput>;\n  public listTopicsDetectionJobs(\n    args: ListTopicsDetectionJobsCommandInput,\n    cb: (err: any, data?: ListTopicsDetectionJobsCommandOutput) => void\n  ): void;\n  public listTopicsDetectionJobs(\n    args: ListTopicsDetectionJobsCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: ListTopicsDetectionJobsCommandOutput) => void\n  ): void;\n  public listTopicsDetectionJobs(\n    args: ListTopicsDetectionJobsCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: ListTopicsDetectionJobsCommandOutput) => void),\n    cb?: (err: any, data?: ListTopicsDetectionJobsCommandOutput) => void\n  ): Promise<ListTopicsDetectionJobsCommandOutput> | void {\n    const command = new ListTopicsDetectionJobsCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Starts an asynchronous document classification job. Use the  operation to track the progress of the\n   *       job.</p>\n   */\n  public startDocumentClassificationJob(\n    args: StartDocumentClassificationJobCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<StartDocumentClassificationJobCommandOutput>;\n  public startDocumentClassificationJob(\n    args: StartDocumentClassificationJobCommandInput,\n    cb: (err: any, data?: StartDocumentClassificationJobCommandOutput) => void\n  ): void;\n  public startDocumentClassificationJob(\n    args: StartDocumentClassificationJobCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: StartDocumentClassificationJobCommandOutput) => void\n  ): void;\n  public startDocumentClassificationJob(\n    args: StartDocumentClassificationJobCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: StartDocumentClassificationJobCommandOutput) => void),\n    cb?: (err: any, data?: StartDocumentClassificationJobCommandOutput) => void\n  ): Promise<StartDocumentClassificationJobCommandOutput> | void {\n    const command = new StartDocumentClassificationJobCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Starts an asynchronous dominant language detection job for a collection of documents. Use\n   *       the  operation to track the status\n   *       of a job.</p>\n   */\n  public startDominantLanguageDetectionJob(\n    args: StartDominantLanguageDetectionJobCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<StartDominantLanguageDetectionJobCommandOutput>;\n  public startDominantLanguageDetectionJob(\n    args: StartDominantLanguageDetectionJobCommandInput,\n    cb: (err: any, data?: StartDominantLanguageDetectionJobCommandOutput) => void\n  ): void;\n  public startDominantLanguageDetectionJob(\n    args: StartDominantLanguageDetectionJobCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: StartDominantLanguageDetectionJobCommandOutput) => void\n  ): void;\n  public startDominantLanguageDetectionJob(\n    args: StartDominantLanguageDetectionJobCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: StartDominantLanguageDetectionJobCommandOutput) => void),\n    cb?: (err: any, data?: StartDominantLanguageDetectionJobCommandOutput) => void\n  ): Promise<StartDominantLanguageDetectionJobCommandOutput> | void {\n    const command = new StartDominantLanguageDetectionJobCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Starts an asynchronous entity detection job for a collection of documents. Use the  operation to track the status of a job.</p>\n   *          <p>This API can be used for either standard entity detection or custom entity recognition. In\n   *       order to be used for custom entity recognition, the optional <code>EntityRecognizerArn</code>\n   *       must be used in order to provide access to the recognizer being used to detect the custom\n   *       entity.</p>\n   */\n  public startEntitiesDetectionJob(\n    args: StartEntitiesDetectionJobCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<StartEntitiesDetectionJobCommandOutput>;\n  public startEntitiesDetectionJob(\n    args: StartEntitiesDetectionJobCommandInput,\n    cb: (err: any, data?: StartEntitiesDetectionJobCommandOutput) => void\n  ): void;\n  public startEntitiesDetectionJob(\n    args: StartEntitiesDetectionJobCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: StartEntitiesDetectionJobCommandOutput) => void\n  ): void;\n  public startEntitiesDetectionJob(\n    args: StartEntitiesDetectionJobCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: StartEntitiesDetectionJobCommandOutput) => void),\n    cb?: (err: any, data?: StartEntitiesDetectionJobCommandOutput) => void\n  ): Promise<StartEntitiesDetectionJobCommandOutput> | void {\n    const command = new StartEntitiesDetectionJobCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Starts an asynchronous event detection job for a collection of documents.</p>\n   */\n  public startEventsDetectionJob(\n    args: StartEventsDetectionJobCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<StartEventsDetectionJobCommandOutput>;\n  public startEventsDetectionJob(\n    args: StartEventsDetectionJobCommandInput,\n    cb: (err: any, data?: StartEventsDetectionJobCommandOutput) => void\n  ): void;\n  public startEventsDetectionJob(\n    args: StartEventsDetectionJobCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: StartEventsDetectionJobCommandOutput) => void\n  ): void;\n  public startEventsDetectionJob(\n    args: StartEventsDetectionJobCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: StartEventsDetectionJobCommandOutput) => void),\n    cb?: (err: any, data?: StartEventsDetectionJobCommandOutput) => void\n  ): Promise<StartEventsDetectionJobCommandOutput> | void {\n    const command = new StartEventsDetectionJobCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Starts an asynchronous key phrase detection job for a collection of documents. Use the\n   *          operation to track the status of a\n   *       job.</p>\n   */\n  public startKeyPhrasesDetectionJob(\n    args: StartKeyPhrasesDetectionJobCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<StartKeyPhrasesDetectionJobCommandOutput>;\n  public startKeyPhrasesDetectionJob(\n    args: StartKeyPhrasesDetectionJobCommandInput,\n    cb: (err: any, data?: StartKeyPhrasesDetectionJobCommandOutput) => void\n  ): void;\n  public startKeyPhrasesDetectionJob(\n    args: StartKeyPhrasesDetectionJobCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: StartKeyPhrasesDetectionJobCommandOutput) => void\n  ): void;\n  public startKeyPhrasesDetectionJob(\n    args: StartKeyPhrasesDetectionJobCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: StartKeyPhrasesDetectionJobCommandOutput) => void),\n    cb?: (err: any, data?: StartKeyPhrasesDetectionJobCommandOutput) => void\n  ): Promise<StartKeyPhrasesDetectionJobCommandOutput> | void {\n    const command = new StartKeyPhrasesDetectionJobCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Starts an asynchronous PII entity detection job for a collection of documents.</p>\n   */\n  public startPiiEntitiesDetectionJob(\n    args: StartPiiEntitiesDetectionJobCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<StartPiiEntitiesDetectionJobCommandOutput>;\n  public startPiiEntitiesDetectionJob(\n    args: StartPiiEntitiesDetectionJobCommandInput,\n    cb: (err: any, data?: StartPiiEntitiesDetectionJobCommandOutput) => void\n  ): void;\n  public startPiiEntitiesDetectionJob(\n    args: StartPiiEntitiesDetectionJobCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: StartPiiEntitiesDetectionJobCommandOutput) => void\n  ): void;\n  public startPiiEntitiesDetectionJob(\n    args: StartPiiEntitiesDetectionJobCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: StartPiiEntitiesDetectionJobCommandOutput) => void),\n    cb?: (err: any, data?: StartPiiEntitiesDetectionJobCommandOutput) => void\n  ): Promise<StartPiiEntitiesDetectionJobCommandOutput> | void {\n    const command = new StartPiiEntitiesDetectionJobCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Starts an asynchronous sentiment detection job for a collection of documents. use the\n   *          operation to track the status of a\n   *       job.</p>\n   */\n  public startSentimentDetectionJob(\n    args: StartSentimentDetectionJobCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<StartSentimentDetectionJobCommandOutput>;\n  public startSentimentDetectionJob(\n    args: StartSentimentDetectionJobCommandInput,\n    cb: (err: any, data?: StartSentimentDetectionJobCommandOutput) => void\n  ): void;\n  public startSentimentDetectionJob(\n    args: StartSentimentDetectionJobCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: StartSentimentDetectionJobCommandOutput) => void\n  ): void;\n  public startSentimentDetectionJob(\n    args: StartSentimentDetectionJobCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: StartSentimentDetectionJobCommandOutput) => void),\n    cb?: (err: any, data?: StartSentimentDetectionJobCommandOutput) => void\n  ): Promise<StartSentimentDetectionJobCommandOutput> | void {\n    const command = new StartSentimentDetectionJobCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Starts an asynchronous topic detection job. Use the\n   *         <code>DescribeTopicDetectionJob</code> operation to track the status of a job.</p>\n   */\n  public startTopicsDetectionJob(\n    args: StartTopicsDetectionJobCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<StartTopicsDetectionJobCommandOutput>;\n  public startTopicsDetectionJob(\n    args: StartTopicsDetectionJobCommandInput,\n    cb: (err: any, data?: StartTopicsDetectionJobCommandOutput) => void\n  ): void;\n  public startTopicsDetectionJob(\n    args: StartTopicsDetectionJobCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: StartTopicsDetectionJobCommandOutput) => void\n  ): void;\n  public startTopicsDetectionJob(\n    args: StartTopicsDetectionJobCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: StartTopicsDetectionJobCommandOutput) => void),\n    cb?: (err: any, data?: StartTopicsDetectionJobCommandOutput) => void\n  ): Promise<StartTopicsDetectionJobCommandOutput> | void {\n    const command = new StartTopicsDetectionJobCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Stops a dominant language detection job in progress.</p>\n   *          <p>If the job state is <code>IN_PROGRESS</code> the job is marked for termination and put\n   *       into the <code>STOP_REQUESTED</code> state. If the job completes before it can be stopped, it\n   *       is put into the <code>COMPLETED</code> state; otherwise the job is stopped and put into the\n   *         <code>STOPPED</code> state.</p>\n   *          <p>If the job is in the <code>COMPLETED</code> or <code>FAILED</code> state when you call the\n   *         <code>StopDominantLanguageDetectionJob</code> operation, the operation returns a 400\n   *       Internal Request Exception. </p>\n   *          <p>When a job is stopped, any documents already processed are written to the output\n   *       location.</p>\n   */\n  public stopDominantLanguageDetectionJob(\n    args: StopDominantLanguageDetectionJobCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<StopDominantLanguageDetectionJobCommandOutput>;\n  public stopDominantLanguageDetectionJob(\n    args: StopDominantLanguageDetectionJobCommandInput,\n    cb: (err: any, data?: StopDominantLanguageDetectionJobCommandOutput) => void\n  ): void;\n  public stopDominantLanguageDetectionJob(\n    args: StopDominantLanguageDetectionJobCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: StopDominantLanguageDetectionJobCommandOutput) => void\n  ): void;\n  public stopDominantLanguageDetectionJob(\n    args: StopDominantLanguageDetectionJobCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: StopDominantLanguageDetectionJobCommandOutput) => void),\n    cb?: (err: any, data?: StopDominantLanguageDetectionJobCommandOutput) => void\n  ): Promise<StopDominantLanguageDetectionJobCommandOutput> | void {\n    const command = new StopDominantLanguageDetectionJobCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Stops an entities detection job in progress.</p>\n   *          <p>If the job state is <code>IN_PROGRESS</code> the job is marked for termination and put\n   *       into the <code>STOP_REQUESTED</code> state. If the job completes before it can be stopped, it\n   *       is put into the <code>COMPLETED</code> state; otherwise the job is stopped and put into the\n   *         <code>STOPPED</code> state.</p>\n   *          <p>If the job is in the <code>COMPLETED</code> or <code>FAILED</code> state when you call the\n   *         <code>StopDominantLanguageDetectionJob</code> operation, the operation returns a 400\n   *       Internal Request Exception. </p>\n   *          <p>When a job is stopped, any documents already processed are written to the output\n   *       location.</p>\n   */\n  public stopEntitiesDetectionJob(\n    args: StopEntitiesDetectionJobCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<StopEntitiesDetectionJobCommandOutput>;\n  public stopEntitiesDetectionJob(\n    args: StopEntitiesDetectionJobCommandInput,\n    cb: (err: any, data?: StopEntitiesDetectionJobCommandOutput) => void\n  ): void;\n  public stopEntitiesDetectionJob(\n    args: StopEntitiesDetectionJobCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: StopEntitiesDetectionJobCommandOutput) => void\n  ): void;\n  public stopEntitiesDetectionJob(\n    args: StopEntitiesDetectionJobCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: StopEntitiesDetectionJobCommandOutput) => void),\n    cb?: (err: any, data?: StopEntitiesDetectionJobCommandOutput) => void\n  ): Promise<StopEntitiesDetectionJobCommandOutput> | void {\n    const command = new StopEntitiesDetectionJobCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Stops an events detection job in progress.</p>\n   */\n  public stopEventsDetectionJob(\n    args: StopEventsDetectionJobCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<StopEventsDetectionJobCommandOutput>;\n  public stopEventsDetectionJob(\n    args: StopEventsDetectionJobCommandInput,\n    cb: (err: any, data?: StopEventsDetectionJobCommandOutput) => void\n  ): void;\n  public stopEventsDetectionJob(\n    args: StopEventsDetectionJobCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: StopEventsDetectionJobCommandOutput) => void\n  ): void;\n  public stopEventsDetectionJob(\n    args: StopEventsDetectionJobCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: StopEventsDetectionJobCommandOutput) => void),\n    cb?: (err: any, data?: StopEventsDetectionJobCommandOutput) => void\n  ): Promise<StopEventsDetectionJobCommandOutput> | void {\n    const command = new StopEventsDetectionJobCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Stops a key phrases detection job in progress.</p>\n   *          <p>If the job state is <code>IN_PROGRESS</code> the job is marked for termination and put\n   *       into the <code>STOP_REQUESTED</code> state. If the job completes before it can be stopped, it\n   *       is put into the <code>COMPLETED</code> state; otherwise the job is stopped and put into the\n   *         <code>STOPPED</code> state.</p>\n   *          <p>If the job is in the <code>COMPLETED</code> or <code>FAILED</code> state when you call the\n   *         <code>StopDominantLanguageDetectionJob</code> operation, the operation returns a 400\n   *       Internal Request Exception. </p>\n   *          <p>When a job is stopped, any documents already processed are written to the output\n   *       location.</p>\n   */\n  public stopKeyPhrasesDetectionJob(\n    args: StopKeyPhrasesDetectionJobCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<StopKeyPhrasesDetectionJobCommandOutput>;\n  public stopKeyPhrasesDetectionJob(\n    args: StopKeyPhrasesDetectionJobCommandInput,\n    cb: (err: any, data?: StopKeyPhrasesDetectionJobCommandOutput) => void\n  ): void;\n  public stopKeyPhrasesDetectionJob(\n    args: StopKeyPhrasesDetectionJobCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: StopKeyPhrasesDetectionJobCommandOutput) => void\n  ): void;\n  public stopKeyPhrasesDetectionJob(\n    args: StopKeyPhrasesDetectionJobCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: StopKeyPhrasesDetectionJobCommandOutput) => void),\n    cb?: (err: any, data?: StopKeyPhrasesDetectionJobCommandOutput) => void\n  ): Promise<StopKeyPhrasesDetectionJobCommandOutput> | void {\n    const command = new StopKeyPhrasesDetectionJobCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Stops a PII entities detection job in progress.</p>\n   */\n  public stopPiiEntitiesDetectionJob(\n    args: StopPiiEntitiesDetectionJobCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<StopPiiEntitiesDetectionJobCommandOutput>;\n  public stopPiiEntitiesDetectionJob(\n    args: StopPiiEntitiesDetectionJobCommandInput,\n    cb: (err: any, data?: StopPiiEntitiesDetectionJobCommandOutput) => void\n  ): void;\n  public stopPiiEntitiesDetectionJob(\n    args: StopPiiEntitiesDetectionJobCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: StopPiiEntitiesDetectionJobCommandOutput) => void\n  ): void;\n  public stopPiiEntitiesDetectionJob(\n    args: StopPiiEntitiesDetectionJobCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: StopPiiEntitiesDetectionJobCommandOutput) => void),\n    cb?: (err: any, data?: StopPiiEntitiesDetectionJobCommandOutput) => void\n  ): Promise<StopPiiEntitiesDetectionJobCommandOutput> | void {\n    const command = new StopPiiEntitiesDetectionJobCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Stops a sentiment detection job in progress.</p>\n   *          <p>If the job state is <code>IN_PROGRESS</code> the job is marked for termination and put\n   *       into the <code>STOP_REQUESTED</code> state. If the job completes before it can be stopped, it\n   *       is put into the <code>COMPLETED</code> state; otherwise the job is be stopped and put into the\n   *         <code>STOPPED</code> state.</p>\n   *          <p>If the job is in the <code>COMPLETED</code> or <code>FAILED</code> state when you call the\n   *         <code>StopDominantLanguageDetectionJob</code> operation, the operation returns a 400\n   *       Internal Request Exception. </p>\n   *          <p>When a job is stopped, any documents already processed are written to the output\n   *       location.</p>\n   */\n  public stopSentimentDetectionJob(\n    args: StopSentimentDetectionJobCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<StopSentimentDetectionJobCommandOutput>;\n  public stopSentimentDetectionJob(\n    args: StopSentimentDetectionJobCommandInput,\n    cb: (err: any, data?: StopSentimentDetectionJobCommandOutput) => void\n  ): void;\n  public stopSentimentDetectionJob(\n    args: StopSentimentDetectionJobCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: StopSentimentDetectionJobCommandOutput) => void\n  ): void;\n  public stopSentimentDetectionJob(\n    args: StopSentimentDetectionJobCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: StopSentimentDetectionJobCommandOutput) => void),\n    cb?: (err: any, data?: StopSentimentDetectionJobCommandOutput) => void\n  ): Promise<StopSentimentDetectionJobCommandOutput> | void {\n    const command = new StopSentimentDetectionJobCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Stops a document classifier training job while in progress.</p>\n   *          <p>If the training job state is <code>TRAINING</code>, the job is marked for termination and\n   *       put into the <code>STOP_REQUESTED</code> state. If the training job completes before it can be\n   *       stopped, it is put into the <code>TRAINED</code>; otherwise the training job is stopped and\n   *       put into the <code>STOPPED</code> state and the service sends back an HTTP 200 response with\n   *       an empty HTTP body. </p>\n   */\n  public stopTrainingDocumentClassifier(\n    args: StopTrainingDocumentClassifierCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<StopTrainingDocumentClassifierCommandOutput>;\n  public stopTrainingDocumentClassifier(\n    args: StopTrainingDocumentClassifierCommandInput,\n    cb: (err: any, data?: StopTrainingDocumentClassifierCommandOutput) => void\n  ): void;\n  public stopTrainingDocumentClassifier(\n    args: StopTrainingDocumentClassifierCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: StopTrainingDocumentClassifierCommandOutput) => void\n  ): void;\n  public stopTrainingDocumentClassifier(\n    args: StopTrainingDocumentClassifierCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: StopTrainingDocumentClassifierCommandOutput) => void),\n    cb?: (err: any, data?: StopTrainingDocumentClassifierCommandOutput) => void\n  ): Promise<StopTrainingDocumentClassifierCommandOutput> | void {\n    const command = new StopTrainingDocumentClassifierCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Stops an entity recognizer training job while in progress.</p>\n   *          <p>If the training job state is <code>TRAINING</code>, the job is marked for termination and\n   *       put into the <code>STOP_REQUESTED</code> state. If the training job completes before it can be\n   *       stopped, it is put into the <code>TRAINED</code>; otherwise the training job is stopped and\n   *       putted into the <code>STOPPED</code> state and the service sends back an HTTP 200 response\n   *       with an empty HTTP body.</p>\n   */\n  public stopTrainingEntityRecognizer(\n    args: StopTrainingEntityRecognizerCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<StopTrainingEntityRecognizerCommandOutput>;\n  public stopTrainingEntityRecognizer(\n    args: StopTrainingEntityRecognizerCommandInput,\n    cb: (err: any, data?: StopTrainingEntityRecognizerCommandOutput) => void\n  ): void;\n  public stopTrainingEntityRecognizer(\n    args: StopTrainingEntityRecognizerCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: StopTrainingEntityRecognizerCommandOutput) => void\n  ): void;\n  public stopTrainingEntityRecognizer(\n    args: StopTrainingEntityRecognizerCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: StopTrainingEntityRecognizerCommandOutput) => void),\n    cb?: (err: any, data?: StopTrainingEntityRecognizerCommandOutput) => void\n  ): Promise<StopTrainingEntityRecognizerCommandOutput> | void {\n    const command = new StopTrainingEntityRecognizerCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Associates a specific tag with an Amazon Comprehend resource. A tag is a key-value pair\n   *       that adds as a metadata to a resource used by Amazon Comprehend. For example, a tag with\n   *       \"Sales\" as the key might be added to a resource to indicate its use by the sales department.\n   *     </p>\n   */\n  public tagResource(args: TagResourceCommandInput, options?: __HttpHandlerOptions): Promise<TagResourceCommandOutput>;\n  public tagResource(args: TagResourceCommandInput, cb: (err: any, data?: TagResourceCommandOutput) => void): void;\n  public tagResource(\n    args: TagResourceCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: TagResourceCommandOutput) => void\n  ): void;\n  public tagResource(\n    args: TagResourceCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: TagResourceCommandOutput) => void),\n    cb?: (err: any, data?: TagResourceCommandOutput) => void\n  ): Promise<TagResourceCommandOutput> | void {\n    const command = new TagResourceCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Removes a specific tag associated with an Amazon Comprehend resource. </p>\n   */\n  public untagResource(\n    args: UntagResourceCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<UntagResourceCommandOutput>;\n  public untagResource(\n    args: UntagResourceCommandInput,\n    cb: (err: any, data?: UntagResourceCommandOutput) => void\n  ): void;\n  public untagResource(\n    args: UntagResourceCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: UntagResourceCommandOutput) => void\n  ): void;\n  public untagResource(\n    args: UntagResourceCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: UntagResourceCommandOutput) => void),\n    cb?: (err: any, data?: UntagResourceCommandOutput) => void\n  ): Promise<UntagResourceCommandOutput> | void {\n    const command = new UntagResourceCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Updates information about the specified endpoint.</p>\n   */\n  public updateEndpoint(\n    args: UpdateEndpointCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<UpdateEndpointCommandOutput>;\n  public updateEndpoint(\n    args: UpdateEndpointCommandInput,\n    cb: (err: any, data?: UpdateEndpointCommandOutput) => void\n  ): void;\n  public updateEndpoint(\n    args: UpdateEndpointCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: UpdateEndpointCommandOutput) => void\n  ): void;\n  public updateEndpoint(\n    args: UpdateEndpointCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: UpdateEndpointCommandOutput) => void),\n    cb?: (err: any, data?: UpdateEndpointCommandOutput) => void\n  ): Promise<UpdateEndpointCommandOutput> | void {\n    const command = new UpdateEndpointCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}