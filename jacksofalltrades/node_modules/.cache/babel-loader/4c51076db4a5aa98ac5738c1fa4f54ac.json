{"ast":null,"code":"/**\n * Note: This file was copied from mapbox-gl-draw@1.1.1 because it is no longer accessible in later versions of mapbox-gl-draw which are required for security benefits.\n *\n * If this PR gets merged https://github.com/mapbox/mapbox-gl-draw/pull/1100 or mapbox-gl-draw is forked to maplibre-gl-draw we should investigate removing these files and getting the dependencies from mapbox-gl-draw\n */\nconst createVertex = require(\"./create_vertex\");\n\nconst createMidpoint = require(\"./create_midpoint\");\n\nconst Constants = require(\"./constants\");\n\nfunction createSupplementaryPoints(geojson) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let basePath = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  const {\n    type,\n    coordinates\n  } = geojson.geometry;\n  const featureId = geojson.properties && geojson.properties.id;\n  let supplementaryPoints = [];\n\n  if (type === Constants.geojsonTypes.POINT) {\n    // For points, just create a vertex\n    supplementaryPoints.push(createVertex(featureId, coordinates, basePath, isSelectedPath(basePath)));\n  } else if (type === Constants.geojsonTypes.POLYGON) {\n    // Cycle through a Polygon's rings and\n    // process each line\n    coordinates.forEach((line, lineIndex) => {\n      processLine(line, basePath !== null ? `${basePath}.${lineIndex}` : String(lineIndex));\n    });\n  } else if (type === Constants.geojsonTypes.LINE_STRING) {\n    processLine(coordinates, basePath);\n  } else if (type.indexOf(Constants.geojsonTypes.MULTI_PREFIX) === 0) {\n    processMultiGeometry();\n  }\n\n  function processLine(line, lineBasePath) {\n    let firstPointString = \"\";\n    let lastVertex = null;\n    line.forEach((point, pointIndex) => {\n      const pointPath = lineBasePath !== undefined && lineBasePath !== null ? `${lineBasePath}.${pointIndex}` : String(pointIndex);\n      const vertex = createVertex(featureId, point, pointPath, isSelectedPath(pointPath)); // If we're creating midpoints, check if there was a\n      // vertex before this one. If so, add a midpoint\n      // between that vertex and this one.\n\n      if (options.midpoints && lastVertex) {\n        const midpoint = createMidpoint(featureId, lastVertex, vertex, options.map);\n\n        if (midpoint) {\n          supplementaryPoints.push(midpoint);\n        }\n      }\n\n      lastVertex = vertex; // A Polygon line's last point is the same as the first point. If we're on the last\n      // point, we want to draw a midpoint before it but not another vertex on it\n      // (since we already a vertex there, from the first point).\n\n      const stringifiedPoint = JSON.stringify(point);\n\n      if (firstPointString !== stringifiedPoint) {\n        supplementaryPoints.push(vertex);\n      }\n\n      if (pointIndex === 0) {\n        firstPointString = stringifiedPoint;\n      }\n    });\n  }\n\n  function isSelectedPath(path) {\n    if (!options.selectedPaths) return false;\n    return options.selectedPaths.indexOf(path) !== -1;\n  } // Split a multi-geometry into constituent\n  // geometries, and accumulate the supplementary points\n  // for each of those constituents\n\n\n  function processMultiGeometry() {\n    const subType = type.replace(Constants.geojsonTypes.MULTI_PREFIX, \"\");\n    coordinates.forEach((subCoordinates, index) => {\n      const subFeature = {\n        type: Constants.geojsonTypes.FEATURE,\n        properties: geojson.properties,\n        geometry: {\n          type: subType,\n          coordinates: subCoordinates\n        }\n      };\n      supplementaryPoints = supplementaryPoints.concat(createSupplementaryPoints(subFeature, options, index));\n    });\n  }\n\n  return supplementaryPoints;\n}\n\nmodule.exports = createSupplementaryPoints;","map":{"version":3,"names":["createVertex","require","createMidpoint","Constants","createSupplementaryPoints","geojson","options","basePath","type","coordinates","geometry","featureId","properties","id","supplementaryPoints","geojsonTypes","POINT","push","isSelectedPath","POLYGON","forEach","line","lineIndex","processLine","String","LINE_STRING","indexOf","MULTI_PREFIX","processMultiGeometry","lineBasePath","firstPointString","lastVertex","point","pointIndex","pointPath","undefined","vertex","midpoints","midpoint","map","stringifiedPoint","JSON","stringify","path","selectedPaths","subType","replace","subCoordinates","index","subFeature","FEATURE","concat","module","exports"],"sources":["C:/Users/lmore/OneDrive/Documents/GitHub/JacksOfAllTrades/jacksofalltrades/node_modules/maplibre-gl-draw-circle/lib/utils/create_supplementary_points.js"],"sourcesContent":["/**\n * Note: This file was copied from mapbox-gl-draw@1.1.1 because it is no longer accessible in later versions of mapbox-gl-draw which are required for security benefits.\n *\n * If this PR gets merged https://github.com/mapbox/mapbox-gl-draw/pull/1100 or mapbox-gl-draw is forked to maplibre-gl-draw we should investigate removing these files and getting the dependencies from mapbox-gl-draw\n */\n\nconst createVertex = require(\"./create_vertex\");\nconst createMidpoint = require(\"./create_midpoint\");\nconst Constants = require(\"./constants\");\n\nfunction createSupplementaryPoints(geojson, options = {}, basePath = null) {\n  const { type, coordinates } = geojson.geometry;\n  const featureId = geojson.properties && geojson.properties.id;\n\n  let supplementaryPoints = [];\n\n  if (type === Constants.geojsonTypes.POINT) {\n    // For points, just create a vertex\n    supplementaryPoints.push(createVertex(featureId, coordinates, basePath, isSelectedPath(basePath)));\n  } else if (type === Constants.geojsonTypes.POLYGON) {\n    // Cycle through a Polygon's rings and\n    // process each line\n    coordinates.forEach((line, lineIndex) => {\n      processLine(line, basePath !== null ? `${basePath}.${lineIndex}` : String(lineIndex));\n    });\n  } else if (type === Constants.geojsonTypes.LINE_STRING) {\n    processLine(coordinates, basePath);\n  } else if (type.indexOf(Constants.geojsonTypes.MULTI_PREFIX) === 0) {\n    processMultiGeometry();\n  }\n\n  function processLine(line, lineBasePath) {\n    let firstPointString = \"\";\n    let lastVertex = null;\n    line.forEach((point, pointIndex) => {\n      const pointPath = lineBasePath !== undefined && lineBasePath !== null ? `${lineBasePath}.${pointIndex}` : String(pointIndex);\n      const vertex = createVertex(featureId, point, pointPath, isSelectedPath(pointPath));\n\n      // If we're creating midpoints, check if there was a\n      // vertex before this one. If so, add a midpoint\n      // between that vertex and this one.\n      if (options.midpoints && lastVertex) {\n        const midpoint = createMidpoint(featureId, lastVertex, vertex, options.map);\n        if (midpoint) {\n          supplementaryPoints.push(midpoint);\n        }\n      }\n      lastVertex = vertex;\n\n      // A Polygon line's last point is the same as the first point. If we're on the last\n      // point, we want to draw a midpoint before it but not another vertex on it\n      // (since we already a vertex there, from the first point).\n      const stringifiedPoint = JSON.stringify(point);\n      if (firstPointString !== stringifiedPoint) {\n        supplementaryPoints.push(vertex);\n      }\n      if (pointIndex === 0) {\n        firstPointString = stringifiedPoint;\n      }\n    });\n  }\n\n  function isSelectedPath(path) {\n    if (!options.selectedPaths) return false;\n    return options.selectedPaths.indexOf(path) !== -1;\n  }\n\n  // Split a multi-geometry into constituent\n  // geometries, and accumulate the supplementary points\n  // for each of those constituents\n  function processMultiGeometry() {\n    const subType = type.replace(Constants.geojsonTypes.MULTI_PREFIX, \"\");\n    coordinates.forEach((subCoordinates, index) => {\n      const subFeature = {\n        type: Constants.geojsonTypes.FEATURE,\n        properties: geojson.properties,\n        geometry: {\n          type: subType,\n          coordinates: subCoordinates,\n        },\n      };\n      supplementaryPoints = supplementaryPoints.concat(createSupplementaryPoints(subFeature, options, index));\n    });\n  }\n\n  return supplementaryPoints;\n}\n\nmodule.exports = createSupplementaryPoints;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}