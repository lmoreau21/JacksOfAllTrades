{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n/*\n * Copyright 2017-2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n\n\nimport { AbstractInteractionsProvider } from './InteractionsProvider';\nimport { LexRuntimeV2Client, RecognizeTextCommand, RecognizeUtteranceCommand } from '@aws-sdk/client-lex-runtime-v2';\nimport { ConsoleLogger as Logger, Credentials, getAmplifyUserAgent } from '@aws-amplify/core';\nimport { convert } from './AWSLexProviderHelper/utils';\nimport { unGzipBase64AsJson } from './AWSLexProviderHelper/commonUtils';\nvar logger = new Logger('AWSLexV2Provider');\n\nvar AWSLexV2Provider =\n/** @class */\nfunction (_super) {\n  __extends(AWSLexV2Provider, _super);\n  /**\n   * Initialize Interactions with AWS configurations\n   * @param {InteractionsOptions} options - Configuration object for Interactions\n   */\n\n\n  function AWSLexV2Provider(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var _this = _super.call(this, options) || this;\n\n    _this._botsCompleteCallback = {};\n    return _this;\n  }\n  /**\n   * get provider name of the plugin\n   * @returns {string} name of the provider\n   */\n\n\n  AWSLexV2Provider.prototype.getProviderName = function () {\n    return 'AWSLexV2Provider';\n  };\n  /**\n   * Configure Interactions part with aws configuration\n   * @param {AWSLexV2ProviderOptions} config - Configuration of the Interactions\n   * @return {AWSLexV2ProviderOptions} - Current configuration\n   */\n\n\n  AWSLexV2Provider.prototype.configure = function (config) {\n    if (config === void 0) {\n      config = {};\n    }\n\n    var propertiesToTest = ['name', 'botId', 'aliasId', 'localeId', 'providerName', 'region'];\n    Object.keys(config).forEach(function (botKey) {\n      var botConfig = config[botKey]; // is bot config correct\n\n      if (!propertiesToTest.every(function (x) {\n        return x in botConfig;\n      })) {\n        throw new Error('invalid bot configuration');\n      }\n    });\n    return _super.prototype.configure.call(this, config);\n  };\n  /**\n   * Send a message to a bot\n   * @async\n   * @param {string} botname - Bot name to send the message\n   * @param {string | InteractionsMessage} message - message to send to the bot\n   * @return {Promise<InteractionsResponse>} A promise resolves to the response from the bot\n   */\n\n\n  AWSLexV2Provider.prototype.sendMessage = function (botname, message) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentials, error_1, response, reqBaseParams;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            // check if bot exists\n            if (!this._config[botname]) {\n              return [2\n              /*return*/\n              , Promise.reject('Bot ' + botname + ' does not exist')];\n            }\n\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , Credentials.get()];\n\n          case 2:\n            credentials = _a.sent();\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            error_1 = _a.sent();\n            return [2\n            /*return*/\n            , Promise.reject('No credentials')];\n\n          case 4:\n            this._lexRuntimeServiceV2Client = new LexRuntimeV2Client({\n              region: this._config[botname].region,\n              credentials: credentials,\n              customUserAgent: getAmplifyUserAgent()\n            });\n            reqBaseParams = {\n              botAliasId: this._config[botname].aliasId,\n              botId: this._config[botname].botId,\n              localeId: this._config[botname].localeId,\n              sessionId: credentials.identityId\n            };\n            if (!(typeof message === 'string')) return [3\n            /*break*/\n            , 6];\n            return [4\n            /*yield*/\n            , this._handleRecognizeTextCommand(botname, message, reqBaseParams)];\n\n          case 5:\n            response = _a.sent();\n            return [3\n            /*break*/\n            , 8];\n\n          case 6:\n            return [4\n            /*yield*/\n            , this._handleRecognizeUtteranceCommand(botname, message, reqBaseParams)];\n\n          case 7:\n            response = _a.sent();\n            _a.label = 8;\n\n          case 8:\n            return [2\n            /*return*/\n            , response];\n        }\n      });\n    });\n  };\n  /**\n   * Attach a onComplete callback function to a bot.\n   * The callback is called once the bot's intent is fulfilled\n   * @param {string} botname - Bot name to attach the onComplete callback\n   * @param {(err: Error | null, confirmation: InteractionsResponse) => void} callback - called when Intent Fulfilled\n   */\n\n\n  AWSLexV2Provider.prototype.onComplete = function (botname, callback) {\n    // does bot exist\n    if (!this._config[botname]) {\n      throw new Error('Bot ' + botname + ' does not exist');\n    }\n\n    this._botsCompleteCallback[botname] = callback;\n  };\n  /**\n   * @private\n   * call onComplete callback for a bot if configured\n   */\n\n\n  AWSLexV2Provider.prototype._reportBotStatus = function (data, botname) {\n    var _this = this;\n\n    var _a, _b, _c, _d, _e, _f;\n\n    var sessionState = data === null || data === void 0 ? void 0 : data.sessionState; // Check if state is fulfilled to resolve onFullfilment promise\n\n    logger.debug('postContent state', (_a = sessionState === null || sessionState === void 0 ? void 0 : sessionState.intent) === null || _a === void 0 ? void 0 : _a.state);\n    var isConfigOnCompleteAttached = typeof ((_b = this._config) === null || _b === void 0 ? void 0 : _b[botname].onComplete) === 'function';\n    var isApiOnCompleteAttached = typeof ((_c = this._botsCompleteCallback) === null || _c === void 0 ? void 0 : _c[botname]) === 'function'; // no onComplete callbacks added\n\n    if (!isConfigOnCompleteAttached && !isApiOnCompleteAttached) return;\n\n    if (((_d = sessionState === null || sessionState === void 0 ? void 0 : sessionState.intent) === null || _d === void 0 ? void 0 : _d.state) === 'ReadyForFulfillment' || ((_e = sessionState === null || sessionState === void 0 ? void 0 : sessionState.intent) === null || _e === void 0 ? void 0 : _e.state) === 'Fulfilled') {\n      if (isApiOnCompleteAttached) {\n        setTimeout(function () {\n          var _a;\n\n          return (_a = _this._botsCompleteCallback) === null || _a === void 0 ? void 0 : _a[botname](null, data);\n        }, 0);\n      }\n\n      if (isConfigOnCompleteAttached) {\n        setTimeout(function () {\n          return _this._config[botname].onComplete(null, data);\n        }, 0);\n      }\n    }\n\n    if (((_f = sessionState === null || sessionState === void 0 ? void 0 : sessionState.intent) === null || _f === void 0 ? void 0 : _f.state) === 'Failed') {\n      var error_2 = new Error('Bot conversation failed');\n\n      if (isApiOnCompleteAttached) {\n        setTimeout(function () {\n          return _this._botsCompleteCallback[botname](error_2);\n        }, 0);\n      }\n\n      if (isConfigOnCompleteAttached) {\n        setTimeout(function () {\n          return _this._config[botname].onComplete(error_2);\n        }, 0);\n      }\n    }\n  };\n  /**\n   * Format UtteranceCommandOutput's response\n   * decompress attributes\n   * update audioStream format\n   */\n\n\n  AWSLexV2Provider.prototype._formatUtteranceCommandOutput = function (data) {\n    return __awaiter(this, void 0, void 0, function () {\n      var response, _a, _b, _c;\n\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            _a = [__assign({}, data)];\n            _b = {};\n            return [4\n            /*yield*/\n            , unGzipBase64AsJson(data.messages)];\n\n          case 1:\n            _b.messages = _d.sent();\n            return [4\n            /*yield*/\n            , unGzipBase64AsJson(data.sessionState)];\n\n          case 2:\n            _b.sessionState = _d.sent();\n            return [4\n            /*yield*/\n            , unGzipBase64AsJson(data.interpretations)];\n\n          case 3:\n            _b.interpretations = _d.sent();\n            return [4\n            /*yield*/\n            , unGzipBase64AsJson(data.requestAttributes)];\n\n          case 4:\n            _b.requestAttributes = _d.sent();\n            return [4\n            /*yield*/\n            , unGzipBase64AsJson(data.inputTranscript)];\n\n          case 5:\n            _b.inputTranscript = _d.sent();\n            if (!data.audioStream) return [3\n            /*break*/\n            , 7];\n            return [4\n            /*yield*/\n            , convert(data.audioStream)];\n\n          case 6:\n            _c = _d.sent();\n            return [3\n            /*break*/\n            , 8];\n\n          case 7:\n            _c = undefined;\n            _d.label = 8;\n\n          case 8:\n            response = __assign.apply(void 0, _a.concat([(_b.audioStream = _c, _b)]));\n            return [2\n            /*return*/\n            , response];\n        }\n      });\n    });\n  };\n  /**\n   * handle client's `RecognizeTextCommand`\n   * used for sending simple text message\n   */\n\n\n  AWSLexV2Provider.prototype._handleRecognizeTextCommand = function (botname, data, baseParams) {\n    return __awaiter(this, void 0, void 0, function () {\n      var params, recognizeTextCommand, data_1, err_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            logger.debug('postText to lex2', data);\n            params = __assign(__assign({}, baseParams), {\n              text: data\n            });\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n\n            recognizeTextCommand = new RecognizeTextCommand(params);\n            return [4\n            /*yield*/\n            , this._lexRuntimeServiceV2Client.send(recognizeTextCommand)];\n\n          case 2:\n            data_1 = _a.sent();\n\n            this._reportBotStatus(data_1, botname);\n\n            return [2\n            /*return*/\n            , data_1];\n\n          case 3:\n            err_1 = _a.sent();\n            return [2\n            /*return*/\n            , Promise.reject(err_1)];\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * handle client's `RecognizeUtteranceCommand`\n   * used for obj text or obj voice message\n   */\n\n\n  AWSLexV2Provider.prototype._handleRecognizeUtteranceCommand = function (botname, data, baseParams) {\n    return __awaiter(this, void 0, void 0, function () {\n      var content, messageType, params, inputStream, _a, recognizeUtteranceCommand, data_2, response, err_2;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            content = data.content, messageType = data.options.messageType;\n            logger.debug('postContent to lex2', data);\n            if (!(messageType === 'voice')) return [3\n            /*break*/\n            , 4];\n\n            if (typeof content !== 'object') {\n              return [2\n              /*return*/\n              , Promise.reject('invalid content type')];\n            }\n\n            if (!(content instanceof Uint8Array)) return [3\n            /*break*/\n            , 1];\n            _a = content;\n            return [3\n            /*break*/\n            , 3];\n\n          case 1:\n            return [4\n            /*yield*/\n            , convert(content)];\n\n          case 2:\n            _a = _b.sent();\n            _b.label = 3;\n\n          case 3:\n            inputStream = _a;\n            params = __assign(__assign({}, baseParams), {\n              requestContentType: 'audio/x-l16; sample-rate=16000; channel-count=1',\n              inputStream: inputStream\n            });\n            return [3\n            /*break*/\n            , 5];\n\n          case 4:\n            // text input\n            if (typeof content !== 'string') return [2\n            /*return*/\n            , Promise.reject('invalid content type')];\n            params = __assign(__assign({}, baseParams), {\n              requestContentType: 'text/plain; charset=utf-8',\n              inputStream: content\n            });\n            _b.label = 5;\n\n          case 5:\n            _b.trys.push([5, 8,, 9]);\n\n            recognizeUtteranceCommand = new RecognizeUtteranceCommand(params);\n            return [4\n            /*yield*/\n            , this._lexRuntimeServiceV2Client.send(recognizeUtteranceCommand)];\n\n          case 6:\n            data_2 = _b.sent();\n            return [4\n            /*yield*/\n            , this._formatUtteranceCommandOutput(data_2)];\n\n          case 7:\n            response = _b.sent();\n\n            this._reportBotStatus(response, botname);\n\n            return [2\n            /*return*/\n            , response];\n\n          case 8:\n            err_2 = _b.sent();\n            return [2\n            /*return*/\n            , Promise.reject(err_2)];\n\n          case 9:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  return AWSLexV2Provider;\n}(AbstractInteractionsProvider);\n\nexport { AWSLexV2Provider };","map":{"version":3,"mappings":"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","names":["AbstractInteractionsProvider","LexRuntimeV2Client","RecognizeTextCommand","RecognizeUtteranceCommand","ConsoleLogger","Logger","Credentials","getAmplifyUserAgent","convert","unGzipBase64AsJson","logger","__extends","options","_super","_this","_botsCompleteCallback","AWSLexV2Provider","config","propertiesToTest","Object","keys","forEach","botConfig","botKey","every","Error","configure","call","botname","message","_config","Promise","reject","get","credentials","_a","_lexRuntimeServiceV2Client","region","customUserAgent","reqBaseParams","botAliasId","aliasId","botId","localeId","sessionId","identityId","_handleRecognizeTextCommand","response","_handleRecognizeUtteranceCommand","callback","data","sessionState","debug","intent","state","isConfigOnCompleteAttached","_b","onComplete","isApiOnCompleteAttached","_c","_d","_e","setTimeout","_f","error_2","messages","interpretations","requestAttributes","inputTranscript","audioStream","baseParams","params","text","recognizeTextCommand","send","data_1","_reportBotStatus","err_1","content","messageType","Uint8Array","inputStream","requestContentType","recognizeUtteranceCommand","data_2","_formatUtteranceCommandOutput","err_2"],"sources":["C:\\Users\\lmore\\OneDrive\\Documents\\GitHub\\JacksOfAllTrades\\jacksofalltrades\\node_modules\\@aws-amplify\\interactions\\src\\Providers\\AWSLexV2Provider.ts"],"sourcesContent":["/*\n * Copyright 2017-2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nimport { AbstractInteractionsProvider } from './InteractionsProvider';\nimport {\n\tInteractionsOptions,\n\tAWSLexV2ProviderOptions,\n\tInteractionsResponse,\n\tInteractionsMessage,\n} from '../types';\nimport {\n\tLexRuntimeV2Client,\n\tRecognizeTextCommand,\n\tRecognizeTextCommandInput,\n\tRecognizeTextCommandOutput,\n\tRecognizeUtteranceCommand,\n\tRecognizeUtteranceCommandInput,\n\tRecognizeUtteranceCommandOutput,\n} from '@aws-sdk/client-lex-runtime-v2';\nimport {\n\tConsoleLogger as Logger,\n\tCredentials,\n\tgetAmplifyUserAgent,\n} from '@aws-amplify/core';\nimport { convert } from './AWSLexProviderHelper/utils';\nimport { unGzipBase64AsJson } from './AWSLexProviderHelper/commonUtils';\n\nconst logger = new Logger('AWSLexV2Provider');\n\ninterface RecognizeUtteranceCommandOutputFormatted\n\textends Omit<\n\t\tRecognizeUtteranceCommandOutput,\n\t\t| 'messages'\n\t\t| 'interpretations'\n\t\t| 'sessionState'\n\t\t| 'requestAttributes'\n\t\t| 'audioStream'\n\t> {\n\tmessages?: RecognizeTextCommandOutput['messages'];\n\tsessionState?: RecognizeTextCommandOutput['sessionState'];\n\tinterpretations?: RecognizeTextCommandOutput['interpretations'];\n\trequestAttributes?: RecognizeTextCommandOutput['requestAttributes'];\n\taudioStream?: Uint8Array;\n}\n\ntype AWSLexV2ProviderSendResponse =\n\t| RecognizeTextCommandOutput\n\t| RecognizeUtteranceCommandOutputFormatted;\n\ntype lexV2BaseReqParams = {\n\tbotId: string;\n\tbotAliasId: string;\n\tlocaleId: string;\n\tsessionId: string;\n};\n\nexport class AWSLexV2Provider extends AbstractInteractionsProvider {\n\tprivate _lexRuntimeServiceV2Client: LexRuntimeV2Client;\n\tprivate _botsCompleteCallback: object;\n\n\t/**\n\t * Initialize Interactions with AWS configurations\n\t * @param {InteractionsOptions} options - Configuration object for Interactions\n\t */\n\tconstructor(options: InteractionsOptions = {}) {\n\t\tsuper(options);\n\t\tthis._botsCompleteCallback = {};\n\t}\n\n\t/**\n\t * get provider name of the plugin\n\t * @returns {string} name of the provider\n\t */\n\tpublic getProviderName() {\n\t\treturn 'AWSLexV2Provider';\n\t}\n\n\t/**\n\t * Configure Interactions part with aws configuration\n\t * @param {AWSLexV2ProviderOptions} config - Configuration of the Interactions\n\t * @return {AWSLexV2ProviderOptions} - Current configuration\n\t */\n\tpublic configure(\n\t\tconfig: AWSLexV2ProviderOptions = {}\n\t): AWSLexV2ProviderOptions {\n\t\tconst propertiesToTest = [\n\t\t\t'name',\n\t\t\t'botId',\n\t\t\t'aliasId',\n\t\t\t'localeId',\n\t\t\t'providerName',\n\t\t\t'region',\n\t\t];\n\n\t\tObject.keys(config).forEach(botKey => {\n\t\t\tconst botConfig = config[botKey];\n\n\t\t\t// is bot config correct\n\t\t\tif (!propertiesToTest.every(x => x in botConfig)) {\n\t\t\t\tthrow new Error('invalid bot configuration');\n\t\t\t}\n\t\t});\n\t\treturn super.configure(config);\n\t}\n\n\t/**\n\t * Send a message to a bot\n\t * @async\n\t * @param {string} botname - Bot name to send the message\n\t * @param {string | InteractionsMessage} message - message to send to the bot\n\t * @return {Promise<InteractionsResponse>} A promise resolves to the response from the bot\n\t */\n\tpublic async sendMessage(\n\t\tbotname: string,\n\t\tmessage: string | InteractionsMessage\n\t): Promise<InteractionsResponse> {\n\t\t// check if bot exists\n\t\tif (!this._config[botname]) {\n\t\t\treturn Promise.reject('Bot ' + botname + ' does not exist');\n\t\t}\n\n\t\t// check if credentials are present\n\t\tlet credentials;\n\t\ttry {\n\t\t\tcredentials = await Credentials.get();\n\t\t} catch (error) {\n\t\t\treturn Promise.reject('No credentials');\n\t\t}\n\n\t\tthis._lexRuntimeServiceV2Client = new LexRuntimeV2Client({\n\t\t\tregion: this._config[botname].region,\n\t\t\tcredentials,\n\t\t\tcustomUserAgent: getAmplifyUserAgent(),\n\t\t});\n\n\t\tlet response: AWSLexV2ProviderSendResponse;\n\n\t\t// common base params for all requests\n\t\tconst reqBaseParams: lexV2BaseReqParams = {\n\t\t\tbotAliasId: this._config[botname].aliasId,\n\t\t\tbotId: this._config[botname].botId,\n\t\t\tlocaleId: this._config[botname].localeId,\n\t\t\tsessionId: credentials.identityId,\n\t\t};\n\n\t\tif (typeof message === 'string') {\n\t\t\tresponse = await this._handleRecognizeTextCommand(\n\t\t\t\tbotname,\n\t\t\t\tmessage,\n\t\t\t\treqBaseParams\n\t\t\t);\n\t\t} else {\n\t\t\tresponse = await this._handleRecognizeUtteranceCommand(\n\t\t\t\tbotname,\n\t\t\t\tmessage,\n\t\t\t\treqBaseParams\n\t\t\t);\n\t\t}\n\t\treturn response;\n\t}\n\n\t/**\n\t * Attach a onComplete callback function to a bot.\n\t * The callback is called once the bot's intent is fulfilled\n\t * @param {string} botname - Bot name to attach the onComplete callback\n\t * @param {(err: Error | null, confirmation: InteractionsResponse) => void} callback - called when Intent Fulfilled\n\t */\n\tpublic onComplete(\n\t\tbotname: string,\n\t\tcallback: (err: Error | null, confirmation: InteractionsResponse) => void\n\t) {\n\t\t// does bot exist\n\t\tif (!this._config[botname]) {\n\t\t\tthrow new Error('Bot ' + botname + ' does not exist');\n\t\t}\n\t\tthis._botsCompleteCallback[botname] = callback;\n\t}\n\n\t/**\n\t * @private\n\t * call onComplete callback for a bot if configured\n\t */\n\tprivate _reportBotStatus(\n\t\tdata: AWSLexV2ProviderSendResponse,\n\t\tbotname: string\n\t) {\n\t\tconst sessionState = data?.sessionState;\n\n\t\t// Check if state is fulfilled to resolve onFullfilment promise\n\t\tlogger.debug('postContent state', sessionState?.intent?.state);\n\n\t\tconst isConfigOnCompleteAttached =\n\t\t\ttypeof this._config?.[botname].onComplete === 'function';\n\n\t\tconst isApiOnCompleteAttached =\n\t\t\ttypeof this._botsCompleteCallback?.[botname] === 'function';\n\n\t\t// no onComplete callbacks added\n\t\tif (!isConfigOnCompleteAttached && !isApiOnCompleteAttached) return;\n\n\t\tif (\n\t\t\tsessionState?.intent?.state === 'ReadyForFulfillment' ||\n\t\t\tsessionState?.intent?.state === 'Fulfilled'\n\t\t) {\n\t\t\tif (isApiOnCompleteAttached) {\n\t\t\t\tsetTimeout(() => this._botsCompleteCallback?.[botname](null, data), 0);\n\t\t\t}\n\n\t\t\tif (isConfigOnCompleteAttached) {\n\t\t\t\tsetTimeout(() => this._config[botname].onComplete(null, data), 0);\n\t\t\t}\n\t\t}\n\n\t\tif (sessionState?.intent?.state === 'Failed') {\n\t\t\tconst error = new Error('Bot conversation failed');\n\t\t\tif (isApiOnCompleteAttached) {\n\t\t\t\tsetTimeout(() => this._botsCompleteCallback[botname](error), 0);\n\t\t\t}\n\n\t\t\tif (isConfigOnCompleteAttached) {\n\t\t\t\tsetTimeout(() => this._config[botname].onComplete(error), 0);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Format UtteranceCommandOutput's response\n\t * decompress attributes\n\t * update audioStream format\n\t */\n\tprivate async _formatUtteranceCommandOutput(\n\t\tdata: RecognizeUtteranceCommandOutput\n\t): Promise<RecognizeUtteranceCommandOutputFormatted> {\n\t\tconst response: RecognizeUtteranceCommandOutputFormatted = {\n\t\t\t...data,\n\t\t\tmessages: await unGzipBase64AsJson(data.messages),\n\t\t\tsessionState: await unGzipBase64AsJson(data.sessionState),\n\t\t\tinterpretations: await unGzipBase64AsJson(data.interpretations),\n\t\t\trequestAttributes: await unGzipBase64AsJson(data.requestAttributes),\n\t\t\tinputTranscript: await unGzipBase64AsJson(data.inputTranscript),\n\t\t\taudioStream: data.audioStream\n\t\t\t\t? await convert(data.audioStream)\n\t\t\t\t: undefined,\n\t\t};\n\t\treturn response;\n\t}\n\n\t/**\n\t * handle client's `RecognizeTextCommand`\n\t * used for sending simple text message\n\t */\n\tprivate async _handleRecognizeTextCommand(\n\t\tbotname: string,\n\t\tdata: string,\n\t\tbaseParams: lexV2BaseReqParams\n\t) {\n\t\tlogger.debug('postText to lex2', data);\n\n\t\tconst params: RecognizeTextCommandInput = {\n\t\t\t...baseParams,\n\t\t\ttext: data,\n\t\t};\n\n\t\ttry {\n\t\t\tconst recognizeTextCommand = new RecognizeTextCommand(params);\n\t\t\tconst data = await this._lexRuntimeServiceV2Client.send(\n\t\t\t\trecognizeTextCommand\n\t\t\t);\n\n\t\t\tthis._reportBotStatus(data, botname);\n\t\t\treturn data;\n\t\t} catch (err) {\n\t\t\treturn Promise.reject(err);\n\t\t}\n\t}\n\n\t/**\n\t * handle client's `RecognizeUtteranceCommand`\n\t * used for obj text or obj voice message\n\t */\n\tprivate async _handleRecognizeUtteranceCommand(\n\t\tbotname: string,\n\t\tdata: InteractionsMessage,\n\t\tbaseParams: lexV2BaseReqParams\n\t) {\n\t\tconst {\n\t\t\tcontent,\n\t\t\toptions: { messageType },\n\t\t} = data;\n\n\t\tlogger.debug('postContent to lex2', data);\n\t\tlet params: RecognizeUtteranceCommandInput;\n\n\t\t// prepare params\n\t\tif (messageType === 'voice') {\n\t\t\tif (typeof content !== 'object') {\n\t\t\t\treturn Promise.reject('invalid content type');\n\t\t\t}\n\n\t\t\tconst inputStream =\n\t\t\t\tcontent instanceof Uint8Array ? content : await convert(content);\n\n\t\t\tparams = {\n\t\t\t\t...baseParams,\n\t\t\t\trequestContentType: 'audio/x-l16; sample-rate=16000; channel-count=1',\n\t\t\t\tinputStream,\n\t\t\t};\n\t\t} else {\n\t\t\t// text input\n\t\t\tif (typeof content !== 'string')\n\t\t\t\treturn Promise.reject('invalid content type');\n\n\t\t\tparams = {\n\t\t\t\t...baseParams,\n\t\t\t\trequestContentType: 'text/plain; charset=utf-8',\n\t\t\t\tinputStream: content,\n\t\t\t};\n\t\t}\n\n\t\t// make API call to lex\n\t\ttry {\n\t\t\tconst recognizeUtteranceCommand = new RecognizeUtteranceCommand(params);\n\t\t\tconst data = await this._lexRuntimeServiceV2Client.send(\n\t\t\t\trecognizeUtteranceCommand\n\t\t\t);\n\n\t\t\tconst response = await this._formatUtteranceCommandOutput(data);\n\t\t\tthis._reportBotStatus(response, botname);\n\t\t\treturn response;\n\t\t} catch (err) {\n\t\t\treturn Promise.reject(err);\n\t\t}\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}