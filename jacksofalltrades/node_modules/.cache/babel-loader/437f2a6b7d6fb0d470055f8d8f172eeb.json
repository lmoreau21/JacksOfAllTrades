{"ast":null,"code":"import { Geo } from \"@aws-amplify/geo\";\nimport { COLOR_WHITE, MARKER_COLOR } from \"./constants\";\nimport { isGeoJsonSource } from \"./utils\";\nimport { FONT_DEFAULT_BY_STYLE } from \"./constants\";\nexport function drawClusterLayer(sourceName, map, _ref, mapStyle) {\n  var _ref$fillColor = _ref.fillColor,\n      markerColor = _ref$fillColor === void 0 ? MARKER_COLOR : _ref$fillColor,\n      _ref$smCircleSize = _ref.smCircleSize,\n      smallSize = _ref$smCircleSize === void 0 ? 60 : _ref$smCircleSize,\n      _ref$smThreshold = _ref.smThreshold,\n      smallThreshold = _ref$smThreshold === void 0 ? 50 : _ref$smThreshold,\n      _ref$mdCircleSize = _ref.mdCircleSize,\n      mediumSize = _ref$mdCircleSize === void 0 ? 100 : _ref$mdCircleSize,\n      _ref$mdThreshold = _ref.mdThreshold,\n      mediumThreshold = _ref$mdThreshold === void 0 ? 100 : _ref$mdThreshold,\n      _ref$lgCircleSize = _ref.lgCircleSize,\n      largeSize = _ref$lgCircleSize === void 0 ? 140 : _ref$lgCircleSize,\n      _ref$lgThreshold = _ref.lgThreshold,\n      largeThreshold = _ref$lgThreshold === void 0 ? 500 : _ref$lgThreshold,\n      _ref$xlCircleSize = _ref.xlCircleSize,\n      extraLargeSize = _ref$xlCircleSize === void 0 ? 180 : _ref$xlCircleSize,\n      _ref$borderWidth = _ref.borderWidth,\n      borderWidth = _ref$borderWidth === void 0 ? 4 : _ref$borderWidth,\n      _ref$borderColor = _ref.borderColor,\n      borderColor = _ref$borderColor === void 0 ? COLOR_WHITE : _ref$borderColor,\n      clusterPaint = _ref.clusterPaint,\n      onClick = _ref.onClick,\n      showCount = _ref.showCount,\n      clusterCountLayout = _ref.clusterCountLayout,\n      _ref$fontColor = _ref.fontColor,\n      fontColor = _ref$fontColor === void 0 ? COLOR_WHITE : _ref$fontColor;\n  var clusterLayerId = \"\".concat(sourceName, \"-layer-clusters\");\n  var clusterSymbolLayerId = \"\".concat(sourceName, \"-layer-cluster-count\"); // Use step expressions for clusters (https://docs.mapbox.com/mapbox-gl-js/style-spec/#expressions-step)\n\n  var paintOptions = Object.assign({\n    \"circle-color\": [\"step\", [\"get\", \"point_count\"], markerColor, smallThreshold, markerColor, mediumThreshold, markerColor, largeThreshold, markerColor],\n    \"circle-radius\": [\"step\", [\"get\", \"point_count\"], smallSize, smallThreshold, mediumSize, mediumThreshold, largeSize, largeThreshold, extraLargeSize],\n    \"circle-stroke-width\": borderWidth,\n    \"circle-stroke-color\": borderColor\n  }, clusterPaint);\n  var defaultClusterLayer = {\n    id: clusterLayerId,\n    type: \"circle\",\n    source: sourceName,\n    filter: [\"has\", \"point_count\"],\n    paint: paintOptions\n  };\n  map.addLayer(Object.assign({}, defaultClusterLayer));\n  /*\n   * Inspect cluster on click\n   */\n\n  map.on(\"click\", clusterLayerId, function (e) {\n    if (typeof onClick === \"function\") onClick(e);\n    var features = map.queryRenderedFeatures(e.point, {\n      layers: [clusterLayerId]\n    });\n    var clusterId = features[0].properties.cluster_id;\n    var source = map.getSource(sourceName);\n\n    if (isGeoJsonSource(source)) {\n      source.getClusterExpansionZoom(clusterId, function (err, zoom) {\n        if (err) return;\n        map.easeTo({\n          center: features[0].geometry.coordinates,\n          zoom: zoom\n        });\n      });\n    }\n  });\n  /*\n   * Symbol Layer for cluster point count\n   */\n\n  if (showCount) {\n    var defaultLayoutOptions = {\n      \"text-field\": \"{point_count_abbreviated}\",\n      \"text-size\": 24\n    };\n    var locationServiceStyle = mapStyle || Geo.getDefaultMap().style;\n\n    if (locationServiceStyle) {\n      defaultLayoutOptions[\"text-font\"] = [FONT_DEFAULT_BY_STYLE[locationServiceStyle]];\n    }\n\n    var layoutOptions = Object.assign(Object.assign({}, defaultLayoutOptions), clusterCountLayout);\n    var _paintOptions = {\n      \"text-color\": fontColor\n    };\n    var defaultClusterCount = {\n      id: clusterSymbolLayerId,\n      type: \"symbol\",\n      source: sourceName,\n      filter: [\"has\", \"point_count\"],\n      layout: layoutOptions,\n      paint: _paintOptions\n    };\n    map.addLayer(Object.assign({}, defaultClusterCount));\n  }\n\n  return {\n    clusterLayerId: clusterLayerId,\n    clusterSymbolLayerId: clusterSymbolLayerId\n  };\n}","map":{"version":3,"names":["Geo","COLOR_WHITE","MARKER_COLOR","isGeoJsonSource","FONT_DEFAULT_BY_STYLE","drawClusterLayer","sourceName","map","mapStyle","fillColor","markerColor","smCircleSize","smallSize","smThreshold","smallThreshold","mdCircleSize","mediumSize","mdThreshold","mediumThreshold","lgCircleSize","largeSize","lgThreshold","largeThreshold","xlCircleSize","extraLargeSize","borderWidth","borderColor","clusterPaint","onClick","showCount","clusterCountLayout","fontColor","clusterLayerId","clusterSymbolLayerId","paintOptions","Object","assign","defaultClusterLayer","id","type","source","filter","paint","addLayer","on","e","features","queryRenderedFeatures","point","layers","clusterId","properties","cluster_id","getSource","getClusterExpansionZoom","err","zoom","easeTo","center","geometry","coordinates","defaultLayoutOptions","locationServiceStyle","getDefaultMap","style","layoutOptions","defaultClusterCount","layout"],"sources":["C:/Users/lmore/OneDrive/Documents/GitHub/JacksOfAllTrades/jacksofalltrades/node_modules/maplibre-gl-js-amplify/lib/esm/drawClusterLayer.js"],"sourcesContent":["import { Geo } from \"@aws-amplify/geo\";\nimport { COLOR_WHITE, MARKER_COLOR } from \"./constants\";\nimport { isGeoJsonSource } from \"./utils\";\nimport { FONT_DEFAULT_BY_STYLE } from \"./constants\";\nexport function drawClusterLayer(sourceName, map, { fillColor: markerColor = MARKER_COLOR, smCircleSize: smallSize = 60, smThreshold: smallThreshold = 50, mdCircleSize: mediumSize = 100, mdThreshold: mediumThreshold = 100, lgCircleSize: largeSize = 140, lgThreshold: largeThreshold = 500, xlCircleSize: extraLargeSize = 180, borderWidth = 4, borderColor = COLOR_WHITE, clusterPaint, onClick, showCount, clusterCountLayout, fontColor = COLOR_WHITE, }, mapStyle) {\n    const clusterLayerId = `${sourceName}-layer-clusters`;\n    const clusterSymbolLayerId = `${sourceName}-layer-cluster-count`;\n    // Use step expressions for clusters (https://docs.mapbox.com/mapbox-gl-js/style-spec/#expressions-step)\n    const paintOptions = Object.assign({ \"circle-color\": [\n            \"step\",\n            [\"get\", \"point_count\"],\n            markerColor,\n            smallThreshold,\n            markerColor,\n            mediumThreshold,\n            markerColor,\n            largeThreshold,\n            markerColor,\n        ], \"circle-radius\": [\n            \"step\",\n            [\"get\", \"point_count\"],\n            smallSize,\n            smallThreshold,\n            mediumSize,\n            mediumThreshold,\n            largeSize,\n            largeThreshold,\n            extraLargeSize,\n        ], \"circle-stroke-width\": borderWidth, \"circle-stroke-color\": borderColor }, clusterPaint);\n    const defaultClusterLayer = {\n        id: clusterLayerId,\n        type: \"circle\",\n        source: sourceName,\n        filter: [\"has\", \"point_count\"],\n        paint: paintOptions,\n    };\n    map.addLayer(Object.assign({}, defaultClusterLayer));\n    /*\n     * Inspect cluster on click\n     */\n    map.on(\"click\", clusterLayerId, function (e) {\n        if (typeof onClick === \"function\")\n            onClick(e);\n        const features = map.queryRenderedFeatures(e.point, {\n            layers: [clusterLayerId],\n        });\n        const clusterId = features[0].properties.cluster_id;\n        const source = map.getSource(sourceName);\n        if (isGeoJsonSource(source)) {\n            source.getClusterExpansionZoom(clusterId, function (err, zoom) {\n                if (err)\n                    return;\n                map.easeTo({\n                    center: features[0].geometry.coordinates,\n                    zoom: zoom,\n                });\n            });\n        }\n    });\n    /*\n     * Symbol Layer for cluster point count\n     */\n    if (showCount) {\n        const defaultLayoutOptions = {\n            \"text-field\": \"{point_count_abbreviated}\",\n            \"text-size\": 24,\n        };\n        const locationServiceStyle = mapStyle || Geo.getDefaultMap().style;\n        if (locationServiceStyle) {\n            defaultLayoutOptions[\"text-font\"] = [\n                FONT_DEFAULT_BY_STYLE[locationServiceStyle],\n            ];\n        }\n        const layoutOptions = Object.assign(Object.assign({}, defaultLayoutOptions), clusterCountLayout);\n        const paintOptions = {\n            \"text-color\": fontColor,\n        };\n        const defaultClusterCount = {\n            id: clusterSymbolLayerId,\n            type: \"symbol\",\n            source: sourceName,\n            filter: [\"has\", \"point_count\"],\n            layout: layoutOptions,\n            paint: paintOptions,\n        };\n        map.addLayer(Object.assign({}, defaultClusterCount));\n    }\n    return { clusterLayerId, clusterSymbolLayerId };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}