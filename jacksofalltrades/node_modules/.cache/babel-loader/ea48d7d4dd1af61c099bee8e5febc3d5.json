{"ast":null,"code":"var SHORT_TO_HEX = {};\nvar HEX_TO_SHORT = {};\n\nfor (var i = 0; i < 256; i++) {\n  var encodedByte = i.toString(16).toLowerCase();\n\n  if (encodedByte.length === 1) {\n    encodedByte = \"0\" + encodedByte;\n  }\n\n  SHORT_TO_HEX[i] = encodedByte;\n  HEX_TO_SHORT[encodedByte] = i;\n}\n/**\n * Converts a hexadecimal encoded string to a Uint8Array of bytes.\n *\n * @param encoded The hexadecimal encoded string\n */\n\n\nexport function fromHex(encoded) {\n  if (encoded.length % 2 !== 0) {\n    throw new Error(\"Hex encoded strings must have an even number length\");\n  }\n\n  var out = new Uint8Array(encoded.length / 2);\n\n  for (var i = 0; i < encoded.length; i += 2) {\n    var encodedByte = encoded.substr(i, 2).toLowerCase();\n\n    if (encodedByte in HEX_TO_SHORT) {\n      out[i / 2] = HEX_TO_SHORT[encodedByte];\n    } else {\n      throw new Error(\"Cannot decode unrecognized sequence \" + encodedByte + \" as hexadecimal\");\n    }\n  }\n\n  return out;\n}\n/**\n * Converts a Uint8Array of binary data to a hexadecimal encoded string.\n *\n * @param bytes The binary data to encode\n */\n\nexport function toHex(bytes) {\n  var out = \"\";\n\n  for (var i = 0; i < bytes.byteLength; i++) {\n    out += SHORT_TO_HEX[bytes[i]];\n  }\n\n  return out;\n}","map":{"version":3,"mappings":"AAAA,IAAMA,YAAY,GAA8B,EAAhD;AACA,IAAMC,YAAY,GAA8B,EAAhD;;AAEA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,GAApB,EAAyBA,CAAC,EAA1B,EAA8B;EAC5B,IAAIC,WAAW,GAAGD,CAAC,CAACE,QAAF,CAAW,EAAX,EAAeC,WAAf,EAAlB;;EACA,IAAIF,WAAW,CAACG,MAAZ,KAAuB,CAA3B,EAA8B;IAC5BH,WAAW,GAAG,MAAIA,WAAlB;EACD;;EAEDH,YAAY,CAACE,CAAD,CAAZ,GAAkBC,WAAlB;EACAF,YAAY,CAACE,WAAD,CAAZ,GAA4BD,CAA5B;AACD;AAED;;;;;;;AAKA,OAAM,SAAUK,OAAV,CAAkBC,OAAlB,EAAiC;EACrC,IAAIA,OAAO,CAACF,MAAR,GAAiB,CAAjB,KAAuB,CAA3B,EAA8B;IAC5B,MAAM,IAAIG,KAAJ,CAAU,qDAAV,CAAN;EACD;;EAED,IAAMC,GAAG,GAAG,IAAIC,UAAJ,CAAeH,OAAO,CAACF,MAAR,GAAiB,CAAhC,CAAZ;;EACA,KAAK,IAAIJ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGM,OAAO,CAACF,MAA5B,EAAoCJ,CAAC,IAAI,CAAzC,EAA4C;IAC1C,IAAMC,WAAW,GAAGK,OAAO,CAACI,MAAR,CAAeV,CAAf,EAAkB,CAAlB,EAAqBG,WAArB,EAApB;;IACA,IAAIF,WAAW,IAAIF,YAAnB,EAAiC;MAC/BS,GAAG,CAACR,CAAC,GAAG,CAAL,CAAH,GAAaD,YAAY,CAACE,WAAD,CAAzB;IACD,CAFD,MAEO;MACL,MAAM,IAAIM,KAAJ,CAAU,yCAAuCN,WAAvC,GAAkD,iBAA5D,CAAN;IACD;EACF;;EAED,OAAOO,GAAP;AACD;AAED;;;;;;AAKA,OAAM,SAAUG,KAAV,CAAgBC,KAAhB,EAAiC;EACrC,IAAIJ,GAAG,GAAG,EAAV;;EACA,KAAK,IAAIR,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGY,KAAK,CAACC,UAA1B,EAAsCb,CAAC,EAAvC,EAA2C;IACzCQ,GAAG,IAAIV,YAAY,CAACc,KAAK,CAACZ,CAAD,CAAN,CAAnB;EACD;;EAED,OAAOQ,GAAP;AACD","names":["SHORT_TO_HEX","HEX_TO_SHORT","i","encodedByte","toString","toLowerCase","length","fromHex","encoded","Error","out","Uint8Array","substr","toHex","bytes","byteLength"],"sources":["C:\\Users\\lmore\\OneDrive\\Documents\\GitHub\\JacksOfAllTrades\\jacksofalltrades\\node_modules\\@aws-sdk\\util-hex-encoding\\src\\index.ts"],"sourcesContent":["const SHORT_TO_HEX: { [key: number]: string } = {};\nconst HEX_TO_SHORT: { [key: string]: number } = {};\n\nfor (let i = 0; i < 256; i++) {\n  let encodedByte = i.toString(16).toLowerCase();\n  if (encodedByte.length === 1) {\n    encodedByte = `0${encodedByte}`;\n  }\n\n  SHORT_TO_HEX[i] = encodedByte;\n  HEX_TO_SHORT[encodedByte] = i;\n}\n\n/**\n * Converts a hexadecimal encoded string to a Uint8Array of bytes.\n *\n * @param encoded The hexadecimal encoded string\n */\nexport function fromHex(encoded: string): Uint8Array {\n  if (encoded.length % 2 !== 0) {\n    throw new Error(\"Hex encoded strings must have an even number length\");\n  }\n\n  const out = new Uint8Array(encoded.length / 2);\n  for (let i = 0; i < encoded.length; i += 2) {\n    const encodedByte = encoded.substr(i, 2).toLowerCase();\n    if (encodedByte in HEX_TO_SHORT) {\n      out[i / 2] = HEX_TO_SHORT[encodedByte];\n    } else {\n      throw new Error(`Cannot decode unrecognized sequence ${encodedByte} as hexadecimal`);\n    }\n  }\n\n  return out;\n}\n\n/**\n * Converts a Uint8Array of binary data to a hexadecimal encoded string.\n *\n * @param bytes The binary data to encode\n */\nexport function toHex(bytes: Uint8Array): string {\n  let out = \"\";\n  for (let i = 0; i < bytes.byteLength; i++) {\n    out += SHORT_TO_HEX[bytes[i]];\n  }\n\n  return out;\n}\n"]},"metadata":{},"sourceType":"module"}