{"ast":null,"code":"import { __assign } from './_virtual/_tslib.js';\nimport { symbolObservable, toInvokeSource, mapContext, isMachine } from './utils.js';\nimport { provide } from './serviceScope.js';\n\nfunction createNullActor(id) {\n  var _a;\n\n  return _a = {\n    id: id,\n    send: function send() {\n      return void 0;\n    },\n    subscribe: function subscribe() {\n      return {\n        unsubscribe: function unsubscribe() {\n          return void 0;\n        }\n      };\n    },\n    getSnapshot: function getSnapshot() {\n      return undefined;\n    },\n    toJSON: function toJSON() {\n      return {\n        id: id\n      };\n    }\n  }, _a[symbolObservable] = function () {\n    return this;\n  }, _a;\n}\n/**\r\n * Creates a deferred actor that is able to be invoked given the provided\r\n * invocation information in its `.meta` value.\r\n *\r\n * @param invokeDefinition The meta information needed to invoke the actor.\r\n */\n\n\nfunction createInvocableActor(invokeDefinition, machine, context, _event) {\n  var _a;\n\n  var invokeSrc = toInvokeSource(invokeDefinition.src);\n  var serviceCreator = (_a = machine === null || machine === void 0 ? void 0 : machine.options.services) === null || _a === void 0 ? void 0 : _a[invokeSrc.type];\n  var resolvedData = invokeDefinition.data ? mapContext(invokeDefinition.data, context, _event) : undefined;\n  var tempActor = serviceCreator ? createDeferredActor(serviceCreator, invokeDefinition.id, resolvedData) : createNullActor(invokeDefinition.id); // @ts-ignore\n\n  tempActor.meta = invokeDefinition;\n  return tempActor;\n}\n\nfunction createDeferredActor(entity, id, data) {\n  var tempActor = createNullActor(id); // @ts-ignore\n\n  tempActor.deferred = true;\n\n  if (isMachine(entity)) {\n    // \"mute\" the existing service scope so potential spawned actors within the `.initialState` stay deferred here\n    var initialState_1 = tempActor.state = provide(undefined, function () {\n      return (data ? entity.withContext(data) : entity).initialState;\n    });\n\n    tempActor.getSnapshot = function () {\n      return initialState_1;\n    };\n  }\n\n  return tempActor;\n}\n\nfunction isActor(item) {\n  try {\n    return typeof item.send === 'function';\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction isSpawnedActor(item) {\n  return isActor(item) && 'id' in item;\n} // TODO: refactor the return type, this could be written in a better way but it's best to avoid unneccessary breaking changes now\n\n\nfunction toActorRef(actorRefLike) {\n  var _a;\n\n  return __assign((_a = {\n    subscribe: function subscribe() {\n      return {\n        unsubscribe: function unsubscribe() {\n          return void 0;\n        }\n      };\n    },\n    id: 'anonymous',\n    getSnapshot: function getSnapshot() {\n      return undefined;\n    }\n  }, _a[symbolObservable] = function () {\n    return this;\n  }, _a), actorRefLike);\n}\n\nexport { createDeferredActor, createInvocableActor, createNullActor, isActor, isSpawnedActor, toActorRef };","map":{"version":3,"names":["__assign","symbolObservable","toInvokeSource","mapContext","isMachine","provide","createNullActor","id","_a","send","subscribe","unsubscribe","getSnapshot","undefined","toJSON","createInvocableActor","invokeDefinition","machine","context","_event","invokeSrc","src","serviceCreator","options","services","type","resolvedData","data","tempActor","createDeferredActor","meta","entity","deferred","initialState_1","state","withContext","initialState","isActor","item","e","isSpawnedActor","toActorRef","actorRefLike"],"sources":["C:/Users/lmore/OneDrive/Documents/GitHub/JacksOfAllTrades/jacksofalltrades/node_modules/xstate/es/Actor.js"],"sourcesContent":["import { __assign } from './_virtual/_tslib.js';\nimport { symbolObservable, toInvokeSource, mapContext, isMachine } from './utils.js';\nimport { provide } from './serviceScope.js';\n\nfunction createNullActor(id) {\n  var _a;\n\n  return _a = {\n    id: id,\n    send: function () {\n      return void 0;\n    },\n    subscribe: function () {\n      return {\n        unsubscribe: function () {\n          return void 0;\n        }\n      };\n    },\n    getSnapshot: function () {\n      return undefined;\n    },\n    toJSON: function () {\n      return {\n        id: id\n      };\n    }\n  }, _a[symbolObservable] = function () {\n    return this;\n  }, _a;\n}\n/**\r\n * Creates a deferred actor that is able to be invoked given the provided\r\n * invocation information in its `.meta` value.\r\n *\r\n * @param invokeDefinition The meta information needed to invoke the actor.\r\n */\n\nfunction createInvocableActor(invokeDefinition, machine, context, _event) {\n  var _a;\n\n  var invokeSrc = toInvokeSource(invokeDefinition.src);\n  var serviceCreator = (_a = machine === null || machine === void 0 ? void 0 : machine.options.services) === null || _a === void 0 ? void 0 : _a[invokeSrc.type];\n  var resolvedData = invokeDefinition.data ? mapContext(invokeDefinition.data, context, _event) : undefined;\n  var tempActor = serviceCreator ? createDeferredActor(serviceCreator, invokeDefinition.id, resolvedData) : createNullActor(invokeDefinition.id); // @ts-ignore\n\n  tempActor.meta = invokeDefinition;\n  return tempActor;\n}\nfunction createDeferredActor(entity, id, data) {\n  var tempActor = createNullActor(id); // @ts-ignore\n\n  tempActor.deferred = true;\n\n  if (isMachine(entity)) {\n    // \"mute\" the existing service scope so potential spawned actors within the `.initialState` stay deferred here\n    var initialState_1 = tempActor.state = provide(undefined, function () {\n      return (data ? entity.withContext(data) : entity).initialState;\n    });\n\n    tempActor.getSnapshot = function () {\n      return initialState_1;\n    };\n  }\n\n  return tempActor;\n}\nfunction isActor(item) {\n  try {\n    return typeof item.send === 'function';\n  } catch (e) {\n    return false;\n  }\n}\nfunction isSpawnedActor(item) {\n  return isActor(item) && 'id' in item;\n} // TODO: refactor the return type, this could be written in a better way but it's best to avoid unneccessary breaking changes now\n\nfunction toActorRef(actorRefLike) {\n  var _a;\n\n  return __assign((_a = {\n    subscribe: function () {\n      return {\n        unsubscribe: function () {\n          return void 0;\n        }\n      };\n    },\n    id: 'anonymous',\n    getSnapshot: function () {\n      return undefined;\n    }\n  }, _a[symbolObservable] = function () {\n    return this;\n  }, _a), actorRefLike);\n}\n\nexport { createDeferredActor, createInvocableActor, createNullActor, isActor, isSpawnedActor, toActorRef };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}