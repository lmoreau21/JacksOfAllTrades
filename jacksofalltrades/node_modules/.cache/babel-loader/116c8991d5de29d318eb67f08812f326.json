{"ast":null,"code":"/*\n * Copyright 2017-2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nimport { Amplify, ConsoleLogger as Logger, Hub, Parser } from '@aws-amplify/core';\nimport { AWSPinpointProvider } from './Providers/AWSPinpointProvider';\nimport { PageViewTracker, EventTracker, SessionTracker } from './trackers';\nvar logger = new Logger('AnalyticsClass');\nvar AMPLIFY_SYMBOL = typeof Symbol !== 'undefined' && typeof Symbol.for === 'function' ? Symbol.for('amplify_default') : '@@amplify_default';\n\nvar dispatchAnalyticsEvent = function dispatchAnalyticsEvent(event, data, message) {\n  Hub.dispatch('analytics', {\n    event: event,\n    data: data,\n    message: message\n  }, 'Analytics', AMPLIFY_SYMBOL);\n};\n\nvar trackers = {\n  pageView: PageViewTracker,\n  event: EventTracker,\n  session: SessionTracker\n};\nvar _instance = null;\n/**\n * Provide mobile analytics client functions\n */\n\nvar AnalyticsClass =\n/** @class */\nfunction () {\n  /**\n   * Initialize Analtyics\n   * @param config - Configuration of the Analytics\n   */\n  function AnalyticsClass() {\n    this._config = {};\n    this._pluggables = [];\n    this._disabled = false;\n    this._trackers = {};\n    _instance = this;\n    this.record = this.record.bind(this);\n    Hub.listen('auth', listener);\n    Hub.listen('storage', listener);\n    Hub.listen('analytics', listener);\n  }\n\n  AnalyticsClass.prototype.getModuleName = function () {\n    return 'Analytics';\n  };\n  /**\n   * configure Analytics\n   * @param {Object} config - Configuration of the Analytics\n   */\n\n\n  AnalyticsClass.prototype.configure = function (config) {\n    var _this = this;\n\n    if (!config) return this._config;\n    logger.debug('configure Analytics', config);\n    var amplifyConfig = Parser.parseMobilehubConfig(config);\n    this._config = Object.assign({}, this._config, amplifyConfig.Analytics, config);\n\n    if (this._config['disabled']) {\n      this._disabled = true;\n    } // turn on the autoSessionRecord if not specified\n\n\n    if (this._config['autoSessionRecord'] === undefined) {\n      this._config['autoSessionRecord'] = true;\n    }\n\n    this._pluggables.forEach(function (pluggable) {\n      // for backward compatibility\n      var providerConfig = pluggable.getProviderName() === 'AWSPinpoint' && !_this._config['AWSPinpoint'] ? _this._config : _this._config[pluggable.getProviderName()];\n      pluggable.configure(__assign({\n        disabled: _this._config['disabled'],\n        autoSessionRecord: _this._config['autoSessionRecord']\n      }, providerConfig));\n    });\n\n    if (this._pluggables.length === 0) {\n      this.addPluggable(new AWSPinpointProvider());\n    }\n\n    dispatchAnalyticsEvent('configured', null, \"The Analytics category has been configured successfully\");\n    logger.debug('current configuration', this._config);\n    return this._config;\n  };\n  /**\n   * add plugin into Analytics category\n   * @param pluggable - an instance of the plugin\n   */\n\n\n  AnalyticsClass.prototype.addPluggable = function (pluggable) {\n    if (pluggable && pluggable.getCategory() === 'Analytics') {\n      this._pluggables.push(pluggable); // for backward compatibility\n\n\n      var providerConfig = pluggable.getProviderName() === 'AWSPinpoint' && !this._config['AWSPinpoint'] ? this._config : this._config[pluggable.getProviderName()];\n\n      var config = __assign({\n        disabled: this._config['disabled']\n      }, providerConfig);\n\n      pluggable.configure(config);\n      return config;\n    }\n  };\n  /**\n   * Get the plugin object\n   * @param providerName - the name of the provider to be removed\n   */\n\n\n  AnalyticsClass.prototype.getPluggable = function (providerName) {\n    for (var i = 0; i < this._pluggables.length; i += 1) {\n      var pluggable = this._pluggables[i];\n\n      if (pluggable.getProviderName() === providerName) {\n        return pluggable;\n      }\n    }\n\n    logger.debug('No plugin found with providerName', providerName);\n    return null;\n  };\n  /**\n   * Remove the plugin object\n   * @param providerName - the name of the provider to be removed\n   */\n\n\n  AnalyticsClass.prototype.removePluggable = function (providerName) {\n    var idx = 0;\n\n    while (idx < this._pluggables.length) {\n      if (this._pluggables[idx].getProviderName() === providerName) {\n        break;\n      }\n\n      idx += 1;\n    }\n\n    if (idx === this._pluggables.length) {\n      logger.debug('No plugin found with providerName', providerName);\n      return;\n    } else {\n      this._pluggables.splice(idx, idx + 1);\n\n      return;\n    }\n  };\n  /**\n   * stop sending events\n   */\n\n\n  AnalyticsClass.prototype.disable = function () {\n    this._disabled = true;\n  };\n  /**\n   * start sending events\n   */\n\n\n  AnalyticsClass.prototype.enable = function () {\n    this._disabled = false;\n  };\n  /**\n   * Record Session start\n   * @param [provider] - name of the provider.\n   * @return - A promise which resolves if buffer doesn't overflow\n   */\n\n\n  AnalyticsClass.prototype.startSession = function (provider) {\n    return __awaiter(this, void 0, void 0, function () {\n      var params;\n      return __generator(this, function (_a) {\n        params = {\n          event: {\n            name: '_session.start'\n          },\n          provider: provider\n        };\n        return [2\n        /*return*/\n        , this._sendEvent(params)];\n      });\n    });\n  };\n  /**\n   * Record Session stop\n   * @param [provider] - name of the provider.\n   * @return - A promise which resolves if buffer doesn't overflow\n   */\n\n\n  AnalyticsClass.prototype.stopSession = function (provider) {\n    return __awaiter(this, void 0, void 0, function () {\n      var params;\n      return __generator(this, function (_a) {\n        params = {\n          event: {\n            name: '_session.stop'\n          },\n          provider: provider\n        };\n        return [2\n        /*return*/\n        , this._sendEvent(params)];\n      });\n    });\n  };\n\n  AnalyticsClass.prototype.record = function (event, providerOrAttributes, metrics) {\n    return __awaiter(this, void 0, void 0, function () {\n      var params;\n      return __generator(this, function (_a) {\n        params = null; // this is just for compatibility, going to be deprecated\n\n        if (typeof event === 'string') {\n          params = {\n            event: {\n              name: event,\n              attributes: providerOrAttributes,\n              metrics: metrics\n            },\n            provider: 'AWSPinpoint'\n          };\n        } else {\n          params = {\n            event: event,\n            provider: providerOrAttributes\n          };\n        }\n\n        return [2\n        /*return*/\n        , this._sendEvent(params)];\n      });\n    });\n  };\n\n  AnalyticsClass.prototype.updateEndpoint = function (attrs, provider) {\n    return __awaiter(this, void 0, void 0, function () {\n      var event;\n      return __generator(this, function (_a) {\n        event = __assign(__assign({}, attrs), {\n          name: '_update_endpoint'\n        });\n        return [2\n        /*return*/\n        , this.record(event, provider)];\n      });\n    });\n  };\n\n  AnalyticsClass.prototype._sendEvent = function (params) {\n    var _this = this;\n\n    if (this._disabled) {\n      logger.debug('Analytics has been disabled');\n      return Promise.resolve();\n    }\n\n    var provider = params.provider ? params.provider : 'AWSPinpoint';\n    return new Promise(function (resolve, reject) {\n      _this._pluggables.forEach(function (pluggable) {\n        if (pluggable.getProviderName() === provider) {\n          pluggable.record(params, {\n            resolve: resolve,\n            reject: reject\n          });\n        }\n      });\n    });\n  };\n\n  AnalyticsClass.prototype.autoTrack = function (trackerType, opts) {\n    if (!trackers[trackerType]) {\n      logger.debug('invalid tracker type');\n      return;\n    } // to sync up two different configuration ways of auto session tracking\n\n\n    if (trackerType === 'session') {\n      this._config['autoSessionRecord'] = opts['enable'];\n    }\n\n    var tracker = this._trackers[trackerType];\n\n    if (!tracker) {\n      this._trackers[trackerType] = new trackers[trackerType](this.record, opts);\n    } else {\n      tracker.configure(opts);\n    }\n  };\n\n  return AnalyticsClass;\n}();\n\nexport { AnalyticsClass };\nvar endpointUpdated = false;\nvar authConfigured = false;\nvar analyticsConfigured = false;\n\nvar listener = function listener(capsule) {\n  var channel = capsule.channel,\n      payload = capsule.payload;\n  logger.debug('on hub capsule ' + channel, payload);\n\n  switch (channel) {\n    case 'auth':\n      authEvent(payload);\n      break;\n\n    case 'storage':\n      storageEvent(payload);\n      break;\n\n    case 'analytics':\n      analyticsEvent(payload);\n      break;\n\n    default:\n      break;\n  }\n};\n\nvar storageEvent = function storageEvent(payload) {\n  var _a = payload.data,\n      attrs = _a.attrs,\n      metrics = _a.metrics;\n  if (!attrs) return;\n\n  if (analyticsConfigured) {\n    _instance.record({\n      name: 'Storage',\n      attributes: attrs,\n      metrics: metrics\n    }).catch(function (e) {\n      logger.debug('Failed to send the storage event automatically', e);\n    });\n  }\n};\n\nvar authEvent = function authEvent(payload) {\n  var event = payload.event;\n\n  if (!event) {\n    return;\n  }\n\n  var recordAuthEvent = function recordAuthEvent(eventName) {\n    return __awaiter(void 0, void 0, void 0, function () {\n      var err_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!(authConfigured && analyticsConfigured)) return [3\n            /*break*/\n            , 4];\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , _instance.record({\n              name: \"_userauth.\" + eventName\n            })];\n\n          case 2:\n            return [2\n            /*return*/\n            , _a.sent()];\n\n          case 3:\n            err_1 = _a.sent();\n            logger.debug(\"Failed to send the \" + eventName + \" event automatically\", err_1);\n            return [3\n            /*break*/\n            , 4];\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  switch (event) {\n    case 'signIn':\n      return recordAuthEvent('sign_in');\n\n    case 'signUp':\n      return recordAuthEvent('sign_up');\n\n    case 'signOut':\n      return recordAuthEvent('sign_out');\n\n    case 'signIn_failure':\n      return recordAuthEvent('auth_fail');\n\n    case 'configured':\n      authConfigured = true;\n\n      if (authConfigured && analyticsConfigured) {\n        sendEvents();\n      }\n\n      break;\n  }\n};\n\nvar analyticsEvent = function analyticsEvent(payload) {\n  var event = payload.event;\n  if (!event) return;\n\n  switch (event) {\n    case 'pinpointProvider_configured':\n      analyticsConfigured = true;\n\n      if (authConfigured && analyticsConfigured) {\n        sendEvents();\n      }\n\n      break;\n  }\n};\n\nvar sendEvents = function sendEvents() {\n  var config = _instance.configure();\n\n  if (!endpointUpdated && config['autoSessionRecord']) {\n    _instance.updateEndpoint({\n      immediate: true\n    }).catch(function (e) {\n      logger.debug('Failed to update the endpoint', e);\n    });\n\n    endpointUpdated = true;\n  }\n\n  _instance.autoTrack('session', {\n    enable: config['autoSessionRecord']\n  });\n};\n\nexport var Analytics = new AnalyticsClass();\nAmplify.register(Analytics);","map":{"version":3,"mappings":"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","names":["Amplify","ConsoleLogger","Logger","Hub","Parser","AWSPinpointProvider","PageViewTracker","EventTracker","SessionTracker","logger","AMPLIFY_SYMBOL","Symbol","for","dispatchAnalyticsEvent","event","data","message","dispatch","trackers","pageView","session","_instance","_config","_pluggables","_disabled","_trackers","record","bind","listen","listener","AnalyticsClass","config","debug","amplifyConfig","parseMobilehubConfig","Object","assign","Analytics","undefined","forEach","providerConfig","pluggable","getProviderName","_this","configure","__assign","disabled","autoSessionRecord","length","addPluggable","getCategory","push","providerName","i","idx","splice","provider","params","name","_sendEvent","providerOrAttributes","metrics","attributes","attrs","Promise","resolve","reject","trackerType","opts","tracker","endpointUpdated","authConfigured","analyticsConfigured","payload","channel","authEvent","storageEvent","analyticsEvent","catch","e","recordAuthEvent","eventName","_a","err_1","sendEvents","updateEndpoint","immediate","autoTrack","enable","register"],"sources":["C:\\Users\\lmore\\OneDrive\\Documents\\GitHub\\JacksOfAllTrades\\jacksofalltrades\\node_modules\\@aws-amplify\\analytics\\src\\Analytics.ts"],"sourcesContent":["/*\n * Copyright 2017-2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n\nimport {\n\tAmplify,\n\tConsoleLogger as Logger,\n\tHub,\n\tParser,\n} from '@aws-amplify/core';\nimport { AWSPinpointProvider } from './Providers/AWSPinpointProvider';\n\nimport {\n\tAnalyticsProvider,\n\tEventAttributes,\n\tEventMetrics,\n\tAnalyticsEvent,\n\tAutoTrackSessionOpts,\n\tAutoTrackPageViewOpts,\n\tAutoTrackEventOpts,\n\tPersonalizeAnalyticsEvent,\n\tKinesisAnalyticsEvent,\n} from './types';\nimport { PageViewTracker, EventTracker, SessionTracker } from './trackers';\n\nconst logger = new Logger('AnalyticsClass');\n\nconst AMPLIFY_SYMBOL = (\n\ttypeof Symbol !== 'undefined' && typeof Symbol.for === 'function'\n\t\t? Symbol.for('amplify_default')\n\t\t: '@@amplify_default'\n) as Symbol;\n\nconst dispatchAnalyticsEvent = (event: string, data: any, message: string) => {\n\tHub.dispatch(\n\t\t'analytics',\n\t\t{ event, data, message },\n\t\t'Analytics',\n\t\tAMPLIFY_SYMBOL\n\t);\n};\n\nconst trackers = {\n\tpageView: PageViewTracker,\n\tevent: EventTracker,\n\tsession: SessionTracker,\n};\n\ntype TrackerTypes = keyof typeof trackers;\ntype Trackers = typeof trackers[TrackerTypes];\nlet _instance = null;\n\n/**\n * Provide mobile analytics client functions\n */\nexport class AnalyticsClass {\n\tprivate _config;\n\tprivate _pluggables: AnalyticsProvider[];\n\tprivate _disabled: boolean;\n\tprivate _trackers: Trackers | {};\n\n\t/**\n\t * Initialize Analtyics\n\t * @param config - Configuration of the Analytics\n\t */\n\tconstructor() {\n\t\tthis._config = {};\n\t\tthis._pluggables = [];\n\t\tthis._disabled = false;\n\t\tthis._trackers = {};\n\t\t_instance = this;\n\n\t\tthis.record = this.record.bind(this);\n\t\tHub.listen('auth', listener);\n\t\tHub.listen('storage', listener);\n\t\tHub.listen('analytics', listener);\n\t}\n\n\tpublic getModuleName() {\n\t\treturn 'Analytics';\n\t}\n\t/**\n\t * configure Analytics\n\t * @param {Object} config - Configuration of the Analytics\n\t */\n\tpublic configure(config?) {\n\t\tif (!config) return this._config;\n\t\tlogger.debug('configure Analytics', config);\n\t\tconst amplifyConfig = Parser.parseMobilehubConfig(config);\n\t\tthis._config = Object.assign(\n\t\t\t{},\n\t\t\tthis._config,\n\t\t\tamplifyConfig.Analytics,\n\t\t\tconfig\n\t\t);\n\n\t\tif (this._config['disabled']) {\n\t\t\tthis._disabled = true;\n\t\t}\n\n\t\t// turn on the autoSessionRecord if not specified\n\t\tif (this._config['autoSessionRecord'] === undefined) {\n\t\t\tthis._config['autoSessionRecord'] = true;\n\t\t}\n\n\t\tthis._pluggables.forEach(pluggable => {\n\t\t\t// for backward compatibility\n\t\t\tconst providerConfig =\n\t\t\t\tpluggable.getProviderName() === 'AWSPinpoint' &&\n\t\t\t\t!this._config['AWSPinpoint']\n\t\t\t\t\t? this._config\n\t\t\t\t\t: this._config[pluggable.getProviderName()];\n\n\t\t\tpluggable.configure({\n\t\t\t\tdisabled: this._config['disabled'],\n\t\t\t\tautoSessionRecord: this._config['autoSessionRecord'],\n\t\t\t\t...providerConfig,\n\t\t\t});\n\t\t});\n\n\t\tif (this._pluggables.length === 0) {\n\t\t\tthis.addPluggable(new AWSPinpointProvider());\n\t\t}\n\n\t\tdispatchAnalyticsEvent(\n\t\t\t'configured',\n\t\t\tnull,\n\t\t\t`The Analytics category has been configured successfully`\n\t\t);\n\t\tlogger.debug('current configuration', this._config);\n\t\treturn this._config;\n\t}\n\n\t/**\n\t * add plugin into Analytics category\n\t * @param pluggable - an instance of the plugin\n\t */\n\tpublic addPluggable(pluggable: AnalyticsProvider) {\n\t\tif (pluggable && pluggable.getCategory() === 'Analytics') {\n\t\t\tthis._pluggables.push(pluggable);\n\t\t\t// for backward compatibility\n\t\t\tconst providerConfig =\n\t\t\t\tpluggable.getProviderName() === 'AWSPinpoint' &&\n\t\t\t\t!this._config['AWSPinpoint']\n\t\t\t\t\t? this._config\n\t\t\t\t\t: this._config[pluggable.getProviderName()];\n\t\t\tconst config = { disabled: this._config['disabled'], ...providerConfig };\n\t\t\tpluggable.configure(config);\n\t\t\treturn config;\n\t\t}\n\t}\n\n\t/**\n\t * Get the plugin object\n\t * @param providerName - the name of the provider to be removed\n\t */\n\tpublic getPluggable(providerName: string): AnalyticsProvider {\n\t\tfor (let i = 0; i < this._pluggables.length; i += 1) {\n\t\t\tconst pluggable = this._pluggables[i];\n\t\t\tif (pluggable.getProviderName() === providerName) {\n\t\t\t\treturn pluggable;\n\t\t\t}\n\t\t}\n\n\t\tlogger.debug('No plugin found with providerName', providerName);\n\t\treturn null;\n\t}\n\n\t/**\n\t * Remove the plugin object\n\t * @param providerName - the name of the provider to be removed\n\t */\n\tpublic removePluggable(providerName: string): void {\n\t\tlet idx = 0;\n\t\twhile (idx < this._pluggables.length) {\n\t\t\tif (this._pluggables[idx].getProviderName() === providerName) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tidx += 1;\n\t\t}\n\n\t\tif (idx === this._pluggables.length) {\n\t\t\tlogger.debug('No plugin found with providerName', providerName);\n\t\t\treturn;\n\t\t} else {\n\t\t\tthis._pluggables.splice(idx, idx + 1);\n\t\t\treturn;\n\t\t}\n\t}\n\n\t/**\n\t * stop sending events\n\t */\n\tpublic disable() {\n\t\tthis._disabled = true;\n\t}\n\n\t/**\n\t * start sending events\n\t */\n\tpublic enable() {\n\t\tthis._disabled = false;\n\t}\n\n\t/**\n\t * Record Session start\n\t * @param [provider] - name of the provider.\n\t * @return - A promise which resolves if buffer doesn't overflow\n\t */\n\tpublic async startSession(provider?: string) {\n\t\tconst params = { event: { name: '_session.start' }, provider };\n\t\treturn this._sendEvent(params);\n\t}\n\n\t/**\n\t * Record Session stop\n\t * @param [provider] - name of the provider.\n\t * @return - A promise which resolves if buffer doesn't overflow\n\t */\n\tpublic async stopSession(provider?: string) {\n\t\tconst params = { event: { name: '_session.stop' }, provider };\n\t\treturn this._sendEvent(params);\n\t}\n\n\t/**\n\t * Record one analytic event and send it to Pinpoint\n\t * @param event - An object with the name of the event, attributes of the event and event metrics.\n\t * @param [provider] - name of the provider.\n\t */\n\tpublic async record(\n\t\tevent: AnalyticsEvent | PersonalizeAnalyticsEvent | KinesisAnalyticsEvent,\n\t\tprovider?: string\n\t);\n\t/**\n\t * Record one analytic event and send it to Pinpoint\n\t * @deprecated Use the new syntax and pass in the event as an object instead.\n\t * @param eventName - The name of the event\n\t * @param [attributes] - Attributes of the event\n\t * @param [metrics] - Event metrics\n\t * @return - A promise which resolves if buffer doesn't overflow\n\t */\n\tpublic async record(\n\t\teventName: string,\n\t\tattributes?: EventAttributes,\n\t\tmetrics?: EventMetrics\n\t);\n\tpublic async record(\n\t\tevent:\n\t\t\t| string\n\t\t\t| AnalyticsEvent\n\t\t\t| PersonalizeAnalyticsEvent\n\t\t\t| KinesisAnalyticsEvent,\n\t\tproviderOrAttributes?: string | EventAttributes,\n\t\tmetrics?: EventMetrics\n\t) {\n\t\tlet params = null;\n\t\t// this is just for compatibility, going to be deprecated\n\t\tif (typeof event === 'string') {\n\t\t\tparams = {\n\t\t\t\tevent: {\n\t\t\t\t\tname: event,\n\t\t\t\t\tattributes: providerOrAttributes,\n\t\t\t\t\tmetrics,\n\t\t\t\t},\n\t\t\t\tprovider: 'AWSPinpoint',\n\t\t\t};\n\t\t} else {\n\t\t\tparams = { event, provider: providerOrAttributes };\n\t\t}\n\t\treturn this._sendEvent(params);\n\t}\n\n\tpublic async updateEndpoint(\n\t\tattrs: { [key: string]: any },\n\t\tprovider?: string\n\t) {\n\t\tconst event = { ...attrs, name: '_update_endpoint' };\n\n\t\treturn this.record(event, provider);\n\t}\n\n\tprivate _sendEvent(params: {\n\t\tevent: AnalyticsEvent | PersonalizeAnalyticsEvent | KinesisAnalyticsEvent;\n\t\tprovider?: string;\n\t}) {\n\t\tif (this._disabled) {\n\t\t\tlogger.debug('Analytics has been disabled');\n\t\t\treturn Promise.resolve();\n\t\t}\n\n\t\tconst provider = params.provider ? params.provider : 'AWSPinpoint';\n\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tthis._pluggables.forEach(pluggable => {\n\t\t\t\tif (pluggable.getProviderName() === provider) {\n\t\t\t\t\tpluggable.record(params, { resolve, reject });\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Enable or disable auto tracking\n\t * @param trackerType - The type of tracker to activate.\n\t * @param [opts] - Auto tracking options.\n\t */\n\tpublic autoTrack(trackerType: 'session', opts: AutoTrackSessionOpts);\n\tpublic autoTrack(trackerType: 'pageView', opts: AutoTrackPageViewOpts);\n\tpublic autoTrack(trackerType: 'event', opts: AutoTrackEventOpts);\n\t// ensures backwards compatibility for non-pinpoint provider users\n\tpublic autoTrack(\n\t\ttrackerType: TrackerTypes,\n\t\topts: { provider: string; [key: string]: any }\n\t);\n\tpublic autoTrack(trackerType: TrackerTypes, opts: { [key: string]: any }) {\n\t\tif (!trackers[trackerType]) {\n\t\t\tlogger.debug('invalid tracker type');\n\t\t\treturn;\n\t\t}\n\n\t\t// to sync up two different configuration ways of auto session tracking\n\t\tif (trackerType === 'session') {\n\t\t\tthis._config['autoSessionRecord'] = opts['enable'];\n\t\t}\n\n\t\tconst tracker = this._trackers[trackerType];\n\t\tif (!tracker) {\n\t\t\tthis._trackers[trackerType] = new trackers[trackerType](\n\t\t\t\tthis.record,\n\t\t\t\topts\n\t\t\t);\n\t\t} else {\n\t\t\ttracker.configure(opts);\n\t\t}\n\t}\n}\n\nlet endpointUpdated = false;\nlet authConfigured = false;\nlet analyticsConfigured = false;\nconst listener = capsule => {\n\tconst { channel, payload } = capsule;\n\tlogger.debug('on hub capsule ' + channel, payload);\n\n\tswitch (channel) {\n\t\tcase 'auth':\n\t\t\tauthEvent(payload);\n\t\t\tbreak;\n\t\tcase 'storage':\n\t\t\tstorageEvent(payload);\n\t\t\tbreak;\n\t\tcase 'analytics':\n\t\t\tanalyticsEvent(payload);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tbreak;\n\t}\n};\n\nconst storageEvent = payload => {\n\tconst {\n\t\tdata: { attrs, metrics },\n\t} = payload;\n\tif (!attrs) return;\n\n\tif (analyticsConfigured) {\n\t\t_instance\n\t\t\t.record({\n\t\t\t\tname: 'Storage',\n\t\t\t\tattributes: attrs,\n\t\t\t\tmetrics,\n\t\t\t})\n\t\t\t.catch(e => {\n\t\t\t\tlogger.debug('Failed to send the storage event automatically', e);\n\t\t\t});\n\t}\n};\n\nconst authEvent = payload => {\n\tconst { event } = payload;\n\tif (!event) {\n\t\treturn;\n\t}\n\n\tconst recordAuthEvent = async eventName => {\n\t\tif (authConfigured && analyticsConfigured) {\n\t\t\ttry {\n\t\t\t\treturn await _instance.record({ name: `_userauth.${eventName}` });\n\t\t\t} catch (err) {\n\t\t\t\tlogger.debug(\n\t\t\t\t\t`Failed to send the ${eventName} event automatically`,\n\t\t\t\t\terr\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t};\n\n\tswitch (event) {\n\t\tcase 'signIn':\n\t\t\treturn recordAuthEvent('sign_in');\n\t\tcase 'signUp':\n\t\t\treturn recordAuthEvent('sign_up');\n\t\tcase 'signOut':\n\t\t\treturn recordAuthEvent('sign_out');\n\t\tcase 'signIn_failure':\n\t\t\treturn recordAuthEvent('auth_fail');\n\t\tcase 'configured':\n\t\t\tauthConfigured = true;\n\t\t\tif (authConfigured && analyticsConfigured) {\n\t\t\t\tsendEvents();\n\t\t\t}\n\t\t\tbreak;\n\t}\n};\n\nconst analyticsEvent = payload => {\n\tconst { event } = payload;\n\tif (!event) return;\n\n\tswitch (event) {\n\t\tcase 'pinpointProvider_configured':\n\t\t\tanalyticsConfigured = true;\n\t\t\tif (authConfigured && analyticsConfigured) {\n\t\t\t\tsendEvents();\n\t\t\t}\n\t\t\tbreak;\n\t}\n};\n\nconst sendEvents = () => {\n\tconst config = _instance.configure();\n\tif (!endpointUpdated && config['autoSessionRecord']) {\n\t\t_instance.updateEndpoint({ immediate: true }).catch(e => {\n\t\t\tlogger.debug('Failed to update the endpoint', e);\n\t\t});\n\t\tendpointUpdated = true;\n\t}\n\t_instance.autoTrack('session', {\n\t\tenable: config['autoSessionRecord'],\n\t});\n};\n\nexport const Analytics = new AnalyticsClass();\nAmplify.register(Analytics);\n"]},"metadata":{},"sourceType":"module"}