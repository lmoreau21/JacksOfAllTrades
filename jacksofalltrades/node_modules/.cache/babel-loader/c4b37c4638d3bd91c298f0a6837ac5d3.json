{"ast":null,"code":"import { __values } from \"tslib\";\nimport { escapeUri } from \"@aws-sdk/util-uri-escape\";\nimport { SIGNATURE_HEADER } from \"./constants\";\n/**\n * @internal\n */\n\nexport function getCanonicalQuery(_a) {\n  var e_1, _b;\n\n  var _c = _a.query,\n      query = _c === void 0 ? {} : _c;\n  var keys = [];\n  var serialized = {};\n\n  var _loop_1 = function (key) {\n    if (key.toLowerCase() === SIGNATURE_HEADER) {\n      return \"continue\";\n    }\n\n    keys.push(key);\n    var value = query[key];\n\n    if (typeof value === \"string\") {\n      serialized[key] = escapeUri(key) + \"=\" + escapeUri(value);\n    } else if (Array.isArray(value)) {\n      serialized[key] = value.slice(0).sort().reduce(function (encoded, value) {\n        return encoded.concat([escapeUri(key) + \"=\" + escapeUri(value)]);\n      }, []).join(\"&\");\n    }\n  };\n\n  try {\n    for (var _d = __values(Object.keys(query).sort()), _e = _d.next(); !_e.done; _e = _d.next()) {\n      var key = _e.value;\n\n      _loop_1(key);\n    }\n  } catch (e_1_1) {\n    e_1 = {\n      error: e_1_1\n    };\n  } finally {\n    try {\n      if (_e && !_e.done && (_b = _d.return)) _b.call(_d);\n    } finally {\n      if (e_1) throw e_1.error;\n    }\n  }\n\n  return keys.map(function (key) {\n    return serialized[key];\n  }).filter(function (serialized) {\n    return serialized;\n  }) // omit any falsy values\n  .join(\"&\");\n}","map":{"version":3,"mappings":";AACA,SAASA,SAAT,QAA0B,0BAA1B;AAEA,SAASC,gBAAT,QAAiC,aAAjC;AAEA;;;;AAGA,OAAM,SAAUC,iBAAV,CAA4BC,EAA5B,EAAuD;;;MAAzBC;MAAAC,KAAK,mBAAG,EAAH,GAAKD;EAC5C,IAAME,IAAI,GAAkB,EAA5B;EACA,IAAMC,UAAU,GAA8B,EAA9C;;0BACWC,KAAG;IACZ,IAAIA,GAAG,CAACC,WAAJ,OAAsBR,gBAA1B,EAA4C;;IAE3C;;IAEDK,IAAI,CAACI,IAAL,CAAUF,GAAV;IACA,IAAMG,KAAK,GAAGN,KAAK,CAACG,GAAD,CAAnB;;IACA,IAAI,OAAOG,KAAP,KAAiB,QAArB,EAA+B;MAC7BJ,UAAU,CAACC,GAAD,CAAV,GAAqBR,SAAS,CAACQ,GAAD,CAAT,GAAc,GAAd,GAAkBR,SAAS,CAACW,KAAD,CAAhD;IACD,CAFD,MAEO,IAAIC,KAAK,CAACC,OAAN,CAAcF,KAAd,CAAJ,EAA0B;MAC/BJ,UAAU,CAACC,GAAD,CAAV,GAAkBG,KAAK,CACpBG,KADe,CACT,CADS,EAEfC,IAFe,GAGfC,MAHe,CAId,UAACC,OAAD,EAAyBN,KAAzB,EAAsC;QAAK,cAAO,CAACO,MAAR,CAAe,CAAIlB,SAAS,CAACQ,GAAD,CAAT,GAAc,GAAd,GAAkBR,SAAS,CAACW,KAAD,CAA/B,CAAf;MAAyD,CAJtF,EAKd,EALc,EAOfQ,IAPe,CAOV,GAPU,CAAlB;IAQD;;;;IAlBH,KAAkB,wBAAM,CAACb,IAAP,CAAYD,KAAZ,EAAmBU,IAAnB,KAAyBK,cAA3C,EAA2C,QAA3C,EAA2CA,cAA3C,EAA2C;MAAtC,IAAMZ,GAAG,WAAT;;cAAMA;IAmBV;;;;;;;;;;;;;EAED,OAAOF,IAAI,CACRe,GADI,CACA,UAACb,GAAD,EAAI;IAAK,iBAAU,CAACA,GAAD,CAAV;EAAe,CADxB,EAEJc,MAFI,CAEG,UAACf,UAAD,EAAW;IAAK;EAAU,CAF7B,EAE+B;EAF/B,CAGJY,IAHI,CAGC,GAHD,CAAP;AAID","names":["escapeUri","SIGNATURE_HEADER","getCanonicalQuery","_a","_c","query","keys","serialized","key","toLowerCase","push","value","Array","isArray","slice","sort","reduce","encoded","concat","join","_e","map","filter"],"sources":["C:\\Users\\lmore\\OneDrive\\Documents\\GitHub\\JacksOfAllTrades\\jacksofalltrades\\node_modules\\@aws-sdk\\signature-v4\\src\\getCanonicalQuery.ts"],"sourcesContent":["import { HttpRequest } from \"@aws-sdk/types\";\nimport { escapeUri } from \"@aws-sdk/util-uri-escape\";\n\nimport { SIGNATURE_HEADER } from \"./constants\";\n\n/**\n * @internal\n */\nexport function getCanonicalQuery({ query = {} }: HttpRequest): string {\n  const keys: Array<string> = [];\n  const serialized: { [key: string]: string } = {};\n  for (const key of Object.keys(query).sort()) {\n    if (key.toLowerCase() === SIGNATURE_HEADER) {\n      continue;\n    }\n\n    keys.push(key);\n    const value = query[key];\n    if (typeof value === \"string\") {\n      serialized[key] = `${escapeUri(key)}=${escapeUri(value)}`;\n    } else if (Array.isArray(value)) {\n      serialized[key] = value\n        .slice(0)\n        .sort()\n        .reduce(\n          (encoded: Array<string>, value: string) => encoded.concat([`${escapeUri(key)}=${escapeUri(value)}`]),\n          []\n        )\n        .join(\"&\");\n    }\n  }\n\n  return keys\n    .map((key) => serialized[key])\n    .filter((serialized) => serialized) // omit any falsy values\n    .join(\"&\");\n}\n"]},"metadata":{},"sourceType":"module"}