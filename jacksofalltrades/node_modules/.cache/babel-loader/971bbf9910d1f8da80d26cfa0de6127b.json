{"ast":null,"code":"import MapboxDraw from \"@mapbox/mapbox-gl-draw\";\nimport { CircleMode, SimpleSelectMode, DirectMode } from \"maplibre-gl-draw-circle\";\nimport { getPolygonFeatureFromBounds, getCircleFeatureFromCoords } from \"../geofenceUtils\";\nimport { GEOFENCE_BORDER_COLOR, GEOFENCE_COLOR, GEOFENCE_VERTEX_COLOR } from \"../constants\";\nexport class AmplifyMapDraw {\n  constructor(map, ui) {\n    this._mapBoxDraw = new MapboxDraw({\n      displayControlsDefault: false,\n      defaultMode: \"simple_select\",\n      userProperties: true,\n      controls: {\n        trash: true\n      },\n      modes: Object.assign(Object.assign({}, MapboxDraw.modes), {\n        draw_circle: CircleMode,\n        direct_select: DirectMode,\n        simple_select: SimpleSelectMode\n      }),\n      styles: [// ACTIVE (being drawn)\n      // polygon fill\n      {\n        id: \"gl-draw-polygon-fill\",\n        type: \"fill\",\n        filter: [\"all\", [\"==\", \"$type\", \"Polygon\"], [\"!=\", \"mode\", \"static\"]],\n        paint: {\n          \"fill-color\": GEOFENCE_COLOR,\n          \"fill-outline-color\": GEOFENCE_COLOR,\n          \"fill-opacity\": 0.3\n        }\n      }, // polygon mid points\n      {\n        id: \"gl-draw-polygon-midpoint\",\n        type: \"circle\",\n        filter: [\"all\", [\"==\", \"$type\", \"Point\"], [\"==\", \"meta\", \"midpoint\"]],\n        paint: {\n          \"circle-radius\": 5,\n          \"circle-color\": GEOFENCE_VERTEX_COLOR\n        }\n      }, // polygon border\n      {\n        id: \"gl-draw-polygon-stroke-active\",\n        type: \"line\",\n        filter: [\"all\", [\"==\", \"$type\", \"Polygon\"], [\"!=\", \"mode\", \"static\"]],\n        layout: {\n          \"line-cap\": \"round\",\n          \"line-join\": \"round\"\n        },\n        paint: {\n          \"line-color\": GEOFENCE_BORDER_COLOR,\n          \"line-width\": 4\n        }\n      }, // vertex circle\n      {\n        id: \"gl-draw-polygon-and-line-vertex-active\",\n        type: \"circle\",\n        filter: [\"all\", [\"==\", \"meta\", \"vertex\"], [\"==\", \"$type\", \"Point\"], [\"!=\", \"mode\", \"static\"]],\n        paint: {\n          \"circle-radius\": 8,\n          \"circle-color\": GEOFENCE_VERTEX_COLOR,\n          \"circle-stroke-color\": GEOFENCE_BORDER_COLOR,\n          \"circle-stroke-width\": 1\n        }\n      }]\n    });\n    this._map = map;\n    this._ui = ui;\n    this.enable = this.enable.bind(this);\n    this.disable = this.disable.bind(this);\n    this.drawPolygonGeofence = this.drawPolygonGeofence.bind(this);\n  }\n\n  get(id) {\n    return this._mapBoxDraw.get(id);\n  }\n\n  add(data) {\n    const isCircle = data.properties.isCircle;\n    this.enable(isCircle);\n\n    this._mapBoxDraw.add(data);\n\n    this._mapBoxDraw.changeMode(\"direct_select\", {\n      featureId: data.id\n    });\n  }\n\n  delete(id) {\n    this._mapBoxDraw.delete(id);\n  }\n\n  disable() {\n    if (this._map.hasControl(this._mapBoxDraw)) {\n      this._map.removeControl(this._mapBoxDraw);\n    }\n\n    this._ui.removeGeofenceCreateContainer();\n  }\n\n  enable(isCircle) {\n    if (this._map.hasControl(this._mapBoxDraw)) {\n      return;\n    }\n\n    this._map.addControl(this._mapBoxDraw, \"bottom-right\");\n\n    this._ui.createGeofenceCreateContainer(isCircle);\n  }\n  /**\n   * Draws a polygonal geofence around the center of the current map view. The polygon defaults to 3/4 the size of the current map bounds\n   * @param id the geofence geojson id\n   */\n\n\n  drawPolygonGeofence(id) {\n    const mapBounds = this._map.getBounds();\n\n    const feature = getPolygonFeatureFromBounds(id, mapBounds);\n    this.add(feature);\n  }\n  /**\n   * Draws a cicular geofence around the center of the current map view\n   * @param id the geofence geojson id\n   * @param radius optional parameter for setting the radius of the cicular geofence, default to 1/8th of the current map bounds length\n   */\n\n\n  drawCircularGeofence(id, radius) {\n    const mapBounds = this._map.getBounds();\n\n    const circleFeature = getCircleFeatureFromCoords(id, this._map.getCenter().toArray(), {\n      bounds: mapBounds,\n      radius\n    });\n    this.add(circleFeature);\n\n    this._ui.updateGeofenceRadius(radius || circleFeature.properties.radius.toFixed(2));\n  }\n\n}","map":{"version":3,"names":["MapboxDraw","CircleMode","SimpleSelectMode","DirectMode","getPolygonFeatureFromBounds","getCircleFeatureFromCoords","GEOFENCE_BORDER_COLOR","GEOFENCE_COLOR","GEOFENCE_VERTEX_COLOR","AmplifyMapDraw","constructor","map","ui","_mapBoxDraw","displayControlsDefault","defaultMode","userProperties","controls","trash","modes","Object","assign","draw_circle","direct_select","simple_select","styles","id","type","filter","paint","layout","_map","_ui","enable","bind","disable","drawPolygonGeofence","get","add","data","isCircle","properties","changeMode","featureId","delete","hasControl","removeControl","removeGeofenceCreateContainer","addControl","createGeofenceCreateContainer","mapBounds","getBounds","feature","drawCircularGeofence","radius","circleFeature","getCenter","toArray","bounds","updateGeofenceRadius","toFixed"],"sources":["C:/Users/lmore/OneDrive/Documents/GitHub/JacksOfAllTrades/jacksofalltrades/node_modules/maplibre-gl-js-amplify/lib/esm/AmplifyGeofenceControl/AmplifyMapDraw.js"],"sourcesContent":["import MapboxDraw from \"@mapbox/mapbox-gl-draw\";\nimport { CircleMode, SimpleSelectMode, DirectMode, } from \"maplibre-gl-draw-circle\";\nimport { getPolygonFeatureFromBounds, getCircleFeatureFromCoords, } from \"../geofenceUtils\";\nimport { GEOFENCE_BORDER_COLOR, GEOFENCE_COLOR, GEOFENCE_VERTEX_COLOR, } from \"../constants\";\nexport class AmplifyMapDraw {\n    constructor(map, ui) {\n        this._mapBoxDraw = new MapboxDraw({\n            displayControlsDefault: false,\n            defaultMode: \"simple_select\",\n            userProperties: true,\n            controls: {\n                trash: true,\n            },\n            modes: Object.assign(Object.assign({}, MapboxDraw.modes), { draw_circle: CircleMode, direct_select: DirectMode, simple_select: SimpleSelectMode }),\n            styles: [\n                // ACTIVE (being drawn)\n                // polygon fill\n                {\n                    id: \"gl-draw-polygon-fill\",\n                    type: \"fill\",\n                    filter: [\"all\", [\"==\", \"$type\", \"Polygon\"], [\"!=\", \"mode\", \"static\"]],\n                    paint: {\n                        \"fill-color\": GEOFENCE_COLOR,\n                        \"fill-outline-color\": GEOFENCE_COLOR,\n                        \"fill-opacity\": 0.3,\n                    },\n                },\n                // polygon mid points\n                {\n                    id: \"gl-draw-polygon-midpoint\",\n                    type: \"circle\",\n                    filter: [\"all\", [\"==\", \"$type\", \"Point\"], [\"==\", \"meta\", \"midpoint\"]],\n                    paint: {\n                        \"circle-radius\": 5,\n                        \"circle-color\": GEOFENCE_VERTEX_COLOR,\n                    },\n                },\n                // polygon border\n                {\n                    id: \"gl-draw-polygon-stroke-active\",\n                    type: \"line\",\n                    filter: [\"all\", [\"==\", \"$type\", \"Polygon\"], [\"!=\", \"mode\", \"static\"]],\n                    layout: {\n                        \"line-cap\": \"round\",\n                        \"line-join\": \"round\",\n                    },\n                    paint: {\n                        \"line-color\": GEOFENCE_BORDER_COLOR,\n                        \"line-width\": 4,\n                    },\n                },\n                // vertex circle\n                {\n                    id: \"gl-draw-polygon-and-line-vertex-active\",\n                    type: \"circle\",\n                    filter: [\n                        \"all\",\n                        [\"==\", \"meta\", \"vertex\"],\n                        [\"==\", \"$type\", \"Point\"],\n                        [\"!=\", \"mode\", \"static\"],\n                    ],\n                    paint: {\n                        \"circle-radius\": 8,\n                        \"circle-color\": GEOFENCE_VERTEX_COLOR,\n                        \"circle-stroke-color\": GEOFENCE_BORDER_COLOR,\n                        \"circle-stroke-width\": 1,\n                    },\n                },\n            ],\n        });\n        this._map = map;\n        this._ui = ui;\n        this.enable = this.enable.bind(this);\n        this.disable = this.disable.bind(this);\n        this.drawPolygonGeofence = this.drawPolygonGeofence.bind(this);\n    }\n    get(id) {\n        return this._mapBoxDraw.get(id);\n    }\n    add(data) {\n        const isCircle = data.properties.isCircle;\n        this.enable(isCircle);\n        this._mapBoxDraw.add(data);\n        this._mapBoxDraw.changeMode(\"direct_select\", {\n            featureId: data.id,\n        });\n    }\n    delete(id) {\n        this._mapBoxDraw.delete(id);\n    }\n    disable() {\n        if (this._map.hasControl(this._mapBoxDraw)) {\n            this._map.removeControl(this._mapBoxDraw);\n        }\n        this._ui.removeGeofenceCreateContainer();\n    }\n    enable(isCircle) {\n        if (this._map.hasControl(this._mapBoxDraw)) {\n            return;\n        }\n        this._map.addControl(this._mapBoxDraw, \"bottom-right\");\n        this._ui.createGeofenceCreateContainer(isCircle);\n    }\n    /**\n     * Draws a polygonal geofence around the center of the current map view. The polygon defaults to 3/4 the size of the current map bounds\n     * @param id the geofence geojson id\n     */\n    drawPolygonGeofence(id) {\n        const mapBounds = this._map.getBounds();\n        const feature = getPolygonFeatureFromBounds(id, mapBounds);\n        this.add(feature);\n    }\n    /**\n     * Draws a cicular geofence around the center of the current map view\n     * @param id the geofence geojson id\n     * @param radius optional parameter for setting the radius of the cicular geofence, default to 1/8th of the current map bounds length\n     */\n    drawCircularGeofence(id, radius) {\n        const mapBounds = this._map.getBounds();\n        const circleFeature = getCircleFeatureFromCoords(id, this._map.getCenter().toArray(), { bounds: mapBounds, radius });\n        this.add(circleFeature);\n        this._ui.updateGeofenceRadius(radius || circleFeature.properties.radius.toFixed(2));\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}