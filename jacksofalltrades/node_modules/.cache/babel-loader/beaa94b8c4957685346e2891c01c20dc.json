{"ast":null,"code":"/*\n * Copyright 2017-2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport Observable from 'zen-observable-ts';\nimport { ConnectionState } from '../index';\nimport { ReachabilityMonitor } from './ReachabilityMonitor';\nexport var CONNECTION_CHANGE = {\n  KEEP_ALIVE_MISSED: {\n    keepAliveState: 'unhealthy'\n  },\n  KEEP_ALIVE: {\n    keepAliveState: 'healthy'\n  },\n  CONNECTION_ESTABLISHED: {\n    connectionState: 'connected'\n  },\n  CONNECTION_FAILED: {\n    intendedConnectionState: 'disconnected',\n    connectionState: 'disconnected'\n  },\n  CLOSING_CONNECTION: {\n    intendedConnectionState: 'disconnected'\n  },\n  OPENING_CONNECTION: {\n    intendedConnectionState: 'connected',\n    connectionState: 'connecting'\n  },\n  CLOSED: {\n    connectionState: 'disconnected'\n  },\n  ONLINE: {\n    networkState: 'connected'\n  },\n  OFFLINE: {\n    networkState: 'disconnected'\n  }\n};\n\nvar ConnectionStateMonitor =\n/** @class */\nfunction () {\n  function ConnectionStateMonitor() {\n    var _this = this;\n\n    this._networkMonitoringSubscription = undefined;\n    this._linkedConnectionState = {\n      networkState: 'connected',\n      connectionState: 'disconnected',\n      intendedConnectionState: 'disconnected',\n      keepAliveState: 'healthy'\n    };\n    this._linkedConnectionStateObservable = new Observable(function (connectionStateObserver) {\n      connectionStateObserver.next(_this._linkedConnectionState);\n      _this._linkedConnectionStateObserver = connectionStateObserver;\n    });\n  }\n  /**\n   * Turn network state monitoring on if it isn't on already\n   */\n\n\n  ConnectionStateMonitor.prototype.enableNetworkMonitoring = function () {\n    var _this = this; // Maintain the network state based on the reachability monitor\n\n\n    if (this._networkMonitoringSubscription === undefined) {\n      this._networkMonitoringSubscription = ReachabilityMonitor().subscribe(function (_a) {\n        var online = _a.online;\n\n        _this.record(online ? CONNECTION_CHANGE.ONLINE : CONNECTION_CHANGE.OFFLINE);\n      });\n    }\n  };\n  /**\n   * Turn network state monitoring off if it isn't off already\n   */\n\n\n  ConnectionStateMonitor.prototype.disableNetworkMonitoring = function () {\n    var _a;\n\n    (_a = this._networkMonitoringSubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();\n    this._networkMonitoringSubscription = undefined;\n  };\n\n  Object.defineProperty(ConnectionStateMonitor.prototype, \"connectionStateObservable\", {\n    /**\n     * Get the observable that allows us to monitor the connection state\n     *\n     * @returns {Observable<ConnectionState>} - The observable that emits ConnectionState updates\n     */\n    get: function () {\n      var _this = this;\n\n      var previous; // The linked state aggregates state changes to any of the network, connection,\n      // intendedConnection and keepAliveHealth. Some states will change these independent\n      // states without changing the overall connection state.\n      // After translating from linked states to ConnectionState, then remove any duplicates\n\n      return this._linkedConnectionStateObservable.map(function (value) {\n        return _this.connectionStatesTranslator(value);\n      }).filter(function (current) {\n        var toInclude = current !== previous;\n        previous = current;\n        return toInclude;\n      });\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /*\n   * Updates local connection state and emits the full state to the observer.\n   */\n\n  ConnectionStateMonitor.prototype.record = function (statusUpdates) {\n    // Maintain the network monitor\n    if (statusUpdates.intendedConnectionState === 'connected') {\n      this.enableNetworkMonitoring();\n    } else if (statusUpdates.intendedConnectionState === 'disconnected') {\n      this.disableNetworkMonitoring();\n    } // Maintain the socket state\n\n\n    var newSocketStatus = __assign(__assign({}, this._linkedConnectionState), statusUpdates);\n\n    this._linkedConnectionState = __assign({}, newSocketStatus);\n\n    this._linkedConnectionStateObserver.next(this._linkedConnectionState);\n  };\n  /*\n   * Translate the ConnectionState structure into a specific ConnectionState string literal union\n   */\n\n\n  ConnectionStateMonitor.prototype.connectionStatesTranslator = function (_a) {\n    var connectionState = _a.connectionState,\n        networkState = _a.networkState,\n        intendedConnectionState = _a.intendedConnectionState,\n        keepAliveState = _a.keepAliveState;\n    if (connectionState === 'connected' && networkState === 'disconnected') return ConnectionState.ConnectedPendingNetwork;\n    if (connectionState === 'connected' && intendedConnectionState === 'disconnected') return ConnectionState.ConnectedPendingDisconnect;\n    if (connectionState === 'disconnected' && intendedConnectionState === 'connected' && networkState === 'disconnected') return ConnectionState.ConnectionDisruptedPendingNetwork;\n    if (connectionState === 'disconnected' && intendedConnectionState === 'connected') return ConnectionState.ConnectionDisrupted;\n    if (connectionState === 'connected' && keepAliveState === 'unhealthy') return ConnectionState.ConnectedPendingKeepAlive; // All remaining states directly correspond to the connection state\n\n    if (connectionState === 'connecting') return ConnectionState.Connecting;\n    if (connectionState === 'disconnected') return ConnectionState.Disconnected;\n    return ConnectionState.Connected;\n  };\n\n  return ConnectionStateMonitor;\n}();\n\nexport { ConnectionStateMonitor };","map":{"version":3,"mappings":"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","names":["Observable","ConnectionState","ReachabilityMonitor","CONNECTION_CHANGE","KEEP_ALIVE_MISSED","keepAliveState","KEEP_ALIVE","CONNECTION_ESTABLISHED","connectionState","CONNECTION_FAILED","intendedConnectionState","CLOSING_CONNECTION","OPENING_CONNECTION","CLOSED","ONLINE","networkState","OFFLINE","_networkMonitoringSubscription","undefined","_linkedConnectionState","_linkedConnectionStateObservable","connectionStateObserver","next","_this","_linkedConnectionStateObserver","ConnectionStateMonitor","subscribe","_a","online","record","unsubscribe","Object","previous","map","connectionStatesTranslator","value","filter","toInclude","current","statusUpdates","enableNetworkMonitoring","disableNetworkMonitoring","newSocketStatus","__assign","ConnectedPendingNetwork","ConnectedPendingDisconnect","ConnectionDisruptedPendingNetwork","ConnectionDisrupted","ConnectedPendingKeepAlive","Connecting","Disconnected","Connected"],"sources":["C:\\Users\\lmore\\OneDrive\\Documents\\GitHub\\JacksOfAllTrades\\jacksofalltrades\\node_modules\\@aws-amplify\\pubsub\\src\\utils\\ConnectionStateMonitor.ts"],"sourcesContent":["/*\n * Copyright 2017-2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n\nimport { Reachability } from '@aws-amplify/core';\nimport Observable, { ZenObservable } from 'zen-observable-ts';\nimport { ConnectionState } from '../index';\nimport { ReachabilityMonitor } from './ReachabilityMonitor';\n\n// Internal types for tracking different connection states\ntype LinkedConnectionState = 'connected' | 'disconnected';\ntype LinkedHealthState = 'healthy' | 'unhealthy';\ntype LinkedConnectionStates = {\n\tnetworkState: LinkedConnectionState;\n\tconnectionState: LinkedConnectionState | 'connecting';\n\tintendedConnectionState: LinkedConnectionState;\n\tkeepAliveState: LinkedHealthState;\n};\n\nexport const CONNECTION_CHANGE: {\n\t[key in\n\t\t| 'KEEP_ALIVE_MISSED'\n\t\t| 'KEEP_ALIVE'\n\t\t| 'CONNECTION_ESTABLISHED'\n\t\t| 'CONNECTION_FAILED'\n\t\t| 'CLOSING_CONNECTION'\n\t\t| 'OPENING_CONNECTION'\n\t\t| 'CLOSED'\n\t\t| 'ONLINE'\n\t\t| 'OFFLINE']: Partial<LinkedConnectionStates>;\n} = {\n\tKEEP_ALIVE_MISSED: { keepAliveState: 'unhealthy' },\n\tKEEP_ALIVE: { keepAliveState: 'healthy' },\n\tCONNECTION_ESTABLISHED: { connectionState: 'connected' },\n\tCONNECTION_FAILED: {\n\t\tintendedConnectionState: 'disconnected',\n\t\tconnectionState: 'disconnected',\n\t},\n\tCLOSING_CONNECTION: { intendedConnectionState: 'disconnected' },\n\tOPENING_CONNECTION: {\n\t\tintendedConnectionState: 'connected',\n\t\tconnectionState: 'connecting',\n\t},\n\tCLOSED: { connectionState: 'disconnected' },\n\tONLINE: { networkState: 'connected' },\n\tOFFLINE: { networkState: 'disconnected' },\n};\n\nexport class ConnectionStateMonitor {\n\t/**\n\t * @private\n\t */\n\tprivate _linkedConnectionState: LinkedConnectionStates;\n\tprivate _linkedConnectionStateObservable: Observable<LinkedConnectionStates>;\n\tprivate _linkedConnectionStateObserver: ZenObservable.SubscriptionObserver<LinkedConnectionStates>;\n\tprivate _networkMonitoringSubscription?: ZenObservable.Subscription;\n\n\tconstructor() {\n\t\tthis._networkMonitoringSubscription = undefined;\n\t\tthis._linkedConnectionState = {\n\t\t\tnetworkState: 'connected',\n\t\t\tconnectionState: 'disconnected',\n\t\t\tintendedConnectionState: 'disconnected',\n\t\t\tkeepAliveState: 'healthy',\n\t\t};\n\n\t\tthis._linkedConnectionStateObservable =\n\t\t\tnew Observable<LinkedConnectionStates>(connectionStateObserver => {\n\t\t\t\tconnectionStateObserver.next(this._linkedConnectionState);\n\t\t\t\tthis._linkedConnectionStateObserver = connectionStateObserver;\n\t\t\t});\n\t}\n\n\t/**\n\t * Turn network state monitoring on if it isn't on already\n\t */\n\tprivate enableNetworkMonitoring() {\n\t\t// Maintain the network state based on the reachability monitor\n\t\tif (this._networkMonitoringSubscription === undefined) {\n\t\t\tthis._networkMonitoringSubscription = ReachabilityMonitor().subscribe(\n\t\t\t\t({ online }) => {\n\t\t\t\t\tthis.record(\n\t\t\t\t\t\tonline ? CONNECTION_CHANGE.ONLINE : CONNECTION_CHANGE.OFFLINE\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * Turn network state monitoring off if it isn't off already\n\t */\n\tprivate disableNetworkMonitoring() {\n\t\tthis._networkMonitoringSubscription?.unsubscribe();\n\t\tthis._networkMonitoringSubscription = undefined;\n\t}\n\n\t/**\n\t * Get the observable that allows us to monitor the connection state\n\t *\n\t * @returns {Observable<ConnectionState>} - The observable that emits ConnectionState updates\n\t */\n\tpublic get connectionStateObservable(): Observable<ConnectionState> {\n\t\tlet previous: ConnectionState;\n\n\t\t// The linked state aggregates state changes to any of the network, connection,\n\t\t// intendedConnection and keepAliveHealth. Some states will change these independent\n\t\t// states without changing the overall connection state.\n\n\t\t// After translating from linked states to ConnectionState, then remove any duplicates\n\t\treturn this._linkedConnectionStateObservable\n\t\t\t.map(value => {\n\t\t\t\treturn this.connectionStatesTranslator(value);\n\t\t\t})\n\t\t\t.filter(current => {\n\t\t\t\tconst toInclude = current !== previous;\n\t\t\t\tprevious = current;\n\t\t\t\treturn toInclude;\n\t\t\t});\n\t}\n\n\t/*\n\t * Updates local connection state and emits the full state to the observer.\n\t */\n\trecord(statusUpdates: Partial<LinkedConnectionStates>) {\n\t\t// Maintain the network monitor\n\t\tif (statusUpdates.intendedConnectionState === 'connected') {\n\t\t\tthis.enableNetworkMonitoring();\n\t\t} else if (statusUpdates.intendedConnectionState === 'disconnected') {\n\t\t\tthis.disableNetworkMonitoring();\n\t\t}\n\n\t\t// Maintain the socket state\n\t\tconst newSocketStatus = {\n\t\t\t...this._linkedConnectionState,\n\t\t\t...statusUpdates,\n\t\t};\n\n\t\tthis._linkedConnectionState = { ...newSocketStatus };\n\n\t\tthis._linkedConnectionStateObserver.next(this._linkedConnectionState);\n\t}\n\n\t/*\n\t * Translate the ConnectionState structure into a specific ConnectionState string literal union\n\t */\n\tprivate connectionStatesTranslator({\n\t\tconnectionState,\n\t\tnetworkState,\n\t\tintendedConnectionState,\n\t\tkeepAliveState,\n\t}: LinkedConnectionStates): ConnectionState {\n\t\tif (connectionState === 'connected' && networkState === 'disconnected')\n\t\t\treturn ConnectionState.ConnectedPendingNetwork;\n\n\t\tif (\n\t\t\tconnectionState === 'connected' &&\n\t\t\tintendedConnectionState === 'disconnected'\n\t\t)\n\t\t\treturn ConnectionState.ConnectedPendingDisconnect;\n\n\t\tif (\n\t\t\tconnectionState === 'disconnected' &&\n\t\t\tintendedConnectionState === 'connected' &&\n\t\t\tnetworkState === 'disconnected'\n\t\t)\n\t\t\treturn ConnectionState.ConnectionDisruptedPendingNetwork;\n\n\t\tif (\n\t\t\tconnectionState === 'disconnected' &&\n\t\t\tintendedConnectionState === 'connected'\n\t\t)\n\t\t\treturn ConnectionState.ConnectionDisrupted;\n\n\t\tif (connectionState === 'connected' && keepAliveState === 'unhealthy')\n\t\t\treturn ConnectionState.ConnectedPendingKeepAlive;\n\n\t\t// All remaining states directly correspond to the connection state\n\t\tif (connectionState === 'connecting') return ConnectionState.Connecting;\n\t\tif (connectionState === 'disconnected') return ConnectionState.Disconnected;\n\t\treturn ConnectionState.Connected;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}