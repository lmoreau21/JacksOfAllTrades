{"ast":null,"code":"/**\n * Changes object keys to camel case. If optional parameter `keys` is given, then we extract only the\n * keys specified in `keys`.\n */\nexport function makeCamelCase(obj, keys) {\n  if (!obj) return undefined;\n  var newObj = {};\n  var keysToRename = keys ? keys : Object.keys(obj);\n  keysToRename.forEach(function (key) {\n    var _a;\n\n    if (obj.hasOwnProperty(key)) {\n      // change the key to camelcase.\n      var camelCaseKey = key.charAt(0).toLowerCase() + key.substr(1);\n      Object.assign(newObj, (_a = {}, _a[camelCaseKey] = obj[key], _a));\n    }\n  });\n  return newObj;\n}\n/**\n * Given an array of object, call makeCamelCase(...) on each option.\n */\n\nexport function makeCamelCaseArray(objArr, keys) {\n  if (!objArr) return undefined;\n  return objArr.map(function (obj) {\n    return makeCamelCase(obj, keys);\n  });\n}\n/**\n * Converts blob to array buffer\n */\n\nexport function blobToArrayBuffer(blob) {\n  return new Promise(function (res, rej) {\n    var reader = new FileReader();\n\n    reader.onload = function (_event) {\n      res(reader.result);\n    };\n\n    reader.onerror = function (err) {\n      rej(err);\n    };\n\n    try {\n      reader.readAsArrayBuffer(blob);\n    } catch (err) {\n      rej(err); // in case user gives invalid type\n    }\n  });\n}","map":{"version":3,"mappings":"AAAA;;;;AAIA,OAAM,SAAUA,aAAV,CAAwBC,GAAxB,EAAqCC,IAArC,EAAoD;EACzD,IAAI,CAACD,GAAL,EAAU,OAAOE,SAAP;EACV,IAAMC,MAAM,GAAG,EAAf;EACA,IAAMC,YAAY,GAAGH,IAAI,GAAGA,IAAH,GAAUI,MAAM,CAACJ,IAAP,CAAYD,GAAZ,CAAnC;EACAI,YAAY,CAACE,OAAb,CAAqB,eAAG;;;IACvB,IAAIN,GAAG,CAACO,cAAJ,CAAmBC,GAAnB,CAAJ,EAA6B;MAC5B;MACA,IAAMC,YAAY,GAAGD,GAAG,CAACE,MAAJ,CAAW,CAAX,EAAcC,WAAd,KAA8BH,GAAG,CAACI,MAAJ,CAAW,CAAX,CAAnD;MACAP,MAAM,CAACQ,MAAP,CAAcV,MAAd,GAAoBW,SAAIA,GAACL,YAAD,IAAgBT,GAAG,CAACQ,GAAD,CAAvB,EAA4BM,EAAhD;IACA;EACD,CAND;EAOA,OAAOX,MAAP;AACA;AAED;;;;AAGA,OAAM,SAAUY,kBAAV,CAA6BC,MAA7B,EAA+Cf,IAA/C,EAA8D;EACnE,IAAI,CAACe,MAAL,EAAa,OAAOd,SAAP;EACb,OAAOc,MAAM,CAACC,GAAP,CAAW,eAAG;IAAI,oBAAa,CAACjB,GAAD,EAAMC,IAAN,CAAb;EAAwB,CAA1C,CAAP;AACA;AAED;;;;AAGA,OAAM,SAAUiB,iBAAV,CAA4BC,IAA5B,EAAsC;EAC3C,OAAO,IAAIC,OAAJ,CAAY,UAACC,GAAD,EAAMC,GAAN,EAAS;IAC3B,IAAMC,MAAM,GAAG,IAAIC,UAAJ,EAAf;;IACAD,MAAM,CAACE,MAAP,GAAgB,kBAAM;MACrBJ,GAAG,CAACE,MAAM,CAACG,MAAR,CAAH;IACA,CAFD;;IAGAH,MAAM,CAACI,OAAP,GAAiB,eAAG;MACnBL,GAAG,CAACM,GAAD,CAAH;IACA,CAFD;;IAGA,IAAI;MACHL,MAAM,CAACM,iBAAP,CAAyBV,IAAzB;IACA,CAFD,CAEE,OAAOS,GAAP,EAAY;MACbN,GAAG,CAACM,GAAD,CAAH,CADa,CACH;IACV;EACD,CAbM,CAAP;AAcA","names":["makeCamelCase","obj","keys","undefined","newObj","keysToRename","Object","forEach","hasOwnProperty","key","camelCaseKey","charAt","toLowerCase","substr","assign","_a","makeCamelCaseArray","objArr","map","blobToArrayBuffer","blob","Promise","res","rej","reader","FileReader","onload","result","onerror","err","readAsArrayBuffer"],"sources":["C:\\Users\\lmore\\OneDrive\\Documents\\GitHub\\JacksOfAllTrades\\jacksofalltrades\\node_modules\\@aws-amplify\\predictions\\src\\Providers\\Utils.ts"],"sourcesContent":["/**\n * Changes object keys to camel case. If optional parameter `keys` is given, then we extract only the\n * keys specified in `keys`.\n */\nexport function makeCamelCase(obj: object, keys?: string[]) {\n\tif (!obj) return undefined;\n\tconst newObj = {};\n\tconst keysToRename = keys ? keys : Object.keys(obj);\n\tkeysToRename.forEach(key => {\n\t\tif (obj.hasOwnProperty(key)) {\n\t\t\t// change the key to camelcase.\n\t\t\tconst camelCaseKey = key.charAt(0).toLowerCase() + key.substr(1);\n\t\t\tObject.assign(newObj, { [camelCaseKey]: obj[key] });\n\t\t}\n\t});\n\treturn newObj;\n}\n\n/**\n * Given an array of object, call makeCamelCase(...) on each option.\n */\nexport function makeCamelCaseArray(objArr: object[], keys?: string[]) {\n\tif (!objArr) return undefined;\n\treturn objArr.map(obj => makeCamelCase(obj, keys));\n}\n\n/**\n * Converts blob to array buffer\n */\nexport function blobToArrayBuffer(blob: Blob): Promise<Uint8Array> {\n\treturn new Promise((res, rej) => {\n\t\tconst reader = new FileReader();\n\t\treader.onload = _event => {\n\t\t\tres(reader.result as Uint8Array);\n\t\t};\n\t\treader.onerror = err => {\n\t\t\trej(err);\n\t\t};\n\t\ttry {\n\t\t\treader.readAsArrayBuffer(blob);\n\t\t} catch (err) {\n\t\t\trej(err); // in case user gives invalid type\n\t\t}\n\t});\n}\n"]},"metadata":{},"sourceType":"module"}