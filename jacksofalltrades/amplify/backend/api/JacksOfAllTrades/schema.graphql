type SignIn @model @auth(rules: [{allow: public}]) {
  id: ID!
  userEmail: String!
  userPassword: String!
  userConfirmPassword: String!
  usersSignIns: [Users] @manyToMany(relationName: "SignInUsers")
}

type ExistingUser @model @auth(rules: [{allow: public}]) {
  id: ID!
  userName: String
  userEmail: String
  isTrue: Boolean
  isCurrentUser: [Users!] @manyToMany(relationName: "UsersExistingUser")
}

type Users @model @auth(rules: [{allow: public}]) {
  id: ID!
  firstName: String!
  lastName: String!
  userEmail: AWSEmail!
  existingUsers: [ExistingUser] @manyToMany(relationName: "UsersExistingUser")
  signins: [SignIn] @manyToMany(relationName: "SignInUsers")
  group: String
}

type SignUp @model @auth(rules: [{allow: public}]) {
  id: ID!
  userEmail: AWSEmail!
  userPassword: String!
  userConfirmPassword: String!
}

type Skillprofile @model @auth(rules: [{allow: public}, {allow: groups, groups: ["Admin"], operations: [read, create, update, delete]}, {allow: groups, groups: ["Instructor"], operations: [read, create, update, delete]}, {allow: groups, groups: ["User"], operations: [read]}]) {
  id: ID!
  title: String
  description: String
  instructions: String
  instructionRights: String
  category: String
  difficultyLevel: String
  materialsRequired: Boolean
  timeEstimate: String
  photo: AWSURL
  photoRights: String
  video: AWSURL
  videoRights: String
  creator: String
  skillId: ID
}